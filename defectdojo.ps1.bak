#!/usr/bin/env pwsh
# ===============================================================================
# DefectDojo Management Script
# ===============================================================================
# Simplifies DefectDojo operations for local development
# Usage: ./defectdojo.ps1 [command]
# ===============================================================================

param(
    [Parameter(Position = 0)]
    [ValidateSet('start', 'stop', 'restart', 'status', 'logs', 'scan', 'upload', 'clean', 'help')]
    [string]$Command = 'help'
)

$ErrorActionPreference = "Stop"
$ComposeFile = "compliance/docker-compose.defectdojo.yml"

# ANSI Colors
$ColorGreen = "`e[32m"
$ColorYellow = "`e[33m"
$ColorRed = "`e[31m"
$ColorBlue = "`e[34m"
$ColorCyan = "`e[36m"
$ColorReset = "`e[0m"

function Write-Banner {
    Write-Host ""
    Write-Host "${ColorCyan}═══════════════════════════════════════════════════════════════${ColorReset}"
    Write-Host "${ColorCyan} DEFECTDOJO COMPLIANCE PLATFORM${ColorReset}"
    Write-Host "${ColorCyan}═══════════════════════════════════════════════════════════════${ColorReset}"
    Write-Host ""
}

function Write-Success {
    param([string]$Message)
    Write-Host "${ColorGreen}✓ $Message${ColorReset}"
}

function Write-Info {
    param([string]$Message)
    Write-Host "${ColorBlue}▶ $Message${ColorReset}"
}

function Write-Warning {
    param([string]$Message)
    Write-Host "${ColorYellow}⚠ $Message${ColorReset}"
}

function Write-Error-Message {
    param([string]$Message)
    Write-Host "${ColorRed}✗ $Message${ColorReset}"
}

function Show-Help {
    Write-Banner
    Write-Host "COMMANDS:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "  ${ColorGreen}start${ColorReset}       Start DefectDojo services"
    Write-Host "  ${ColorGreen}stop${ColorReset}        Stop DefectDojo services"
    Write-Host "  ${ColorGreen}restart${ColorReset}     Restart DefectDojo services"
    Write-Host "  ${ColorGreen}status${ColorReset}      Check service status"
    Write-Host "  ${ColorGreen}logs${ColorReset}        View service logs"
    Write-Host "  ${ColorGreen}scan${ColorReset}        Run security scans on backend"
    Write-Host "  ${ColorGreen}upload${ColorReset}      Upload scan results to DefectDojo"
    Write-Host "  ${ColorGreen}clean${ColorReset}       Remove all containers and volumes"
    Write-Host "  ${ColorGreen}help${ColorReset}        Show this help message"
    Write-Host ""
    Write-Host "EXAMPLES:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "  ${ColorBlue}# Start DefectDojo${ColorReset}"
    Write-Host "  ./defectdojo.ps1 start"
    Write-Host ""
    Write-Host "  ${ColorBlue}# Run scans and upload results${ColorReset}"
    Write-Host "  ./defectdojo.ps1 scan"
    Write-Host "  ./defectdojo.ps1 upload"
    Write-Host ""
    Write-Host "  ${ColorBlue}# View logs${ColorReset}"
    Write-Host "  ./defectdojo.ps1 logs"
    Write-Host ""
    Write-Host "ACCESS:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "  URL:      ${ColorCyan}http://localhost:8081${ColorReset}"
    Write-Host "  Username: ${ColorCyan}admin${ColorReset}"
    Write-Host "  Password: ${ColorCyan}admin${ColorReset}"
    Write-Host ""
    Write-Host "${ColorCyan}═══════════════════════════════════════════════════════════════${ColorReset}"
    Write-Host ""
}

function Start-DefectDojo {
    Write-Banner
    Write-Info "Starting DefectDojo services..."
    
    try {
        docker-compose -f $ComposeFile up -d
        
        Write-Host ""
        Write-Success "DefectDojo services started successfully"
        Write-Host ""
        Write-Info "Waiting for services to initialize (this may take 30-60 seconds)..."
        Start-Sleep -Seconds 5
        
        Write-Host ""
        Write-Host "SERVICE STATUS:" -ForegroundColor Yellow
        docker-compose -f $ComposeFile ps
        
        Write-Host ""
        Write-Host "${ColorGreen}ACCESS DEFECTDOJO:${ColorReset}"
        Write-Host "  URL:      ${ColorCyan}http://localhost:8081${ColorReset}"
        Write-Host "  Username: ${ColorCyan}admin${ColorReset}"
        Write-Host "  Password: ${ColorCyan}admin${ColorReset}"
        Write-Host ""
        Write-Warning "Note: First startup may take 2-3 minutes for database initialization"
        Write-Host ""
        
    } catch {
        Write-Error-Message "Failed to start DefectDojo: $($_.Exception.Message)"
        exit 1
    }
}

function Stop-DefectDojo {
    Write-Banner
    Write-Info "Stopping DefectDojo services..."
    
    try {
        docker-compose -f $ComposeFile down
        Write-Success "DefectDojo services stopped"
    } catch {
        Write-Error-Message "Failed to stop DefectDojo: $($_.Exception.Message)"
        exit 1
    }
}

function Restart-DefectDojo {
    Write-Banner
    Write-Info "Restarting DefectDojo services..."
    
    Stop-DefectDojo
    Start-Sleep -Seconds 2
    Start-DefectDojo
}

function Show-Status {
    Write-Banner
    Write-Info "DefectDojo Service Status:"
    Write-Host ""
    
    docker-compose -f $ComposeFile ps
    
    Write-Host ""
    Write-Info "Testing DefectDojo availability..."
    
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8081/login" -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Success "DefectDojo is accessible at http://localhost:8081"
        }
    } catch {
        Write-Warning "DefectDojo may not be fully initialized yet"
        Write-Info "Run: ./defectdojo.ps1 logs"
    }
}

function Show-Logs {
    Write-Banner
    Write-Info "Showing DefectDojo logs (Ctrl+C to exit)..."
    Write-Host ""
    
    docker-compose -f $ComposeFile logs -f
}

function Run-SecurityScan {
    Write-Banner
    Write-Info "Running security scans on backend services..."
    Write-Host ""
    
    Push-Location backend
    
    try {
        Write-Info "Creating reports directory..."
        New-Item -ItemType Directory -Force -Path "target/security-reports" | Out-Null
        
        Write-Host ""
        Write-Info "Running OWASP Dependency Check..."
        mvn org.owasp:dependency-check-maven:check `
            -DdataDirectory=./dependency-check-data `
            -Dformat=JSON `
            -DprettyPrint=true
        
        if (Test-Path "target/dependency-check-report.json") {
            Copy-Item "target/dependency-check-report.json" "target/security-reports/" -Force
            Write-Success "OWASP Dependency Check complete"
        }
        
        Write-Host ""
        Write-Info "Running SpotBugs security analysis..."
        mvn compile spotbugs:spotbugs `
            -Dspotbugs.xmlOutput=true `
            -Dspotbugs.xmlOutputDirectory=target/security-reports
        Write-Success "SpotBugs analysis complete"
        
        Write-Host ""
        Write-Info "Running Checkstyle..."
        mvn checkstyle:checkstyle
        if (Test-Path "target/checkstyle-result.xml") {
            Copy-Item "target/checkstyle-result.xml" "target/security-reports/" -Force
            Write-Success "Checkstyle complete"
        }
        
        Write-Host ""
        Write-Info "Running PMD analysis..."
        mvn pmd:pmd pmd:cpd
        if (Test-Path "target/pmd.xml") {
            Copy-Item "target/pmd.xml" "target/security-reports/" -Force
            Write-Success "PMD analysis complete"
        }
        
        Write-Host ""
        Write-Success "All security scans completed!"
        Write-Host ""
        Write-Info "Results saved to: backend/target/security-reports/"
        Write-Host ""
        Write-Info "Next step: Run './defectdojo.ps1 upload' to upload results to DefectDojo"
        
    } catch {
        Write-Error-Message "Security scan failed: $($_.Exception.Message)"
        exit 1
    } finally {
        Pop-Location
    }
}

function Upload-Results {
    Write-Banner
    Write-Info "Uploading scan results to DefectDojo..."
    Write-Host ""
    
    $uploadScript = "compliance/scripts/upload-to-defectdojo.ps1"
    
    if (Test-Path $uploadScript) {
        & $uploadScript
    } else {
        Write-Error-Message "Upload script not found: $uploadScript"
        exit 1
    }
}

function Clean-DefectDojo {
    Write-Banner
    Write-Warning "This will remove all DefectDojo containers, volumes, and data!"
    Write-Host ""
    
    $confirm = Read-Host "Are you sure? Type 'yes' to confirm"
    
    if ($confirm -eq "yes") {
        Write-Info "Removing DefectDojo containers and volumes..."
        
        try {
            docker-compose -f $ComposeFile down -v
            Write-Success "DefectDojo cleaned up successfully"
            Write-Info "All data has been removed. Run './defectdojo.ps1 start' to recreate."
        } catch {
            Write-Error-Message "Failed to clean DefectDojo: $($_.Exception.Message)"
            exit 1
        }
    } else {
        Write-Info "Cleanup cancelled"
    }
}

# ===============================================================================
# Main Command Router
# ===============================================================================
switch ($Command) {
    'start' { Start-DefectDojo }
    'stop' { Stop-DefectDojo }
    'restart' { Restart-DefectDojo }
    'status' { Show-Status }
    'logs' { Show-Logs }
    'scan' { Run-SecurityScan }
    'upload' { Upload-Results }
    'clean' { Clean-DefectDojo }
    'help' { Show-Help }
    default { Show-Help }
}

