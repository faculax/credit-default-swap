###############################
# Build Stage
###############################
FROM maven:3.9.6-eclipse-temurin-21-alpine AS build
WORKDIR /workspace
COPY pom.xml .
RUN mvn -q -e -DskipTests dependency:go-offline
COPY src ./src
RUN mvn -q -DskipTests package

###############################
# Runtime Stage - Using pre-built ORE
###############################
FROM ore:v1.8.13.1

# Install Java 17 (more commonly available) and curl
RUN apt-get update && apt-get install -y \
    openjdk-17-jre-headless \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && java -version

WORKDIR /app

# Copy built artifact (avoid hardcoding version via glob)
COPY --from=build /workspace/target/risk-engine-*.jar risk-engine.jar

# --- Risk Engine runtime configuration ---
# Updated to use real ORE binaries from the base image
ENV RISK_IMPL=ORE \
	ORE_BINARY_PATH=/usr/local/bin/ore \
	ORE_CONFIG_PATH=/app/ore/config/ore.xml \
	ORE_WORK_DIR=/tmp/ore-work \
	ORE_TIMEOUT=60 \
	ORE_WARMUP_TIMEOUT=30 \
	ORE_RESTART_DELAY=5 \
	ORE_MAX_RESTARTS=3

# Copy verification script
COPY scripts/verify-ore.sh /app/scripts/verify-ore.sh
RUN chmod +x /app/scripts/verify-ore.sh

# Create ORE configuration directory and working directory
RUN mkdir -p /app/ore/config /tmp/ore-work \
	&& printf '%s\n' "<?xml version=\"1.0\"?><ORE><Setup><Parameter name=\"logLevel\">2</Parameter></Setup></ORE>" > /app/ore/config/ore.xml

# Verify ORE installation and find the correct binary path
RUN /app/scripts/verify-ore.sh || echo "ORE verification completed with warnings"

EXPOSE 8082

HEALTHCHECK --interval=30s --timeout=5s --retries=3 CMD curl -f http://localhost:8082/api/risk/health || exit 1

ENTRYPOINT ["java", "-jar", "risk-engine.jar"]