name: Unified Security & Quality Analysis

on:
  push:
    branches: ['**']  # All branches
  pull_request:
    branches: ['**']
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  SONAR_ORGANIZATION: 'ayodeleoladeji'
  SONAR_HOST_URL: 'https://sonarcloud.io'

jobs:
  # ============================================================
  # PHASE 1: Secrets & Sensitive Data Detection (Critical)
  # ============================================================
  secrets-scan:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan for hardcoded secrets
        run: |
          echo "üîç Scanning for hardcoded secrets and credentials..."
          echo ""
          
          SECRETS_FOUND=0
          
          # Database passwords
          echo "üìã Checking for hardcoded database credentials..."
          if grep -r --include="*.yml" --include="*.yaml" --include="*.properties" \
            -E '^\s*(password|datasource\.password):\s*[^${[:space:]]' backend/ gateway/ risk-engine/ 2>/dev/null; then
            echo "‚ùå CRITICAL: Hardcoded database passwords found!"
            SECRETS_FOUND=1
          fi
          
          # API keys and secrets in Java code
          echo ""
          echo "üîê Checking for API keys and secrets in Java code..."
          if grep -r --include="*.java" -i \
            -E '(secret|password|apikey|api_key|private_key)\s*=\s*"[^"]+"' . 2>/dev/null; then
            echo "‚ùå CRITICAL: Hardcoded secrets in Java code!"
            SECRETS_FOUND=1
          fi
          
          # Connection strings with credentials
          echo ""
          echo "üóÑÔ∏è Checking for hardcoded database connection strings..."
          if grep -r --include="*.java" --include="*.properties" --include="*.yml" \
            -E 'jdbc:postgresql://[^$].*@.*:[0-9]+/' . 2>/dev/null; then
            echo "‚ùå CRITICAL: Hardcoded database credentials in connection strings!"
            SECRETS_FOUND=1
          fi
          
          if [ "$SECRETS_FOUND" = "1" ]; then
            echo ""
            echo "==========================================="
            echo "‚ùå SECURITY ALERT: Secrets detected!"
            echo "==========================================="
            echo ""
            echo "ACTION REQUIRED:"
            echo "1. Move all credentials to environment variables"
            echo '2. Use ${VARIABLE_NAME:default} syntax in YAML files'
            echo "3. Never commit actual passwords to git"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ No hardcoded secrets detected"

  # ============================================================
  # PHASE 2: Java Backend Security Analysis + SonarCloud
  # ============================================================
  java-security-sonarcloud:
    name: ‚òï ${{ matrix.service }} - Security + SonarCloud
    runs-on: ubuntu-latest
    needs: secrets-scan
    strategy:
      fail-fast: false
      matrix:
        service: [backend, gateway, risk-engine]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarCloud blame info

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ matrix.service }}
          restore-keys: ${{ runner.os }}-sonar-

      # ===========================================
      # STEP 1: Build with retry logic
      # ===========================================
      - name: Build ${{ matrix.service }}
        working-directory: ${{ matrix.service }}
        run: |
          echo "üî® Building ${{ matrix.service }}..."
          for i in 1 2 3; do
            echo "Build attempt $i of 3..."
            if ./mvnw clean compile -DskipTests -B; then
              echo "‚úÖ Build succeeded on attempt $i"
              break
            else
              if [ $i -lt 3 ]; then
                echo "‚ö†Ô∏è  Build failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå Build failed after 3 attempts"
                exit 1
              fi
            fi
          done

      # ===========================================
      # STEP 2: Run Tests with JaCoCo Coverage
      # ===========================================
      - name: Run tests with coverage
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üß™ Running tests with coverage..."
          ./mvnw test jacoco:report -B || true
          
          # Extract coverage metrics
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            INSTRUCTION_COVERED=$(grep -oP 'type="INSTRUCTION".*?covered="\K[0-9]+' target/site/jacoco/jacoco.xml | head -1 || echo "0")
            INSTRUCTION_MISSED=$(grep -oP 'type="INSTRUCTION".*?missed="\K[0-9]+' target/site/jacoco/jacoco.xml | head -1 || echo "0")
            
            if [ "$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))" -gt 0 ]; then
              COVERAGE_PCT=$((INSTRUCTION_COVERED * 100 / (INSTRUCTION_COVERED + INSTRUCTION_MISSED)))
              echo "üìä Test Coverage: ${COVERAGE_PCT}%"
              
              if [ "$COVERAGE_PCT" -lt 80 ]; then
                echo "‚ö†Ô∏è WARNING: Coverage (${COVERAGE_PCT}%) is below 80% threshold"
                echo "::warning::${{ matrix.service }} test coverage is ${COVERAGE_PCT}% (target: 80%)"
              else
                echo "‚úÖ Coverage meets 80% threshold"
              fi
            fi
          fi

      # ===========================================
      # STEP 3: SpotBugs Security Analysis
      # ===========================================
      - name: Run SpotBugs security analysis
        working-directory: ${{ matrix.service }}
        run: |
          echo "üêõ Running SpotBugs with FindSecBugs plugin..."
          echo "   Including: CRLF injection, SQL injection, crypto issues, etc."
          
          ./mvnw spotbugs:spotbugs -Dspotbugs.xmlOutput=true -B || true
          
          # Verify report was generated
          if [ -f "target/spotbugsXml.xml" ]; then
            BUG_COUNT=$(grep -o '<BugInstance' target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            echo "üìä SpotBugs found $BUG_COUNT security issues"
            
            # Parse by severity (SpotBugs rank: 1-9=Critical, 10-14=Medium, 15-20=Low)
            HIGH_COUNT=$(grep -oE "rank='[1-9]'" target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            MEDIUM_COUNT=$(grep -oE "rank='1[0-4]'" target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            LOW_COUNT=$(grep -oE "rank='(15|16|17|18|19|20)'" target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            
            echo "   üî¥ Critical (Rank 1-9): $HIGH_COUNT"
            echo "   üü° Medium (Rank 10-14): $MEDIUM_COUNT"
            echo "   üü¢ Low (Rank 15-20): $LOW_COUNT"
            
            if [ "$BUG_COUNT" -gt 0 ]; then
              echo "::warning::${{ matrix.service }} has $BUG_COUNT SpotBugs findings"
            fi
          else
            echo "‚ùå SpotBugs report not generated!"
            exit 1
          fi

      # ===========================================
      # STEP 4: Checkstyle Analysis
      # ===========================================
      - name: Run Checkstyle
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üìê Running Checkstyle..."
          ./mvnw checkstyle:check -B || true

      # ===========================================
      # STEP 5: ZERO-TOLERANCE Quality Gate
      # ===========================================
      - name: Quality Gate - Zero-Tolerance Rules
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üö® Checking for ZERO-TOLERANCE security violations..."
          echo ""
          
          CRITICAL_VIOLATIONS=0
          
          # RULE 1: CRLF Injection (CWE-117)
          echo "üîç Rule 1: CRLF Injection in Logs..."
          CRLF_COUNT=$(grep -c 'CRLF_INJECTION_LOGS' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$CRLF_COUNT" -gt 0 ]; then
            echo "‚ùå FAIL: $CRLF_COUNT CRLF injection vulnerabilities (CWE-117)"
            echo "::error::${{ matrix.service }} has $CRLF_COUNT CRLF injection issues"
            CRITICAL_VIOLATIONS=$((CRITICAL_VIOLATIONS + CRLF_COUNT))
          else
            echo "‚úÖ PASS: No CRLF injection detected"
          fi
          echo ""
          
          # RULE 2: Predictable Random (CWE-330)
          echo "üîç Rule 2: Predictable Random Number Generation..."
          RANDOM_COUNT=$(grep -c 'PREDICTABLE_RANDOM' target/spotbugsXml.xml 2>/dev/null || echo "0")
          DEMO_EXCEPTIONS=$(grep 'PREDICTABLE_RANDOM' target/spotbugsXml.xml 2>/dev/null | grep -c 'Demo.*Service' || echo "0")
          ACTUAL_RANDOM_VIOLATIONS=$((RANDOM_COUNT - DEMO_EXCEPTIONS))
          
          if [ "$ACTUAL_RANDOM_VIOLATIONS" -gt 0 ]; then
            echo "‚ùå FAIL: $ACTUAL_RANDOM_VIOLATIONS predictable random issues (CWE-330)"
            echo "::error::${{ matrix.service }} uses java.util.Random in production code"
            CRITICAL_VIOLATIONS=$((CRITICAL_VIOLATIONS + ACTUAL_RANDOM_VIOLATIONS))
          else
            if [ "$DEMO_EXCEPTIONS" -gt 0 ]; then
              echo "‚úÖ PASS: $DEMO_EXCEPTIONS Random usages in Demo classes (acceptable)"
            else
              echo "‚úÖ PASS: No predictable random detected"
            fi
          fi
          echo ""
          
          # RULE 3: Improper Unicode/Locale Handling (CWE-176)
          echo "üîç Rule 3: Improper Unicode/Locale Handling..."
          UNICODE_COUNT=$(grep -c 'DM_CONVERT_CASE' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$UNICODE_COUNT" -gt 0 ]; then
            echo "‚ùå FAIL: $UNICODE_COUNT improper case conversion (CWE-176)"
            echo "::error::${{ matrix.service }} has toUpperCase/toLowerCase without Locale"
            CRITICAL_VIOLATIONS=$((CRITICAL_VIOLATIONS + UNICODE_COUNT))
          else
            echo "‚úÖ PASS: No unicode handling issues"
          fi
          echo ""
          
          # RULE 4: Information Exposure (CWE-209)
          echo "üîç Rule 4: Information Exposure in Exceptions..."
          INFO_EXP_COUNT=$(grep -c 'INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$INFO_EXP_COUNT" -gt 0 ]; then
            echo "‚ùå FAIL: $INFO_EXP_COUNT information exposure issues (CWE-209)"
            echo "::error::${{ matrix.service }} exposes stack traces or internal details"
            CRITICAL_VIOLATIONS=$((CRITICAL_VIOLATIONS + INFO_EXP_COUNT))
          else
            echo "‚úÖ PASS: No information exposure detected"
          fi
          echo ""
          
          # RULE 5: SQL Injection
          echo "üîç Rule 5: SQL Injection Vulnerabilities..."
          SQL_COUNT=$(grep -c 'SQL_INJECTION' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$SQL_COUNT" -gt 0 ]; then
            echo "‚ùå FAIL: $SQL_COUNT potential SQL injection issues"
            echo "::error::${{ matrix.service }} has potential SQL injection vulnerabilities"
            CRITICAL_VIOLATIONS=$((CRITICAL_VIOLATIONS + SQL_COUNT))
          else
            echo "‚úÖ PASS: No SQL injection detected"
          fi
          echo ""
          
          # Summary
          echo "======================================"
          echo "Quality Gate Summary: ${{ matrix.service }}"
          echo "======================================"
          echo "Total Critical Violations: $CRITICAL_VIOLATIONS"
          echo ""
          
          if [ "$CRITICAL_VIOLATIONS" -gt 0 ]; then
            echo "‚ö†Ô∏è  QUALITY GATE VIOLATIONS FOUND"
            echo ""
            echo "üö® WARNING: This service has $CRITICAL_VIOLATIONS zero-tolerance violations"
            echo "üìã Review: AGENTS.md for remediation steps"
            echo "üì• Download: SpotBugs HTML report from artifacts"
            echo "üìä These issues will be reported in SonarCloud"
            echo ""
            echo "::warning::${{ matrix.service }} has $CRITICAL_VIOLATIONS critical security violations"
          else
            echo "‚úÖ QUALITY GATE PASSED"
            echo "All mandatory security rules satisfied"
          fi

      # ===========================================
      # STEP 6: Grype Vulnerability Scan
      # ===========================================
      - name: Grype vulnerability scan
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üîç Installing Grype vulnerability scanner..."
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
          echo "üì¶ Scanning ${{ matrix.service }} for CVEs..."
          
          SERVICE_VERSION=$(grep -m1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/' || echo "1.0.0")
          
          grype dir:. \
            --name "${{ matrix.service }}" \
            --version "$SERVICE_VERSION" \
            --output json \
            --file grype-report.json || true
          
          grype dir:. \
            --name "${{ matrix.service }}" \
            --version "$SERVICE_VERSION" \
            --output table \
            --file grype-report.txt || true

      # ===========================================
      # STEP 7: SonarCloud Analysis (Comprehensive)
      # ===========================================
      - name: SonarCloud Scan (native analyzers)
        working-directory: ${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì° Running comprehensive SonarCloud analysis..."
          echo ""
          echo "üîç Analysis Configuration:"
          echo "   ‚Ä¢ Java version: 21"
          echo "   ‚Ä¢ Coverage: JaCoCo XML (target/site/jacoco/jacoco.xml)"
          echo "   ‚Ä¢ Quality tools: Checkstyle, PMD"
          echo "   ‚Ä¢ Security: Native analyzers + Taint analysis + Security hotspots"
          echo "   ‚Ä¢ Analyzers: RSPEC-5145 (CRLF), RSPEC-2245 (Random), RSPEC-2076/2077 (Injection)"
          echo ""
          
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-${{ matrix.service }} \
            -Dsonar.projectName="CDS Platform - ${{ matrix.service }}" \
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.pmd.reportPaths=target/pmd.xml \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.java.libraries=target/*.jar \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.java.source=21 \
            -Dsonar.security.hotspots.enabled=true \
            -Dsonar.security.taintAnalysis.enabled=true \
            -Dsonar.qualitygate.wait=true \
            -B
          
          echo ""
          echo "‚úÖ SonarCloud analysis complete!"
          echo "üåê View results: ${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-${{ matrix.service }}"

      # ===========================================
      # STEP 8: Upload Artifacts
      # ===========================================
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-security-reports
          path: |
            ${{ matrix.service }}/target/spotbugsXml.xml
            ${{ matrix.service }}/target/site/spotbugs.html
            ${{ matrix.service }}/target/site/jacoco/
            ${{ matrix.service }}/grype-report.json
            ${{ matrix.service }}/grype-report.txt
          retention-days: 30

  # ============================================================
  # PHASE 3: Frontend Security + SonarCloud
  # ============================================================
  frontend-security-sonarcloud:
    name: üé® Frontend - Security + SonarCloud
    runs-on: ubuntu-latest
    needs: secrets-scan
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Security linting
        run: |
          echo "üîí Running security-focused linting..."
          
          echo "Checking for XSS vulnerabilities..."
          grep -r "dangerouslySetInnerHTML\|innerHTML" src/ || echo "‚úÖ No dangerous HTML injection found"
          
          echo ""
          echo "Checking for hardcoded endpoints..."
          grep -r "http://\|https://" src/ | grep -v "localhost" || echo "‚úÖ No hardcoded endpoints found"

      - name: Run tests with coverage
        continue-on-error: true
        run: npm run test -- --coverage --watchAll=false --passWithNoTests || true

      - name: npm audit
        run: |
          echo "üì¶ Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
          # Parse and display results
          CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit.json 2>/dev/null || echo "0")
          HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit.json 2>/dev/null || echo "0")
          MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit.json 2>/dev/null || echo "0")
          LOW=$(jq -r '.metadata.vulnerabilities.low // 0' npm-audit.json 2>/dev/null || echo "0")
          
          echo "üìä NPM Audit Results:"
          echo "   üî¥ Critical: $CRITICAL"
          echo "   üü† High: $HIGH"
          echo "   üü° Moderate: $MODERATE"
          echo "   üü¢ Low: $LOW"
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "::warning::Frontend has $CRITICAL critical and $HIGH high severity vulnerabilities"
          fi

      - name: SonarCloud Frontend Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectBaseDir: frontend
          args: >
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-frontend
            -Dsonar.projectName="CDS Platform - Frontend"
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/node_modules/**,**/build/**,**/coverage/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.qualitygate.wait=true

      - name: Upload frontend reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-reports
          path: |
            frontend/coverage/
            frontend/npm-audit.json
          retention-days: 30

  # ============================================================
  # PHASE 4: Unified Summary Dashboard
  # ============================================================
  unified-summary:
    name: üìä Unified Security Dashboard
    runs-on: ubuntu-latest
    needs: 
      - secrets-scan
      - java-security-sonarcloud
      - frontend-security-sonarcloud
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate unified security report
        run: |
          echo "# üõ°Ô∏è Unified Security & Quality Analysis Report" > UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "**Branch:** \`${{ github.ref_name }}\`" >> UNIFIED_REPORT.md
          echo "**Commit:** \`${{ github.sha }}\`" >> UNIFIED_REPORT.md
          echo "**Scan Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> UNIFIED_REPORT.md
          echo "**Triggered by:** ${{ github.actor }}" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Job status summary
          echo "## üéØ Analysis Status" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "| Phase | Status |" >> UNIFIED_REPORT.md
          echo "|-------|--------|" >> UNIFIED_REPORT.md
          echo "| üîê Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> UNIFIED_REPORT.md
          echo "| ‚òï Backend Security | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> UNIFIED_REPORT.md
          echo "| üé® Frontend Security | ${{ needs.frontend-security-sonarcloud.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # SonarCloud Dashboard Links
          echo "## üåê SonarCloud Dashboard (Single Source of Truth)" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "All SpotBugs findings are imported and visible in SonarCloud:" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üìà Quick Access" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "- üè¢ [**Organization Dashboard**](${{ env.SONAR_HOST_URL }}/organizations/${{ env.SONAR_ORGANIZATION }}/projects)" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üîç Service Dashboards" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "| Service | SonarCloud Dashboard |" >> UNIFIED_REPORT.md
          echo "|---------|---------------------|" >> UNIFIED_REPORT.md
          echo "| **Backend** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-backend](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-backend) |" >> UNIFIED_REPORT.md
          echo "| **Gateway** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-gateway](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-gateway) |" >> UNIFIED_REPORT.md
          echo "| **Risk Engine** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-risk-engine](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-risk-engine) |" >> UNIFIED_REPORT.md
          echo "| **Frontend** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-frontend](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-frontend) |" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # What's included
          echo "## üìã Comprehensive Analysis Includes" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### ‚úÖ Security Scans" >> UNIFIED_REPORT.md
          echo "- **SpotBugs + FindSecBugs** - CRLF injection, SQL injection, crypto issues" >> UNIFIED_REPORT.md
          echo "- **Secrets Detection** - Hardcoded passwords, API keys, credentials" >> UNIFIED_REPORT.md
          echo "- **Grype CVE Scan** - Known vulnerabilities in dependencies" >> UNIFIED_REPORT.md
          echo "- **NPM Audit** - Frontend package vulnerabilities" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üìä Quality Metrics" >> UNIFIED_REPORT.md
          echo "- **Test Coverage** - JaCoCo for Java, Jest for TypeScript" >> UNIFIED_REPORT.md
          echo "- **Code Smells** - Maintainability issues" >> UNIFIED_REPORT.md
          echo "- **Technical Debt** - Estimated remediation effort" >> UNIFIED_REPORT.md
          echo "- **Code Duplications** - DRY violations" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üö® Zero-Tolerance Rules" >> UNIFIED_REPORT.md
          echo "- **CWE-117** - CRLF Injection in Logs" >> UNIFIED_REPORT.md
          echo "- **CWE-330** - Predictable Random Number Generation" >> UNIFIED_REPORT.md
          echo "- **CWE-176** - Improper Unicode/Locale Handling" >> UNIFIED_REPORT.md
          echo "- **CWE-209** - Information Exposure Through Errors" >> UNIFIED_REPORT.md
          echo "- **SQL Injection** - Unparameterized queries" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Navigation guide
          echo "## üß≠ How to Use SonarCloud Dashboard" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "1. **Overview Tab** - High-level metrics (bugs, vulnerabilities, code smells)" >> UNIFIED_REPORT.md
          echo "2. **Issues Tab** - All findings including SpotBugs imports" >> UNIFIED_REPORT.md
          echo "3. **Security Hotspots** - Code requiring security review" >> UNIFIED_REPORT.md
          echo "4. **Measures Tab** - Detailed metrics and historical trends" >> UNIFIED_REPORT.md
          echo "5. **Code Tab** - Browse code with inline issue annotations" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Remediation
          echo "## üîß Remediation Guide" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### Critical Issues (Fix Immediately)" >> UNIFIED_REPORT.md
          echo "1. Review **Security Hotspots** in SonarCloud" >> UNIFIED_REPORT.md
          echo "2. Address all **Blocker** and **Critical** severity issues" >> UNIFIED_REPORT.md
          echo "3. Fix **Zero-Tolerance Violations** (CRLF, Random, Case Conversion)" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### High-Priority Issues" >> UNIFIED_REPORT.md
          echo "1. Update dependencies with **Critical/High CVEs** (Grype + NPM Audit)" >> UNIFIED_REPORT.md
          echo "2. Remove any **hardcoded secrets** detected" >> UNIFIED_REPORT.md
          echo "3. Address **Major** bugs and **High** security vulnerabilities" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### Continuous Improvement" >> UNIFIED_REPORT.md
          echo "1. Maintain **80%+ test coverage**" >> UNIFIED_REPORT.md
          echo "2. Keep **Technical Debt ratio < 5%**" >> UNIFIED_REPORT.md
          echo "3. Reduce **code duplications**" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Footer
          echo "---" >> UNIFIED_REPORT.md
          echo "*This unified report combines SpotBugs, Grype, npm audit, and SonarCloud analysis.*" >> UNIFIED_REPORT.md
          echo "*All findings are centralized in SonarCloud for easy tracking and remediation.*" >> UNIFIED_REPORT.md
          
          cat UNIFIED_REPORT.md

      - name: Add to GitHub Actions Summary
        run: |
          cat UNIFIED_REPORT.md >> $GITHUB_STEP_SUMMARY

      - name: Upload unified report
        uses: actions/upload-artifact@v4
        with:
          name: unified-security-report
          path: UNIFIED_REPORT.md
          retention-days: 90

      - name: Comment on PR with unified dashboard
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const org = '${{ env.SONAR_ORGANIZATION }}';
            const host = '${{ env.SONAR_HOST_URL }}';
            
            const comment = `## üõ°Ô∏è Unified Security & Quality Analysis Complete
            
            ### üéØ Single Dashboard View
            
            All security findings (SpotBugs, secrets, CVEs) are imported into **SonarCloud** for centralized tracking!
            
            | Service | SonarCloud Dashboard | Status |
            |---------|---------------------|--------|
            | **Backend** | [View Dashboard](${host}/dashboard?id=${org}_credit-default-swap-backend) | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            | **Gateway** | [View Dashboard](${host}/dashboard?id=${org}_credit-default-swap-gateway) | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            | **Risk Engine** | [View Dashboard](${host}/dashboard?id=${org}_credit-default-swap-risk-engine) | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            | **Frontend** | [View Dashboard](${host}/dashboard?id=${org}_credit-default-swap-frontend) | ${{ needs.frontend-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            
            ### üìä Comprehensive Analysis Includes
            
            ‚úÖ **SpotBugs + FindSecBugs** - CRLF injection, SQL injection, crypto issues  
            ‚úÖ **Secrets Detection** - Hardcoded passwords, API keys  
            ‚úÖ **Grype CVE Scan** - Known vulnerabilities in dependencies  
            ‚úÖ **Test Coverage** - JaCoCo (Java) + Jest (TypeScript)  
            ‚úÖ **Code Quality** - Bugs, code smells, technical debt  
            ‚úÖ **Zero-Tolerance Rules** - CRLF, Random, Unicode, SQL injection  
            
            ### üîó Quick Links
            
            - üè¢ [**Organization Dashboard**](${host}/organizations/${org}/projects) - See all projects
            - üì• [**Download Reports**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) - Detailed artifacts
            
            ### üí° Next Steps
            
            1. **Review Critical Issues** - Check Security Hotspots in SonarCloud
            2. **Fix Zero-Tolerance Violations** - CRLF, Random, Case Conversion
            3. **Update Dependencies** - Address CVEs from Grype/npm audit
            
            ---
            
            *Single scan, single dashboard, complete visibility!* üöÄ`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Security analysis summary
        run: |
          echo "üìä Security Analysis Complete"
          echo ""
          echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
          echo "Java Backend: ${{ needs.java-security-sonarcloud.result }}"
          echo "Frontend: ${{ needs.frontend-security-sonarcloud.result }}"
          echo ""
          
          if [[ "${{ needs.secrets-scan.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  WARNING: Secrets detected in codebase - review required"
          fi
          
          if [[ "${{ needs.java-security-sonarcloud.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  WARNING: Some services have security violations"
            echo "üìä Check SonarCloud dashboard for detailed findings"
          fi
          
          if [[ "${{ needs.frontend-security-sonarcloud.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  WARNING: Frontend has security issues"
            echo "üìä Check SonarCloud dashboard for detailed findings"
          fi
          
          echo ""
          echo "‚úÖ Analysis complete - All findings reported to SonarCloud"
          echo "üåê View dashboard: https://sonarcloud.io/organizations/ayodeleoladeji/projects"
