name: Unified Security & Quality Analysis

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  SONAR_ORGANIZATION: 'ayodeleoladeji'
  SONAR_HOST_URL: 'https://sonarcloud.io'

jobs:
  # ============================================================
  # PHASE 1: Secrets & Sensitive Data Detection (Critical)
  # ============================================================
  secrets-scan:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan for hardcoded secrets
        run: |
          echo "üîç Scanning for hardcoded secrets and credentials..."
          echo ""
          
          SECRETS_FOUND=0
          
          # Database passwords
          echo "üìã Checking for hardcoded database credentials..."
          if grep -r --include="*.yml" --include="*.yaml" --include="*.properties" \
            -E '^\s*(password|datasource\.password):\s*[^${[:space:]]' backend/ gateway/ risk-engine/ 2>/dev/null; then
            echo "‚ùå CRITICAL: Hardcoded database passwords found!"
            SECRETS_FOUND=1
          fi
          
          # API keys and secrets in Java code
          echo ""
          echo "üîê Checking for API keys and secrets in Java code..."
          if grep -r --include="*.java" -i \
            -E '(secret|password|apikey|api_key|private_key)\s*=\s*"[^"]+"' . 2>/dev/null; then
            echo "‚ùå CRITICAL: Hardcoded secrets in Java code!"
            SECRETS_FOUND=1
          fi
          
          # Connection strings with credentials
          echo ""
          echo "üóÑÔ∏è Checking for hardcoded database connection strings..."
          if grep -r --include="*.java" --include="*.properties" --include="*.yml" \
            -E 'jdbc:postgresql://[^$].*@.*:[0-9]+/' . 2>/dev/null; then
            echo "‚ùå CRITICAL: Hardcoded database credentials in connection strings!"
            SECRETS_FOUND=1
          fi
          
          if [ "$SECRETS_FOUND" = "1" ]; then
            echo ""
            echo "==========================================="
            echo "‚ùå SECURITY ALERT: Secrets detected!"
            echo "==========================================="
            echo ""
            echo "ACTION REQUIRED:"
            echo "1. Move all credentials to environment variables"
            echo '2. Use ${VARIABLE_NAME:default} syntax in YAML files'
            echo "3. Never commit actual passwords to git"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ No hardcoded secrets detected"

  # ============================================================
  # PHASE 2: Java Backend Security Analysis + SonarCloud
  # ============================================================
  java-security-sonarcloud:
    name: ‚òï ${{ matrix.service }} - Security + SonarCloud
    runs-on: ubuntu-latest
    needs: secrets-scan
    strategy:
      fail-fast: false
      matrix:
        service: [backend, gateway, risk-engine]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ matrix.service }}
          restore-keys: ${{ runner.os }}-sonar-

      # ===========================================
      # STEP 1: Build with retry logic
      # ===========================================
      - name: Build ${{ matrix.service }}
        working-directory: ${{ matrix.service }}
        run: |
          echo "üî® Building ${{ matrix.service }}..."
          for i in 1 2 3; do
            echo "Build attempt $i of 3..."
            if ./mvnw clean compile -DskipTests -B; then
              echo "‚úÖ Build succeeded on attempt $i"
              break
            else
              if [ $i -lt 3 ]; then
                echo "‚ö†Ô∏è  Build failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå Build failed after 3 attempts"
                exit 1
              fi
            fi
          done

      # ===========================================
      # STEP 2: Run Tests with JaCoCo Coverage
      # ===========================================
      - name: Run tests with coverage
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üß™ Running tests with coverage..."
          
          # Run tests - fail fast if critical issues
          if ! ./mvnw test jacoco:report -B; then
            echo "‚ö†Ô∏è Tests failed for ${{ matrix.service }}"
            echo "::warning::${{ matrix.service }} has failing tests"
          fi
          
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            INSTRUCTION_COVERED=$(grep -oP 'type="INSTRUCTION".*?covered="\K[0-9]+' target/site/jacoco/jacoco.xml | head -1 || echo "0")
            INSTRUCTION_MISSED=$(grep -oP 'type="INSTRUCTION".*?missed="\K[0-9]+' target/site/jacoco/jacoco.xml | head -1 || echo "0")
            
            if [ "$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))" -gt 0 ]; then
              COVERAGE_PCT=$((INSTRUCTION_COVERED * 100 / (INSTRUCTION_COVERED + INSTRUCTION_MISSED)))
              echo "üìä Test Coverage: ${COVERAGE_PCT}%"
              
              if [ "$COVERAGE_PCT" -lt 80 ]; then
                echo "‚ö†Ô∏è WARNING: Coverage (${COVERAGE_PCT}%) is below 80% threshold"
                echo "::warning::${{ matrix.service }} test coverage is ${COVERAGE_PCT}% (target: 80%)"
              else
                echo "‚úÖ Coverage meets 80% threshold"
              fi
            fi
          else
            echo "‚ö†Ô∏è No coverage report generated - tests may have been skipped"
            echo "::warning::${{ matrix.service }} missing coverage report"
          fi

      # ===========================================
      # STEP 3: SpotBugs Analysis (XML + SARIF)
      # ===========================================
      - name: Run SpotBugs security analysis
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üêõ Running SpotBugs with FindSecBugs plugin..."
          echo "   Generating reports for SonarCloud import..."
          
          # Generate both XML (for parsing) and SARIF (for SonarCloud)
          ./mvnw spotbugs:spotbugs \
            -Dspotbugs.xmlOutput=true \
            -Dspotbugs.sarifOutput=true \
            -B || true
          
          # Verify reports were generated
          if [ -f "target/spotbugsXml.xml" ]; then
            BUG_COUNT=$(grep -o '<BugInstance' target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            echo "üìä SpotBugs found $BUG_COUNT security issues"
            
            HIGH_COUNT=$(grep -oE "rank='[1-9]'" target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            MEDIUM_COUNT=$(grep -oE "rank='1[0-4]'" target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            LOW_COUNT=$(grep -oE "rank='(15|16|17|18|19|20)'" target/spotbugsXml.xml 2>/dev/null | wc -l || echo "0")
            
            echo "   üî¥ Critical (Rank 1-9): $HIGH_COUNT"
            echo "   üü° Medium (Rank 10-14): $MEDIUM_COUNT"
            echo "   üü¢ Low (Rank 15-20): $LOW_COUNT"
            
            if [ "$BUG_COUNT" -gt 0 ]; then
              echo "::warning::${{ matrix.service }} has $BUG_COUNT SpotBugs findings (will be imported to SonarCloud)"
            fi
          else
            echo "‚ö†Ô∏è SpotBugs XML report not generated - check Maven configuration"
          fi
          
          if [ -f "target/spotbugs.sarif" ]; then
            echo "‚úÖ SARIF report generated for SonarCloud import"
          else
            echo "‚ö†Ô∏è SARIF report not generated - SonarCloud import may be limited"
          fi

      # ===========================================
      # STEP 4: Checkstyle Analysis
      # ===========================================
      - name: Run Checkstyle
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üìê Running Checkstyle..."
          ./mvnw checkstyle:check -B || true

      # ===========================================
      # STEP 5: Quality Gate Summary (Informational)
      # ===========================================
      - name: Quality Gate Summary
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üö® Quality Gate Summary for ${{ matrix.service }}"
          echo ""
          echo "This summary shows findings that will be imported to SonarCloud:"
          echo ""
          
          # CRLF Injection
          echo "üîç CRLF Injection (CWE-117)..."
          CRLF_COUNT=$(grep -c 'CRLF_INJECTION_LOGS' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$CRLF_COUNT" -gt 0 ]; then
            echo "   ‚ö†Ô∏è Found: $CRLF_COUNT issue(s)"
          else
            echo "   ‚úÖ None found"
          fi
          
          # Predictable Random
          echo ""
          echo "üîç Predictable Random (CWE-330)..."
          RANDOM_COUNT=$(grep -c 'PREDICTABLE_RANDOM' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$RANDOM_COUNT" -gt 0 ]; then
            echo "   ‚ö†Ô∏è Found: $RANDOM_COUNT issue(s)"
          else
            echo "   ‚úÖ None found"
          fi
          
          # Unicode/Locale
          echo ""
          echo "üîç Improper Locale Handling (CWE-176)..."
          UNICODE_COUNT=$(grep -c 'DM_CONVERT_CASE' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$UNICODE_COUNT" -gt 0 ]; then
            echo "   ‚ö†Ô∏è Found: $UNICODE_COUNT issue(s)"
          else
            echo "   ‚úÖ None found"
          fi
          
          # Information Exposure
          echo ""
          echo "üîç Information Exposure (CWE-209)..."
          INFO_COUNT=$(grep -c 'INFORMATION_EXPOSURE' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$INFO_COUNT" -gt 0 ]; then
            echo "   ‚ö†Ô∏è Found: $INFO_COUNT issue(s)"
          else
            echo "   ‚úÖ None found"
          fi
          
          # SQL Injection
          echo ""
          echo "üîç SQL Injection..."
          SQL_COUNT=$(grep -c 'SQL_INJECTION' target/spotbugsXml.xml 2>/dev/null || echo "0")
          if [ "$SQL_COUNT" -gt 0 ]; then
            echo "   ‚ö†Ô∏è Found: $SQL_COUNT issue(s)"
          else
            echo "   ‚úÖ None found"
          fi
          
          echo ""
          echo "üìä All findings will be imported to SonarCloud for centralized tracking"
          echo "üåê View in SonarCloud after analysis completes"

      # ===========================================
      # STEP 6: SonarCloud Analysis with External Reports
      # ===========================================
      - name: SonarCloud Scan with External Reports
        working-directory: ${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì° Running SonarCloud analysis with external report imports..."
          echo ""
          echo "üîç Configuration:"
          echo "   ‚Ä¢ Java analyzers: ENABLED"
          echo "   ‚Ä¢ SpotBugs import: SARIF format"
          echo "   ‚Ä¢ Checkstyle import: XML format"
          echo "   ‚Ä¢ JaCoCo coverage: XML format"
          echo "   ‚Ä¢ Quality Gate: ENFORCED"
          echo ""
          
          # Build SonarCloud command with external reports
          SONAR_ARGS="-Dsonar.projectKey=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-${{ matrix.service }}"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.projectName=CDS Platform - ${{ matrix.service }}"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.host.url=${{ env.SONAR_HOST_URL }}"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.token=${{ secrets.SONAR_TOKEN }}"
          
          # Source and test paths
          SONAR_ARGS="$SONAR_ARGS -Dsonar.sources=src/main/java"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.tests=src/test/java"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.java.binaries=target/classes"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.java.test.binaries=target/test-classes"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.java.libraries=target/*.jar"
          
          # Coverage report
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            SONAR_ARGS="$SONAR_ARGS -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
            echo "‚úÖ JaCoCo coverage report found"
          fi
          
          # SpotBugs SARIF report (preferred for SonarCloud)
          if [ -f "target/spotbugs.sarif" ]; then
            SONAR_ARGS="$SONAR_ARGS -Dsonar.sarifReportPaths=target/spotbugs.sarif"
            echo "‚úÖ SpotBugs SARIF report found - will be imported"
          elif [ -f "target/spotbugsXml.xml" ]; then
            # Fallback to XML if SARIF not available
            SONAR_ARGS="$SONAR_ARGS -Dsonar.java.spotbugs.reportPaths=target/spotbugsXml.xml"
            echo "‚úÖ SpotBugs XML report found - will be imported"
          else
            echo "‚ö†Ô∏è No SpotBugs report found for import"
          fi
          
          # Checkstyle report
          if [ -f "target/checkstyle-result.xml" ]; then
            SONAR_ARGS="$SONAR_ARGS -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml"
            echo "‚úÖ Checkstyle report found"
          fi
          
          # Quality gate and other settings
          SONAR_ARGS="$SONAR_ARGS -Dsonar.sourceEncoding=UTF-8"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.java.source=21"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.qualitygate.wait=true"
          SONAR_ARGS="$SONAR_ARGS -B"
          
          echo ""
          echo "üöÄ Starting SonarCloud analysis..."
          ./mvnw sonar:sonar $SONAR_ARGS
          
          echo ""
          echo "‚úÖ SonarCloud analysis complete!"
          echo "üåê View results: ${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-${{ matrix.service }}"

      # ===========================================
      # STEP 7: Upload Artifacts
      # ===========================================
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-security-reports
          path: |
            ${{ matrix.service }}/target/spotbugsXml.xml
            ${{ matrix.service }}/target/spotbugs.sarif
            ${{ matrix.service }}/target/site/spotbugs.html
            ${{ matrix.service }}/target/site/jacoco/
            ${{ matrix.service }}/target/checkstyle-result.xml
          retention-days: 30

  # ============================================================
  # PHASE 3: Frontend Security + SonarCloud
  # ============================================================
  frontend-security-sonarcloud:
    name: üé® Frontend - Security + SonarCloud
    runs-on: ubuntu-latest
    needs: secrets-scan
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Security linting
        run: |
          echo "üîí Running security-focused linting..."
          
          echo "Checking for XSS vulnerabilities..."
          grep -r "dangerouslySetInnerHTML\|innerHTML" src/ || echo "‚úÖ No dangerous HTML injection found"
          
          echo ""
          echo "Checking for hardcoded endpoints..."
          grep -r "http://\|https://" src/ | grep -v "localhost" || echo "‚úÖ No hardcoded endpoints found"

      - name: Run tests with coverage
        continue-on-error: true
        run: |
          echo "üß™ Running tests with coverage..."
          npm run test -- --coverage --watchAll=false --passWithNoTests || true
          
          # Verify coverage was generated
          if [ -f "coverage/lcov.info" ]; then
            echo "‚úÖ Coverage report generated"
            
            # Calculate coverage percentage if lcov-summary exists
            if [ -f "coverage/lcov-report/index.html" ]; then
              echo "üìä Coverage report available in coverage/lcov-report/"
            fi
          else
            echo "‚ö†Ô∏è No coverage report generated"
            echo "::warning::Frontend coverage report missing"
          fi

      - name: npm audit (reported to SonarCloud)
        run: |
          echo "üì¶ Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
          CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit.json 2>/dev/null || echo "0")
          HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit.json 2>/dev/null || echo "0")
          MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit.json 2>/dev/null || echo "0")
          LOW=$(jq -r '.metadata.vulnerabilities.low // 0' npm-audit.json 2>/dev/null || echo "0")
          
          echo "üìä NPM Audit Results:"
          echo "   üî¥ Critical: $CRITICAL"
          echo "   üü† High: $HIGH"
          echo "   üü° Moderate: $MODERATE"
          echo "   üü¢ Low: $LOW"
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "::warning::Frontend has $CRITICAL critical and $HIGH high severity vulnerabilities"
            echo "‚ö†Ô∏è These vulnerabilities will be tracked in SonarCloud"
          fi

      - name: SonarCloud Frontend Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectBaseDir: frontend
          args: >
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-frontend
            -Dsonar.projectName="CDS Platform - Frontend"
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/node_modules/**,**/build/**,**/coverage/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.qualitygate.wait=true

      - name: Upload frontend reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-reports
          path: |
            frontend/coverage/
            frontend/npm-audit.json
          retention-days: 30

  # ============================================================
  # PHASE 4: Unified Summary Dashboard
  # ============================================================
  unified-summary:
    name: üìä Unified Security Dashboard
    runs-on: ubuntu-latest
    needs: 
      - secrets-scan
      - java-security-sonarcloud
      - frontend-security-sonarcloud
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate unified security report
        run: |
          echo "# üõ°Ô∏è Unified Security & Quality Analysis Report" > UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "**Branch:** \`${{ github.ref_name }}\`" >> UNIFIED_REPORT.md
          echo "**Commit:** \`${{ github.sha }}\`" >> UNIFIED_REPORT.md
          echo "**Scan Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> UNIFIED_REPORT.md
          echo "**Triggered by:** ${{ github.actor }}" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Job status
          echo "## üéØ Analysis Status" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "| Phase | Status |" >> UNIFIED_REPORT.md
          echo "|-------|--------|" >> UNIFIED_REPORT.md
          echo "| üîê Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> UNIFIED_REPORT.md
          echo "| ‚òï Backend Security | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> UNIFIED_REPORT.md
          echo "| üé® Frontend Security | ${{ needs.frontend-security-sonarcloud.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # SonarCloud links
          echo "## üåê SonarCloud Dashboard (Single Source of Truth)" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "**All findings (SpotBugs, Checkstyle, Coverage, npm audit) are centralized in SonarCloud**" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üìà Quick Access" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "- üè¢ [**Organization Dashboard**](${{ env.SONAR_HOST_URL }}/organizations/${{ env.SONAR_ORGANIZATION }}/projects)" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üîç Service Dashboards" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "| Service | SonarCloud Dashboard |" >> UNIFIED_REPORT.md
          echo "|---------|---------------------|" >> UNIFIED_REPORT.md
          echo "| **Backend** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-backend](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-backend) |" >> UNIFIED_REPORT.md
          echo "| **Gateway** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-gateway](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-gateway) |" >> UNIFIED_REPORT.md
          echo "| **Risk Engine** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-risk-engine](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-risk-engine) |" >> UNIFIED_REPORT.md
          echo "| **Frontend** | [${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-frontend](${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_ORGANIZATION }}_credit-default-swap-frontend) |" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # What's imported
          echo "## üìã Reports Imported to SonarCloud" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### ‚úÖ Security Analysis" >> UNIFIED_REPORT.md
          echo "- **SpotBugs + FindSecBugs** - SARIF/XML format (CRLF, SQL injection, crypto)" >> UNIFIED_REPORT.md
          echo "- **Secrets Detection** - Pre-flight scan (blocks pipeline if found)" >> UNIFIED_REPORT.md
          echo "- **npm Audit** - Frontend dependency vulnerabilities" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üìä Quality Metrics" >> UNIFIED_REPORT.md
          echo "- **Test Coverage** - JaCoCo (Java) + Jest (TypeScript)" >> UNIFIED_REPORT.md
          echo "- **Checkstyle** - Code style violations" >> UNIFIED_REPORT.md
          echo "- **Code Smells** - SonarCloud native analysis" >> UNIFIED_REPORT.md
          echo "- **Duplications** - Copy-paste detection" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üö® Critical Security Rules" >> UNIFIED_REPORT.md
          echo "- **CWE-117** - CRLF Injection in Logs" >> UNIFIED_REPORT.md
          echo "- **CWE-330** - Predictable Random Number Generation" >> UNIFIED_REPORT.md
          echo "- **CWE-176** - Improper Unicode/Locale Handling" >> UNIFIED_REPORT.md
          echo "- **CWE-209** - Information Exposure Through Errors" >> UNIFIED_REPORT.md
          echo "- **SQL Injection** - Unparameterized queries" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Usage guide
          echo "## üß≠ Viewing Findings in SonarCloud" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "1. **Overview Tab** - Overall quality metrics and security rating" >> UNIFIED_REPORT.md
          echo "2. **Issues Tab** - All imported findings including SpotBugs" >> UNIFIED_REPORT.md
          echo "   - Filter by Type: Bug, Vulnerability, Code Smell, Security Hotspot" >> UNIFIED_REPORT.md
          echo "   - Filter by Severity: Blocker, Critical, Major, Minor, Info" >> UNIFIED_REPORT.md
          echo "   - Filter by Source: SpotBugs, SonarJava, etc." >> UNIFIED_REPORT.md
          echo "3. **Security Hotspots** - Code requiring manual security review" >> UNIFIED_REPORT.md
          echo "4. **Measures Tab** - Detailed metrics and trends over time" >> UNIFIED_REPORT.md
          echo "5. **Code Tab** - Browse source with inline annotations" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Troubleshooting
          echo "## üîß Troubleshooting: Why Aren't Findings Showing?" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "If SpotBugs findings don't appear in SonarCloud:" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "1. **Check Maven Configuration**" >> UNIFIED_REPORT.md
          echo "   - Ensure \`spotbugs-maven-plugin\` is configured in \`pom.xml\`" >> UNIFIED_REPORT.md
          echo "   - Verify \`com.h3xstream.findsecbugs:findsecbugs-plugin\` is included" >> UNIFIED_REPORT.md
          echo "   - Confirm SARIF output is enabled: \`<formats><format>sarif</format></formats>\`" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "2. **Verify Report Generation**" >> UNIFIED_REPORT.md
          echo "   - Check workflow logs for: \"SpotBugs SARIF report found\"" >> UNIFIED_REPORT.md
          echo "   - Download artifacts to verify \`spotbugs.sarif\` exists" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "3. **Check SonarCloud Import**" >> UNIFIED_REPORT.md
          echo "   - Look for: \`-Dsonar.sarifReportPaths=target/spotbugs.sarif\` in logs" >> UNIFIED_REPORT.md
          echo "   - Verify no errors during SonarCloud analysis step" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "4. **Quality Gate Configuration**" >> UNIFIED_REPORT.md
          echo "   - Go to Project Settings > Quality Gate in SonarCloud" >> UNIFIED_REPORT.md
          echo "   - Ensure rules for SpotBugs findings are enabled" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Remediation
          echo "## üîß Remediation Priorities" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üî¥ Critical (Fix Immediately)" >> UNIFIED_REPORT.md
          echo "1. All **Blocker** severity issues in SonarCloud" >> UNIFIED_REPORT.md
          echo "2. **Security Hotspots** requiring review" >> UNIFIED_REPORT.md
          echo "3. Hardcoded secrets (if secrets-scan fails)" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üü† High Priority" >> UNIFIED_REPORT.md
          echo "1. **Critical** severity vulnerabilities and bugs" >> UNIFIED_REPORT.md
          echo "2. Zero-tolerance violations (CRLF, Random, Locale, SQL injection)" >> UNIFIED_REPORT.md
          echo "3. npm audit Critical/High vulnerabilities" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          echo "### üü° Medium Priority" >> UNIFIED_REPORT.md
          echo "1. **Major** severity issues" >> UNIFIED_REPORT.md
          echo "2. Test coverage below 80%" >> UNIFIED_REPORT.md
          echo "3. High technical debt ratio (>5%)" >> UNIFIED_REPORT.md
          echo "" >> UNIFIED_REPORT.md
          
          # Footer
          echo "---" >> UNIFIED_REPORT.md
          echo "*Single scan, single dashboard, complete visibility - powered by SonarCloud* üöÄ" >> UNIFIED_REPORT.md
          
          cat UNIFIED_REPORT.md

      - name: Add to GitHub Actions Summary
        run: |
          cat UNIFIED_REPORT.md >> $GITHUB_STEP_SUMMARY

      - name: Upload unified report
        uses: actions/upload-artifact@v4
        with:
          name: unified-security-report
          path: UNIFIED_REPORT.md
          retention-days: 90

      - name: Comment on PR with unified dashboard
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const org = '${{ env.SONAR_ORGANIZATION }}';
            const host = '${{ env.SONAR_HOST_URL }}';
            
            const comment = `## üõ°Ô∏è Unified Security & Quality Analysis Complete
            
            ### üéØ Single Source of Truth: SonarCloud
            
            All security findings are **centrally tracked in SonarCloud**!
            
            | Service | Dashboard | Status |
            |---------|-----------|--------|
            | **Backend** | [View ‚Üí](${host}/dashboard?id=${org}_credit-default-swap-backend) | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            | **Gateway** | [View ‚Üí](${host}/dashboard?id=${org}_credit-default-swap-gateway) | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            | **Risk Engine** | [View ‚Üí](${host}/dashboard?id=${org}_credit-default-swap-risk-engine) | ${{ needs.java-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            | **Frontend** | [View ‚Üí](${host}/dashboard?id=${org}_credit-default-swap-frontend) | ${{ needs.frontend-security-sonarcloud.result == 'success' && '‚úÖ' || '‚ùå' }} |
            
            ### üìã Imported Reports
            
            ‚úÖ **SpotBugs + FindSecBugs** - SARIF format  
            ‚úÖ **Checkstyle** - Code style violations  
            ‚úÖ **JaCoCo** - Test coverage metrics  
            ‚úÖ **npm audit** - Dependency vulnerabilities  
            ‚úÖ **Native SonarCloud** - Code smells, duplications, security hotspots  
            
            ### üîç Finding Security Issues in SonarCloud
            
            1. Open any service dashboard above
            2. Click **"Issues"** tab
            3. Filter by:
               - **Type:** Vulnerability, Security Hotspot, Bug
               - **Severity:** Blocker, Critical, Major
               - **Source:** SpotBugs, SonarJava
            
            ### üö® If SpotBugs Findings Don't Appear
            
            Check your \`pom.xml\` has:
            \`\`\`xml
            <plugin>
              <groupId>com.github.spotbugs</groupId>
              <artifactId>spotbugs-maven-plugin</artifactId>
              <configuration>
                <plugins>
                  <plugin>
                    <groupId>com.h3xstream.findsecbugs</groupId>
                    <artifactId>findsecbugs-plugin</artifactId>
                  </plugin>
                </plugins>
                <formats>
                  <format>xml</format>
                  <format>sarif</format>
                </formats>
              </configuration>
            </plugin>
            \`\`\`
            
            ### üí° Next Steps
            
            1. **Review Critical Issues** - Filter by Blocker/Critical severity
            2. **Address Security Hotspots** - Require manual review
            3. **Fix Zero-Tolerance Rules** - CRLF, Random, Locale, SQL injection
            4. **Improve Coverage** - Target 80%+ for all services
            
            ---
            
            üì• [Download detailed reports](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Final summary
        run: |
          echo "======================================"
          echo "üìä Unified Security Analysis Complete"
          echo "======================================"
          echo ""
          echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
          echo "Java Backend: ${{ needs.java-security-sonarcloud.result }}"
          echo "Frontend: ${{ needs.frontend-security-sonarcloud.result }}"
          echo ""
          
          if [[ "${{ needs.secrets-scan.result }}" == "failure" ]]; then
            echo "‚ùå CRITICAL: Hardcoded secrets detected - immediate action required"
          fi
          
          if [[ "${{ needs.java-security-sonarcloud.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Quality gate violations detected in backend services"
            echo "üìä Review SonarCloud for details"
          fi
          
          if [[ "${{ needs.frontend-security-sonarcloud.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Quality gate violations detected in frontend"
            echo "üìä Review SonarCloud for details"
          fi
          
          echo ""
          echo "‚úÖ All findings reported to SonarCloud"
          echo "üåê Dashboard: https://sonarcloud.io/organizations/ayodeleoladeji/projects"