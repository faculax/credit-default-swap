[{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketCreationModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":150,"column":9,"nodeType":"MemberExpression","endLine":150,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":160,"column":5,"nodeType":"MemberExpression","endLine":160,"endColumn":19},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":160,"column":27,"nodeType":"MemberExpression","endLine":160,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":164,"column":9,"nodeType":"MemberExpression","endLine":164,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":196,"column":19,"nodeType":"MemberExpression","endLine":196,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":473,"column":42,"nodeType":"MemberExpression","endLine":473,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Basket, BasketType, BasketConstituent } from '../../types/basket';\r\nimport { basketService } from '../../services/basketService';\r\nimport { REFERENCE_ENTITIES } from '../../data/referenceData';\r\n\r\ninterface BasketCreationModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSuccess: (basket: Basket) => void;\r\n}\r\n\r\ninterface FormErrors {\r\n  [key: string]: string;\r\n}\r\n\r\nconst BASKET_TYPE_OPTIONS = [\r\n  { value: 'FIRST_TO_DEFAULT', label: 'First-to-Default (FTD)' },\r\n  { value: 'NTH_TO_DEFAULT', label: 'N-th-to-Default' },\r\n  { value: 'TRANCHETTE', label: 'Tranchette (Loss Slice)' },\r\n];\r\n\r\nconst PREMIUM_FREQUENCY_OPTIONS = [\r\n  { value: 'QUARTERLY', label: 'Quarterly' },\r\n  { value: 'SEMI_ANNUAL', label: 'Semi-Annual' },\r\n  { value: 'ANNUAL', label: 'Annual' },\r\n];\r\n\r\nconst DAY_COUNT_OPTIONS = [\r\n  { value: 'ACT_360', label: 'ACT/360' },\r\n  { value: 'ACT_365', label: 'ACT/365' },\r\n  { value: 'THIRTY_360', label: '30/360' },\r\n];\r\n\r\nconst CURRENCY_OPTIONS = ['USD', 'EUR', 'GBP', 'JPY'];\r\n\r\nconst SENIORITY_OPTIONS = [\r\n  { value: 'SR_UNSEC', label: 'Senior Unsecured' },\r\n  { value: 'SR_SEC', label: 'Senior Secured' },\r\n  { value: 'SUBORD', label: 'Subordinated' },\r\n];\r\n\r\nconst BasketCreationModal: React.FC<BasketCreationModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSuccess,\r\n}) => {\r\n  const [formData, setFormData] = useState<Partial<Basket>>({\r\n    type: 'FIRST_TO_DEFAULT',\r\n    currency: 'USD',\r\n    premiumFrequency: 'QUARTERLY',\r\n    dayCount: 'ACT_360',\r\n    constituents: [],\r\n  });\r\n\r\n  const [constituents, setConstituents] = useState<Partial<BasketConstituent>[]>([]);\r\n  const [errors, setErrors] = useState<FormErrors>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Calculate normalized weights dynamically\r\n  const calculateNormalizedWeights = () => {\r\n    const totalWeight = constituents.reduce((sum, c) => sum + (c.weight || 0), 0);\r\n\r\n    if (totalWeight === 0) {\r\n      // Equal weights if none provided\r\n      return constituents.map(() => 1 / constituents.length);\r\n    }\r\n\r\n    // Normalize to sum to 1\r\n    return constituents.map((c) => (c.weight || 0) / totalWeight);\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: FormErrors = {};\r\n\r\n    if (!formData.name?.trim()) {\r\n      newErrors.name = 'Basket name is required';\r\n    }\r\n\r\n    if (!formData.type) {\r\n      newErrors.type = 'Basket type is required';\r\n    }\r\n\r\n    if (formData.type === 'NTH_TO_DEFAULT' && (!formData.nth || formData.nth < 1)) {\r\n      newErrors.nth = 'N-th value must be >= 1';\r\n    }\r\n\r\n    if (formData.type === 'NTH_TO_DEFAULT' && formData.nth && formData.nth > constituents.length) {\r\n      newErrors.nth = `N-th value cannot exceed number of constituents (${constituents.length})`;\r\n    }\r\n\r\n    if (formData.type === 'TRANCHETTE') {\r\n      if (\r\n        formData.attachmentPoint === undefined ||\r\n        formData.attachmentPoint < 0 ||\r\n        formData.attachmentPoint > 1\r\n      ) {\r\n        newErrors.attachmentPoint = 'Attachment point must be between 0 and 1';\r\n      }\r\n      if (\r\n        formData.detachmentPoint === undefined ||\r\n        formData.detachmentPoint < 0 ||\r\n        formData.detachmentPoint > 1\r\n      ) {\r\n        newErrors.detachmentPoint = 'Detachment point must be between 0 and 1';\r\n      }\r\n      if (\r\n        formData.attachmentPoint !== undefined &&\r\n        formData.detachmentPoint !== undefined &&\r\n        formData.attachmentPoint >= formData.detachmentPoint\r\n      ) {\r\n        newErrors.detachmentPoint = 'Detachment point must be greater than attachment point';\r\n      }\r\n    }\r\n\r\n    if (!formData.notional || formData.notional <= 0) {\r\n      newErrors.notional = 'Notional must be positive';\r\n    }\r\n\r\n    if (!formData.maturityDate) {\r\n      newErrors.maturityDate = 'Maturity date is required';\r\n    }\r\n\r\n    if (constituents.length === 0) {\r\n      newErrors.constituents = 'At least one constituent is required';\r\n    }\r\n\r\n    // Check for duplicate issuers\r\n    const issuerSet = new Set<string>();\r\n    constituents.forEach((c, idx) => {\r\n      if (c.issuer) {\r\n        if (issuerSet.has(c.issuer)) {\r\n          newErrors[`constituent_${idx}_issuer`] = 'Duplicate issuer';\r\n        }\r\n        issuerSet.add(c.issuer);\r\n      } else {\r\n        newErrors[`constituent_${idx}_issuer`] = 'Issuer is required';\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleInputChange = (field: keyof Basket, value: any) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleConstituentChange = (index: number, field: keyof BasketConstituent, value: string | number) => {\r\n    const updated = [...constituents];\r\n    updated[index] = { ...updated[index], [field]: value };\r\n    setConstituents(updated);\r\n\r\n    const errorKey = `constituent_${index}_${field}`;\r\n    if (errors[errorKey]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [errorKey]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const addConstituent = () => {\r\n    setConstituents([...constituents, { seniority: 'SR_UNSEC' }]);\r\n  };\r\n\r\n  const removeConstituent = (index: number) => {\r\n    setConstituents(constituents.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const normalizedWeights = calculateNormalizedWeights();\r\n\r\n      const basketRequest = {\r\n        ...formData,\r\n        constituents: constituents.map((c, idx) => ({\r\n          issuer: c.issuer!,\r\n          weight: normalizedWeights[idx],\r\n          recoveryOverride: c.recoveryOverride,\r\n          seniority: c.seniority || 'SR_UNSEC',\r\n          sector: c.sector,\r\n        })),\r\n      };\r\n\r\n      const basket = await basketService.createBasket(basketRequest as any);\r\n      onSuccess(basket);\r\n      resetForm();\r\n      onClose();\r\n    } catch (error: any) {\r\n      setErrors({ submit: error.message || 'Failed to create basket' });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      type: 'FIRST_TO_DEFAULT',\r\n      currency: 'USD',\r\n      premiumFrequency: 'QUARTERLY',\r\n      dayCount: 'ACT_360',\r\n      constituents: [],\r\n    });\r\n    setConstituents([]);\r\n    setErrors({});\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const normalizedWeights = calculateNormalizedWeights();\r\n\r\n  return (\r\n    <div\r\n      className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\"\r\n      onClick={onClose}\r\n    >\r\n      <div\r\n        className=\"bg-fd-darker rounded-lg shadow-xl border border-fd-border max-w-6xl w-full max-h-[90vh] overflow-y-auto m-4\"\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"sticky top-0 bg-fd-darker border-b border-fd-border px-6 py-4 flex justify-between items-center z-10\">\r\n          <h2 className=\"text-xl font-semibold text-fd-text\">Create New Basket Derivative</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\r\n            aria-label=\"Close modal\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Form */}\r\n        <form onSubmit={handleSubmit} className=\"p-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* Basic Information Section */}\r\n            <div className=\"md:col-span-2\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Basic Information\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Basket Name <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.name || ''}\r\n                onChange={(e) => handleInputChange('name', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.name ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                placeholder=\"e.g., US_IG_TECH_FTD_5Y\"\r\n              />\r\n              {errors.name && <p className=\"mt-1 text-sm text-red-400\">{errors.name}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Basket Type <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.type}\r\n                onChange={(e) => handleInputChange('type', e.target.value as BasketType)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {BASKET_TYPE_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.type && <p className=\"mt-1 text-sm text-red-400\">{errors.type}</p>}\r\n            </div>\r\n\r\n            {/* Conditional Fields for N-th-to-Default */}\r\n            {formData.type === 'NTH_TO_DEFAULT' && (\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                  N-th Value <span className=\"text-red-500\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={formData.nth || ''}\r\n                  onChange={(e) => handleInputChange('nth', parseInt(e.target.value))}\r\n                  className={`w-full px-3 py-2 bg-fd-dark border ${errors.nth ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                  placeholder=\"e.g., 2 for 2nd-to-default\"\r\n                />\r\n                {errors.nth && <p className=\"mt-1 text-sm text-red-400\">{errors.nth}</p>}\r\n              </div>\r\n            )}\r\n\r\n            {/* Conditional Fields for Tranchette */}\r\n            {formData.type === 'TRANCHETTE' && (\r\n              <>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                    Attachment Point (0-1) <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    value={formData.attachmentPoint || ''}\r\n                    onChange={(e) =>\r\n                      handleInputChange('attachmentPoint', parseFloat(e.target.value))\r\n                    }\r\n                    className={`w-full px-3 py-2 bg-fd-dark border ${errors.attachmentPoint ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                    placeholder=\"e.g., 0.03 for 3%\"\r\n                  />\r\n                  {errors.attachmentPoint && (\r\n                    <p className=\"mt-1 text-sm text-red-400\">{errors.attachmentPoint}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                    Detachment Point (0-1) <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    value={formData.detachmentPoint || ''}\r\n                    onChange={(e) =>\r\n                      handleInputChange('detachmentPoint', parseFloat(e.target.value))\r\n                    }\r\n                    className={`w-full px-3 py-2 bg-fd-dark border ${errors.detachmentPoint ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                    placeholder=\"e.g., 0.07 for 7%\"\r\n                  />\r\n                  {errors.detachmentPoint && (\r\n                    <p className=\"mt-1 text-sm text-red-400\">{errors.detachmentPoint}</p>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {/* Economics Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Economics\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Currency <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.currency}\r\n                onChange={(e) => handleInputChange('currency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {CURRENCY_OPTIONS.map((curr) => (\r\n                  <option key={curr} value={curr}>\r\n                    {curr}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Notional <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.notional || ''}\r\n                onChange={(e) => handleInputChange('notional', parseFloat(e.target.value))}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.notional ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                placeholder=\"e.g., 10000000\"\r\n              />\r\n              {errors.notional && <p className=\"mt-1 text-sm text-red-400\">{errors.notional}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Premium Frequency\r\n              </label>\r\n              <select\r\n                value={formData.premiumFrequency}\r\n                onChange={(e) => handleInputChange('premiumFrequency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {PREMIUM_FREQUENCY_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Day Count Convention\r\n              </label>\r\n              <select\r\n                value={formData.dayCount}\r\n                onChange={(e) => handleInputChange('dayCount', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {DAY_COUNT_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Maturity Date <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formData.maturityDate || ''}\r\n                onChange={(e) => handleInputChange('maturityDate', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.maturityDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              />\r\n              {errors.maturityDate && (\r\n                <p className=\"mt-1 text-sm text-red-400\">{errors.maturityDate}</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Constituents Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <div className=\"flex justify-between items-center mb-4\">\r\n                <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide\">\r\n                  Basket Constituents <span className=\"text-red-500\">*</span>\r\n                </h3>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={addConstituent}\r\n                  className=\"px-3 py-1 text-sm bg-fd-green text-fd-dark rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green\"\r\n                >\r\n                  + Add Constituent\r\n                </button>\r\n              </div>\r\n\r\n              {errors.constituents && (\r\n                <p className=\"mb-2 text-sm text-red-400\">{errors.constituents}</p>\r\n              )}\r\n\r\n              {constituents.map((constituent, index) => {\r\n                const normalizedWeight = normalizedWeights[index];\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    className=\"mb-4 p-4 bg-fd-dark border border-fd-border rounded-md\"\r\n                  >\r\n                    <div className=\"flex justify-between items-center mb-3\">\r\n                      <h4 className=\"text-sm font-medium text-fd-text\">Constituent #{index + 1}</h4>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => removeConstituent(index)}\r\n                        className=\"text-red-400 hover:text-red-300 text-sm\"\r\n                      >\r\n                        Remove\r\n                      </button>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Issuer <span className=\"text-red-500\">*</span>\r\n                        </label>\r\n                        <select\r\n                          value={constituent.issuer || ''}\r\n                          onChange={(e) => handleConstituentChange(index, 'issuer', e.target.value)}\r\n                          className={`w-full px-2 py-1 text-sm bg-fd-darker border ${errors[`constituent_${index}_issuer`] ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green`}\r\n                        >\r\n                          <option value=\"\">Select Issuer</option>\r\n                          {REFERENCE_ENTITIES.map((entity) => (\r\n                            <option key={entity.code} value={entity.code}>\r\n                              {entity.code} - {entity.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {errors[`constituent_${index}_issuer`] && (\r\n                          <p className=\"mt-1 text-xs text-red-400\">\r\n                            {errors[`constituent_${index}_issuer`]}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Weight (optional, normalized)\r\n                        </label>\r\n                        <input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          value={constituent.weight || ''}\r\n                          onChange={(e) =>\r\n                            handleConstituentChange(\r\n                              index,\r\n                              'weight',\r\n                              parseFloat(e.target.value) || 0\r\n                            )\r\n                          }\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                          placeholder={`Auto: ${normalizedWeight.toFixed(4)}`}\r\n                        />\r\n                        {normalizedWeight !== undefined && (\r\n                          <p className=\"mt-1 text-xs text-fd-text-muted\">\r\n                            Normalized: {(normalizedWeight * 100).toFixed(2)}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Seniority\r\n                        </label>\r\n                        <select\r\n                          value={constituent.seniority || 'SR_UNSEC'}\r\n                          onChange={(e) =>\r\n                            handleConstituentChange(index, 'seniority', e.target.value)\r\n                          }\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                        >\r\n                          {SENIORITY_OPTIONS.map((opt) => (\r\n                            <option key={opt.value} value={opt.value}>\r\n                              {opt.label}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Recovery Override (0-1)\r\n                        </label>\r\n                        <input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          max=\"1\"\r\n                          value={constituent.recoveryOverride || ''}\r\n                          onChange={(e) =>\r\n                            handleConstituentChange(\r\n                              index,\r\n                              'recoveryOverride',\r\n                              parseFloat(e.target.value)\r\n                            )\r\n                          }\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                          placeholder=\"Optional\"\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"md:col-span-2\">\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Sector (optional)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={constituent.sector || ''}\r\n                          onChange={(e) => handleConstituentChange(index, 'sector', e.target.value)}\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                          placeholder=\"e.g., TECH, ENERGY\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Message */}\r\n          {errors.submit && (\r\n            <div className=\"mt-4 p-3 bg-red-900/20 border border-red-500/30 rounded-md\">\r\n              <p className=\"text-sm text-red-400\">{errors.submit}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"mt-6 flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-darker focus:outline-none focus:ring-2 focus:ring-fd-green\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:bg-fd-green/50 disabled:cursor-not-allowed\"\r\n            >\r\n              {isSubmitting ? 'Creating...' : 'Create Basket'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BasketCreationModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketDetailView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondCreationModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":112,"column":9,"nodeType":"MemberExpression","endLine":112,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Bond, bondService } from '../../services/bondService';\r\nimport { REFERENCE_ENTITIES, SECTORS } from '../../data/referenceData';\r\n\r\ninterface BondCreationModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSuccess: (bond: Bond) => void;\r\n}\r\n\r\ninterface FormErrors {\r\n  [key: string]: string;\r\n}\r\n\r\nconst SENIORITY_OPTIONS = [\r\n  { value: 'SR_UNSEC', label: 'Senior Unsecured' },\r\n  { value: 'SR_SEC', label: 'Senior Secured' },\r\n  { value: 'SUBORD', label: 'Subordinated' },\r\n];\r\n\r\nconst COUPON_FREQUENCY_OPTIONS = [\r\n  { value: 'ANNUAL', label: 'Annual' },\r\n  { value: 'SEMI_ANNUAL', label: 'Semi-Annual' },\r\n  { value: 'QUARTERLY', label: 'Quarterly' },\r\n];\r\n\r\nconst DAY_COUNT_OPTIONS = [\r\n  { value: 'ACT_ACT', label: 'ACT/ACT' },\r\n  { value: 'THIRTY_360', label: '30/360' },\r\n];\r\n\r\nconst CURRENCY_OPTIONS = ['USD', 'EUR', 'GBP', 'JPY'];\r\n\r\nconst BondCreationModal: React.FC<BondCreationModalProps> = ({ isOpen, onClose, onSuccess }) => {\r\n  const [formData, setFormData] = useState<Partial<Bond>>({\r\n    currency: 'USD',\r\n    couponFrequency: 'SEMI_ANNUAL',\r\n    dayCount: 'ACT_ACT',\r\n    seniority: 'SR_UNSEC',\r\n    settlementDays: 2,\r\n    faceValue: 100,\r\n    priceConvention: 'CLEAN',\r\n  });\r\n\r\n  const [errors, setErrors] = useState<FormErrors>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [userModifiedSector, setUserModifiedSector] = useState(false);\r\n\r\n  // Auto-populate sector when issuer changes\r\n  useEffect(() => {\r\n    if (!userModifiedSector && formData.issuer) {\r\n      const entity = REFERENCE_ENTITIES.find((e) => e.code === formData.issuer);\r\n      if (entity?.sector) {\r\n        setFormData((prev) => ({\r\n          ...prev,\r\n          sector: entity.sector,\r\n        }));\r\n      }\r\n    }\r\n  }, [formData.issuer, userModifiedSector]);\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: FormErrors = {};\r\n\r\n    if (!formData.issuer?.trim()) {\r\n      newErrors.issuer = 'Issuer is required';\r\n    }\r\n\r\n    if (!formData.notional || formData.notional <= 0) {\r\n      newErrors.notional = 'Notional must be positive';\r\n    }\r\n\r\n    if (!formData.couponRate || formData.couponRate < 0) {\r\n      newErrors.couponRate = 'Coupon rate must be >= 0';\r\n    }\r\n\r\n    if (formData.couponRate && formData.couponRate > 1) {\r\n      newErrors.couponRate = 'Coupon rate exceeds 100% - please verify';\r\n    }\r\n\r\n    if (!formData.issueDate) {\r\n      newErrors.issueDate = 'Issue date is required';\r\n    }\r\n\r\n    if (!formData.maturityDate) {\r\n      newErrors.maturityDate = 'Maturity date is required';\r\n    }\r\n\r\n    if (\r\n      formData.issueDate &&\r\n      formData.maturityDate &&\r\n      new Date(formData.issueDate) >= new Date(formData.maturityDate)\r\n    ) {\r\n      newErrors.maturityDate = 'Maturity date must be after issue date';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleInputChange = (field: keyof Bond, value: any) => {\r\n    // Track if user manually edits the sector\r\n    if (field === 'sector') {\r\n      setUserModifiedSector(true);\r\n    }\r\n\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const bond = await bondService.createBond(formData as Bond);\r\n      onSuccess(bond);\r\n      resetForm();\r\n      onClose();\r\n    } catch (error: any) {\r\n      setErrors({ submit: error.message || 'Failed to create bond' });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      currency: 'USD',\r\n      couponFrequency: 'SEMI_ANNUAL',\r\n      dayCount: 'ACT_ACT',\r\n      seniority: 'SR_UNSEC',\r\n      settlementDays: 2,\r\n      faceValue: 100,\r\n      priceConvention: 'CLEAN',\r\n    });\r\n    setErrors({});\r\n    setUserModifiedSector(false);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div\r\n      className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\"\r\n      onClick={onClose}\r\n    >\r\n      <div\r\n        className=\"bg-fd-darker rounded-lg shadow-xl border border-fd-border max-w-4xl w-full max-h-[90vh] overflow-y-auto m-4\"\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"sticky top-0 bg-fd-darker border-b border-fd-border px-6 py-4 flex justify-between items-center z-10\">\r\n          <h2 className=\"text-xl font-semibold text-fd-text\">Create New Bond</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\r\n            aria-label=\"Close modal\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Form */}\r\n        <form onSubmit={handleSubmit} className=\"p-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* Issuer & Credit Info Section */}\r\n            <div className=\"md:col-span-2\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Issuer & Credit Information\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Issuer <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.issuer || ''}\r\n                onChange={(e) => handleInputChange('issuer', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.issuer ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              >\r\n                <option value=\"\">Select Issuer</option>\r\n                {REFERENCE_ENTITIES.map((entity) => (\r\n                  <option key={entity.code} value={entity.code}>\r\n                    {entity.code} - {entity.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.issuer && <p className=\"mt-1 text-sm text-red-400\">{errors.issuer}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Seniority <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.seniority}\r\n                onChange={(e) => handleInputChange('seniority', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {SENIORITY_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Sector</label>\r\n              <select\r\n                value={formData.sector || ''}\r\n                onChange={(e) => handleInputChange('sector', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                <option value=\"\">Auto-suggested from issuer</option>\r\n                {SECTORS.map((sector) => (\r\n                  <option key={sector.code} value={sector.code}>\r\n                    {sector.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">ISIN</label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.isin || ''}\r\n                onChange={(e) => handleInputChange('isin', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\r\n                placeholder=\"Optional\"\r\n                maxLength={12}\r\n              />\r\n            </div>\r\n\r\n            {/* Economics Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Bond Economics\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Currency <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.currency}\r\n                onChange={(e) => handleInputChange('currency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {CURRENCY_OPTIONS.map((curr) => (\r\n                  <option key={curr} value={curr}>\r\n                    {curr}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Notional <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.notional || ''}\r\n                onChange={(e) => handleInputChange('notional', parseFloat(e.target.value))}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.notional ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted`}\r\n              />\r\n              {errors.notional && <p className=\"mt-1 text-sm text-red-400\">{errors.notional}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Coupon Rate (decimal) <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.000001\"\r\n                value={formData.couponRate || ''}\r\n                onChange={(e) => handleInputChange('couponRate', parseFloat(e.target.value))}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.couponRate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted`}\r\n                placeholder=\"e.g., 0.045 for 4.5%\"\r\n              />\r\n              {errors.couponRate && (\r\n                <p className=\"mt-1 text-sm text-red-400\">{errors.couponRate}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Coupon Frequency\r\n              </label>\r\n              <select\r\n                value={formData.couponFrequency}\r\n                onChange={(e) => handleInputChange('couponFrequency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {COUPON_FREQUENCY_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Day Count Convention\r\n              </label>\r\n              <select\r\n                value={formData.dayCount}\r\n                onChange={(e) => handleInputChange('dayCount', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {DAY_COUNT_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Dates Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Dates\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Issue Date <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formData.issueDate || ''}\r\n                onChange={(e) => handleInputChange('issueDate', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.issueDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              />\r\n              {errors.issueDate && <p className=\"mt-1 text-sm text-red-400\">{errors.issueDate}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Maturity Date <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formData.maturityDate || ''}\r\n                onChange={(e) => handleInputChange('maturityDate', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.maturityDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              />\r\n              {errors.maturityDate && (\r\n                <p className=\"mt-1 text-sm text-red-400\">{errors.maturityDate}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Settlement Days</label>\r\n              <input\r\n                type=\"number\"\r\n                value={formData.settlementDays || ''}\r\n                onChange={(e) => handleInputChange('settlementDays', parseInt(e.target.value))}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Face Value</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.faceValue || ''}\r\n                onChange={(e) => handleInputChange('faceValue', parseFloat(e.target.value))}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Message */}\r\n          {errors.submit && (\r\n            <div className=\"mt-4 p-3 bg-red-900/20 border border-red-500/30 rounded-md\">\r\n              <p className=\"text-sm text-red-400\">{errors.submit}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"mt-6 flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-darker focus:outline-none focus:ring-2 focus:ring-fd-green\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:bg-fd-green/50 disabled:cursor-not-allowed\"\r\n            >\r\n              {isSubmitting ? 'Creating...' : 'Create Bond'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BondCreationModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondDetailView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBondDetails'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [bondId, loadBondDetails]","fix":{"range":[982,990],"text":"[bondId, loadBondDetails]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\cds-blotter\\CDSBlotter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\cds-trade-form\\CDSTradeForm.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":132,"column":9,"nodeType":"MemberExpression","endLine":132,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":147,"column":9,"nodeType":"MemberExpression","endLine":147,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":210,"column":28,"nodeType":"MemberExpression","endLine":210,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":218,"column":28,"nodeType":"MemberExpression","endLine":218,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  REFERENCE_ENTITIES,\r\n  COUNTERPARTIES,\r\n  CURRENCIES,\r\n  PREMIUM_FREQUENCIES,\r\n  DAY_COUNT_CONVENTIONS,\r\n  RESTRUCTURING_CLAUSES,\r\n  PAYMENT_CALENDARS,\r\n  TRADE_STATUSES,\r\n  SETTLEMENT_METHODS,\r\n  CDSTrade\r\n} from '../../data/referenceData';\r\nimport { bondService, Bond } from '../../services/bondService';\r\n\r\ninterface FormErrors {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface CDSTradeFormProps {\r\n  onSubmit: (trade: CDSTrade) => void;\r\n}\r\n\r\nconst CDSTradeForm: React.FC<CDSTradeFormProps> = ({ onSubmit }) => {\r\n  const [formData, setFormData] = useState<Partial<CDSTrade>>({\r\n    tradeDate: new Date().toISOString().split('T')[0],\r\n    currency: 'USD',\r\n    premiumFrequency: 'QUARTERLY',\r\n    dayCountConvention: 'ACT_360',\r\n    buySellProtection: 'BUY',\r\n    paymentCalendar: 'NYC',\r\n    tradeStatus: 'PENDING',\r\n    recoveryRate: 40,\r\n    settlementType: 'CASH'\r\n  });\r\n\r\n  const [errors, setErrors] = useState<FormErrors>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [availableBonds, setAvailableBonds] = useState<Bond[]>([]);\r\n  const [loadingBonds, setLoadingBonds] = useState(false);\r\n\r\n  // Fetch bonds when reference entity changes\r\n  useEffect(() => {\r\n    const fetchBonds = async () => {\r\n      if (!formData.referenceEntity) {\r\n        setAvailableBonds([]);\r\n        return;\r\n      }\r\n\r\n      setLoadingBonds(true);\r\n      try {\r\n        const bonds = await bondService.getBondsByIssuer(formData.referenceEntity);\r\n        setAvailableBonds(bonds);\r\n      } catch (error) {\r\n        console.error('Error fetching bonds:', error);\r\n        setAvailableBonds([]);\r\n      } finally {\r\n        setLoadingBonds(false);\r\n      }\r\n    };\r\n\r\n    fetchBonds();\r\n  }, [formData.referenceEntity]);\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: FormErrors = {};\r\n\r\n    // Required field validations\r\n    if (!formData.referenceEntity) {\r\n      newErrors.referenceEntity = 'Reference Entity is required';\r\n    }\r\n    \r\n    if (formData.referenceEntity && !formData.obligation?.id) {\r\n      newErrors.obligation = 'Obligation is required';\r\n    }\r\n\r\n    if (!formData.notionalAmount || formData.notionalAmount <= 0) {\r\n      newErrors.notionalAmount = 'Notional Amount must be greater than 0';\r\n    }\r\n\r\n    if (!formData.spread || formData.spread < 0) {\r\n      newErrors.spread = 'Spread must be 0 or greater';\r\n    }\r\n\r\n    if (!formData.recoveryRate || formData.recoveryRate < 0 || formData.recoveryRate > 100) {\r\n      newErrors.recoveryRate = 'Recovery Rate must be between 0 and 100';\r\n    }\r\n\r\n    if (!formData.maturityDate) {\r\n      newErrors.maturityDate = 'Maturity Date is required';\r\n    }\r\n\r\n    if (!formData.effectiveDate) {\r\n      newErrors.effectiveDate = 'Effective Date is required';\r\n    }\r\n\r\n    if (!formData.counterparty) {\r\n      newErrors.counterparty = 'Counterparty is required';\r\n    }\r\n\r\n    if (!formData.tradeDate) {\r\n      newErrors.tradeDate = 'Trade Date is required';\r\n    }\r\n\r\n    if (!formData.accrualStartDate) {\r\n      newErrors.accrualStartDate = 'Accrual Start Date is required';\r\n    }\r\n\r\n    // Date validations\r\n    if (formData.effectiveDate && formData.maturityDate && \r\n        new Date(formData.effectiveDate) >= new Date(formData.maturityDate)) {\r\n      newErrors.maturityDate = 'Maturity Date must be after Effective Date';\r\n    }\r\n\r\n    if (formData.tradeDate && formData.effectiveDate && \r\n        new Date(formData.tradeDate) > new Date(formData.effectiveDate)) {\r\n      newErrors.effectiveDate = 'Effective Date must be on or after Trade Date';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleInputChange = (field: keyof CDSTrade, value: any) => {\r\n    setFormData(prev => {\r\n      const updates: Partial<CDSTrade> = {};\r\n      \r\n      // Handle obligation specially - convert to nested object\r\n      if (field === 'obligation') {\r\n        updates.obligation = value ? { id: value } : undefined;\r\n      } else {\r\n        updates[field] = value as any;\r\n      }\r\n      \r\n      // Clear obligation when reference entity changes\r\n      if (field === 'referenceEntity' && prev.referenceEntity !== value) {\r\n        updates.obligation = undefined;\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        ...updates\r\n      };\r\n    });\r\n\r\n    // Clear error for this field when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [field]: ''\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Format number with commas for display\r\n  const formatNumberWithCommas = (num: number | undefined): string => {\r\n    if (!num && num !== 0) return '';\r\n    return num.toLocaleString('en-US');\r\n  };\r\n\r\n  // Handle notional amount input with formatting\r\n  const handleNotionalChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const rawValue = e.target.value.replace(/,/g, ''); // Remove commas\r\n    const numValue = parseFloat(rawValue);\r\n    \r\n    if (!isNaN(numValue) || rawValue === '') {\r\n      handleInputChange('notionalAmount', rawValue === '' ? undefined : numValue);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    // Defensive normalization\r\n    if (formData.tradeStatus === 'SETTLED' || formData.tradeStatus === 'CONFIRMED') {\r\n      formData.tradeStatus = 'ACTIVE';\r\n    }\r\n\r\n    // Simulate API call delay\r\n    setTimeout(() => {\r\n      onSubmit(formData as CDSTrade);\r\n      setIsSubmitting(false);\r\n      \r\n      // Reset form\r\n      setFormData({\r\n        tradeDate: new Date().toISOString().split('T')[0],\r\n        currency: 'USD',\r\n        premiumFrequency: 'QUARTERLY',\r\n        dayCountConvention: 'ACT_360',\r\n        buySellProtection: 'BUY',\r\n        paymentCalendar: 'NYC',\r\n        tradeStatus: 'PENDING',\r\n        recoveryRate: 40,\r\n        settlementType: 'CASH'\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  const inputClassName = (fieldName: string) => {\r\n    const baseClass = \"w-full px-3 py-2 bg-fd-input border rounded-md text-fd-text placeholder-fd-text-muted focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-fd-green\";\r\n    const errorClass = \"border-red-500\";\r\n    const normalClass = \"border-fd-border\";\r\n    \r\n    return `${baseClass} ${errors[fieldName] ? errorClass : normalClass}`;\r\n  };\r\n\r\n  const selectClassName = (fieldName: string) => {\r\n    const baseClass = \"w-full px-3 py-2 bg-fd-input border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-fd-green\";\r\n    const errorClass = \"border-red-500\";\r\n    const normalClass = \"border-fd-border\";\r\n    \r\n    return `${baseClass} ${errors[fieldName] ? errorClass : normalClass}`;\r\n  };\r\n\r\n  const generateRandomData = () => {\r\n    // Helper function to get random item from array\r\n    const getRandomItem = (array: any[]) => array[Math.floor(Math.random() * array.length)];\r\n    \r\n    // Helper function to get random date within a range (days offset from today)\r\n    const getRandomDate = (startDays: number, endDays: number) => {\r\n      const start = new Date();\r\n      start.setDate(start.getDate() + startDays);\r\n      const end = new Date();\r\n      end.setDate(end.getDate() + endDays);\r\n      \r\n      const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r\n      return new Date(randomTime).toISOString().split('T')[0];\r\n    };\r\n    \r\n    // Generate trades that started in the PAST for demo purposes\r\n    // This allows demonstrating coupon payments immediately\r\n    \r\n    // Trade date: 24-48 months ago (2-4 years in the past) for more coupons\r\n    const tradeDate = getRandomDate(-365 * 4, -365 * 2);\r\n    \r\n    // Effective date: 1-7 days after trade date (still in the past)\r\n    const tradeDateObj = new Date(tradeDate);\r\n    const effectiveDaysOffset = Math.floor(Math.random() * 7) + 1;\r\n    const effectiveDateObj = new Date(tradeDateObj);\r\n    effectiveDateObj.setDate(effectiveDateObj.getDate() + effectiveDaysOffset);\r\n    const effectiveDate = effectiveDateObj.toISOString().split('T')[0];\r\n    \r\n    // Maturity date: 2-5 years from TODAY (in the future)\r\n    const maturityDate = getRandomDate(365 * 2, 365 * 5);\r\n    \r\n    // Accrual start date: same as effective date\r\n    const accrualStartDate = effectiveDate;\r\n    \r\n    // Generate round notional amounts (5M, 10M, 20M, 50M, 100M, 200M, 500M)\r\n    const roundNotionals = [5000000, 10000000, 20000000, 50000000, 100000000, 200000000, 500000000];\r\n    const notionalAmount = getRandomItem(roundNotionals);\r\n    \r\n    const randomData: Partial<CDSTrade> = {\r\n      referenceEntity: getRandomItem(REFERENCE_ENTITIES).code,\r\n      counterparty: getRandomItem(COUNTERPARTIES).code,\r\n      currency: getRandomItem(CURRENCIES).code,\r\n      notionalAmount,\r\n      spread: Math.floor(Math.random() * 500) + 50, // 50 to 550 bps\r\n      buySellProtection: Math.random() > 0.5 ? 'BUY' : 'SELL',\r\n      tradeDate,\r\n      effectiveDate,\r\n      maturityDate,\r\n      accrualStartDate,\r\n      premiumFrequency: getRandomItem(PREMIUM_FREQUENCIES).value,\r\n      dayCountConvention: getRandomItem(DAY_COUNT_CONVENTIONS).value,\r\n      restructuringClause: Math.random() > 0.3 ? getRandomItem(RESTRUCTURING_CLAUSES).value : '', // 70% chance of having a clause\r\n      paymentCalendar: getRandomItem(PAYMENT_CALENDARS).value,\r\n      tradeStatus: 'ACTIVE', // Always generate ACTIVE trades for demo purposes\r\n      recoveryRate: 40,  // Default recovery rate\r\n      settlementType: getRandomItem(SETTLEMENT_METHODS).value\r\n    };\r\n    setFormData(randomData);\r\n    setErrors({}); // Clear any existing errors\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-2xl font-bold text-fd-text\">New CDS Trade Entry</h2>\r\n      </div>\r\n      \r\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n        {/* Row 1: Reference Entity, Counterparty, Currency */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Reference Entity <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.referenceEntity || ''}\r\n              onChange={(e) => handleInputChange('referenceEntity', e.target.value)}\r\n              className={selectClassName('referenceEntity')}\r\n            >\r\n              <option value=\"\">Select Reference Entity</option>\r\n              {REFERENCE_ENTITIES.map((entity) => (\r\n                <option key={entity.code} value={entity.code}>\r\n                  {entity.code} - {entity.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.referenceEntity && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.referenceEntity}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Counterparty <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.counterparty || ''}\r\n              onChange={(e) => handleInputChange('counterparty', e.target.value)}\r\n              className={selectClassName('counterparty')}\r\n            >\r\n              <option value=\"\">Select Counterparty</option>\r\n              {COUNTERPARTIES.map((cp) => (\r\n                <option key={cp.code} value={cp.code}>\r\n                  {cp.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.counterparty && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.counterparty}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Currency <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.currency || 'USD'}\r\n              onChange={(e) => handleInputChange('currency', e.target.value)}\r\n              className={selectClassName('currency')}\r\n            >\r\n              {CURRENCIES.map((curr) => (\r\n                <option key={curr.code} value={curr.code}>\r\n                  {curr.code} - {curr.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 1.5: Obligation (conditional on reference entity) */}\r\n        {formData.referenceEntity && (\r\n          <div className=\"grid grid-cols-1 gap-4\">\r\n            <div>\r\n              <label className=\"block text-fd-text font-medium mb-2\">\r\n                Obligation (Bond) <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.obligation?.id || ''}\r\n                onChange={(e) => handleInputChange('obligation', e.target.value ? Number(e.target.value) : undefined)}\r\n                className={selectClassName('obligation')}\r\n                disabled={loadingBonds}\r\n              >\r\n                <option value=\"\">Select Obligation</option>\r\n                {loadingBonds && <option value=\"\">Loading bonds...</option>}\r\n                {!loadingBonds && availableBonds.length === 0 && (\r\n                  <option value=\"\">No bonds available for {formData.referenceEntity}</option>\r\n                )}\r\n                {!loadingBonds && availableBonds.map((bond) => (\r\n                  <option key={bond.id} value={bond.id}>\r\n                    {bond.isin ? `${bond.isin} - ` : ''}\r\n                    {bond.issuer} {bond.seniority} - \r\n                    Coupon: {bond.couponRate}% - \r\n                    Maturity: {new Date(bond.maturityDate).toLocaleDateString()}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <p className=\"text-xs text-fd-text-muted mt-1\">\r\n                Select a specific bond from {formData.referenceEntity}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Row 2: Notional Amount, Spread, Buy/Sell Protection */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Notional Amount <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={formatNumberWithCommas(formData.notionalAmount)}\r\n              onChange={handleNotionalChange}\r\n              className={inputClassName('notionalAmount')}\r\n              placeholder=\"e.g., 10,000,000\"\r\n            />\r\n            {errors.notionalAmount && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.notionalAmount}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Spread (bps) <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              min=\"0\"\r\n              value={formData.spread || ''}\r\n              onChange={(e) => handleInputChange('spread', parseFloat(e.target.value))}\r\n              className={inputClassName('spread')}\r\n              placeholder=\"e.g., 100\"\r\n            />\r\n            {errors.spread && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.spread}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Recovery Rate (%) <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              step=\"1\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={formData.recoveryRate || 40}\r\n              onChange={(e) => handleInputChange('recoveryRate', parseFloat(e.target.value))}\r\n              className={inputClassName('recoveryRate')}\r\n              placeholder=\"e.g., 40\"\r\n            />\r\n            {errors.recoveryRate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.recoveryRate}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 3: Buy/Sell Protection, Settlement Type */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Buy/Sell Protection <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.buySellProtection || 'BUY'}\r\n              onChange={(e) => handleInputChange('buySellProtection', e.target.value)}\r\n              className={selectClassName('buySellProtection')}\r\n            >\r\n              <option value=\"BUY\">Buy Protection</option>\r\n              <option value=\"SELL\">Sell Protection</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Settlement Type <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.settlementType || 'CASH'}\r\n              onChange={(e) => handleInputChange('settlementType', e.target.value)}\r\n              className={selectClassName('settlementType')}\r\n            >\r\n              {SETTLEMENT_METHODS.map((method) => (\r\n                <option key={method.value} value={method.value}>\r\n                  {method.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 4: Trade Date, Effective Date, Maturity Date */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Trade Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.tradeDate || ''}\r\n              onChange={(e) => handleInputChange('tradeDate', e.target.value)}\r\n              className={inputClassName('tradeDate')}\r\n            />\r\n            {errors.tradeDate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.tradeDate}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Effective Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.effectiveDate || ''}\r\n              onChange={(e) => handleInputChange('effectiveDate', e.target.value)}\r\n              className={inputClassName('effectiveDate')}\r\n            />\r\n            {errors.effectiveDate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.effectiveDate}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Maturity Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.maturityDate || ''}\r\n              onChange={(e) => handleInputChange('maturityDate', e.target.value)}\r\n              className={inputClassName('maturityDate')}\r\n            />\r\n            {errors.maturityDate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.maturityDate}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 4: Premium Frequency, Day Count Convention, Accrual Start Date */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Premium Frequency <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.premiumFrequency || 'QUARTERLY'}\r\n              onChange={(e) => handleInputChange('premiumFrequency', e.target.value)}\r\n              className={selectClassName('premiumFrequency')}\r\n            >\r\n              {PREMIUM_FREQUENCIES.map((freq) => (\r\n                <option key={freq.value} value={freq.value}>\r\n                  {freq.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Day Count Convention <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.dayCountConvention || 'ACT_360'}\r\n              onChange={(e) => handleInputChange('dayCountConvention', e.target.value)}\r\n              className={selectClassName('dayCountConvention')}\r\n            >\r\n              {DAY_COUNT_CONVENTIONS.map((dcc) => (\r\n                <option key={dcc.value} value={dcc.value}>\r\n                  {dcc.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Accrual Start Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.accrualStartDate || ''}\r\n              onChange={(e) => handleInputChange('accrualStartDate', e.target.value)}\r\n              className={inputClassName('accrualStartDate')}\r\n            />\r\n            {errors.accrualStartDate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.accrualStartDate}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 5: Payment Calendar, Restructuring Clause, Trade Status */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Payment Calendar <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.paymentCalendar || 'NYC'}\r\n              onChange={(e) => handleInputChange('paymentCalendar', e.target.value)}\r\n              className={selectClassName('paymentCalendar')}\r\n            >\r\n              {PAYMENT_CALENDARS.map((cal) => (\r\n                <option key={cal.value} value={cal.value}>\r\n                  {cal.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Restructuring Clause\r\n            </label>\r\n            <select\r\n              value={formData.restructuringClause || ''}\r\n              onChange={(e) => handleInputChange('restructuringClause', e.target.value)}\r\n              className={selectClassName('restructuringClause')}\r\n            >\r\n              <option value=\"\">None</option>\r\n              {RESTRUCTURING_CLAUSES.map((clause) => (\r\n                <option key={clause.value} value={clause.value}>\r\n                  {clause.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Trade Status <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.tradeStatus || 'PENDING'}\r\n              onChange={(e) => handleInputChange('tradeStatus', e.target.value)}\r\n              className={selectClassName('tradeStatus')}\r\n            >\r\n              {TRADE_STATUSES.map((status) => (\r\n                <option key={status.value} value={status.value}>\r\n                  {status.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <div className=\"flex justify-end space-x-4 pt-6 border-t border-fd-border\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={generateRandomData}\r\n            className=\"px-6 py-2 bg-transparent border border-fd-border text-fd-text rounded hover:bg-fd-dark transition-colors\"\r\n          >\r\n            Fill Random Data\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setFormData({\r\n                tradeDate: new Date().toISOString().split('T')[0],\r\n                currency: 'USD',\r\n                premiumFrequency: 'QUARTERLY',\r\n                dayCountConvention: 'ACT_360',\r\n                buySellProtection: 'BUY',\r\n                paymentCalendar: 'NYC',\r\n                tradeStatus: 'PENDING',\r\n                recoveryRate: 40\r\n              });\r\n              setErrors({});\r\n            }}\r\n            className=\"px-6 py-2 bg-transparent border border-fd-border text-fd-text rounded hover:bg-fd-dark transition-colors\"\r\n          >\r\n            Clear Form\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n            className=\"px-6 py-2 bg-fd-green text-fd-dark font-medium rounded hover:bg-fd-green-hover disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n          >\r\n            {isSubmitting ? 'Booking Trade...' : 'Book Trade'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CDSTradeForm;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\confirmation-modal\\ConfirmationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\credit-event-modal\\CreditEventModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":128,"column":9,"nodeType":"MemberExpression","endLine":128,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { REFERENCE_ENTITIES } from '../../data/referenceData';\r\n\r\nexport type CreditEventType =\r\n  | 'BANKRUPTCY'\r\n  | 'FAILURE_TO_PAY'\r\n  | 'RESTRUCTURING'\r\n  | 'OBLIGATION_DEFAULT'\r\n  | 'REPUDIATION_MORATORIUM'\r\n  | 'PAYOUT';\r\nexport type SettlementMethod = 'CASH' | 'PHYSICAL';\r\n\r\nexport interface CreateCreditEventRequest {\r\n  eventType: CreditEventType;\r\n  eventDate: string;\r\n  noticeDate: string;\r\n  settlementMethod: SettlementMethod;\r\n  comments?: string;\r\n}\r\n\r\ninterface CreditEventModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (request: CreateCreditEventRequest) => Promise<void>;\r\n  tradeId: number;\r\n  referenceEntity?: string;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst CreditEventModal: React.FC<CreditEventModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  tradeId,\r\n  referenceEntity,\r\n  isLoading = false\r\n}) => {\r\n  // Get today's date in YYYY-MM-DD format\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    return today.toISOString().split('T')[0];\r\n  };\r\n\r\n  // Helper function to get full name of reference entity\r\n  const getReferenceEntityFullName = (code: string): string => {\r\n    const entity = REFERENCE_ENTITIES.find(e => e.code === code);\r\n    return entity ? entity.name : code;\r\n  };\r\n\r\n  const [formData, setFormData] = useState<CreateCreditEventRequest>({\r\n    eventType: 'RESTRUCTURING',\r\n    eventDate: getTodayDate(),\r\n    noticeDate: getTodayDate(),\r\n    settlementMethod: 'PHYSICAL',\r\n    comments: '',\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const eventTypeOptions: { value: CreditEventType; label: string }[] = [\r\n    { value: 'RESTRUCTURING', label: 'Restructuring' },\r\n    { value: 'BANKRUPTCY', label: 'Bankruptcy' },\r\n  ];\r\n\r\n  const settlementMethodOptions: { value: SettlementMethod; label: string }[] = [\r\n    { value: 'PHYSICAL', label: 'Physical Settlement' },\r\n    { value: 'CASH', label: 'Cash Settlement' },\r\n  ];\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.eventType) {\r\n      newErrors.eventType = 'Event type is required';\r\n    }\r\n\r\n    if (!formData.eventDate) {\r\n      newErrors.eventDate = 'Event date is required';\r\n    } else if (new Date(formData.eventDate) > new Date()) {\r\n      newErrors.eventDate = 'Event date cannot be in the future';\r\n    }\r\n\r\n    if (!formData.noticeDate) {\r\n      newErrors.noticeDate = 'Notice date is required';\r\n    } else if (formData.eventDate && new Date(formData.noticeDate) < new Date(formData.eventDate)) {\r\n      newErrors.noticeDate = 'Notice date must be on or after event date';\r\n    }\r\n\r\n    if (!formData.settlementMethod) {\r\n      newErrors.settlementMethod = 'Settlement method is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await onSubmit(formData);\r\n      // Reset form on successful submission\r\n      setFormData({\r\n        eventType: 'RESTRUCTURING',\r\n        eventDate: getTodayDate(),\r\n        noticeDate: getTodayDate(),\r\n        settlementMethod: 'PHYSICAL',\r\n        comments: '',\r\n      });\r\n      setErrors({});\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error submitting credit event:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: keyof CreateCreditEventRequest, value: string) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6 w-full max-w-md max-h-[90vh] overflow-y-auto\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <h2 className=\"text-xl font-semibold text-fd-text\">Record Credit Event</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\r\n            disabled={isLoading}\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Reference Entity Information */}\r\n        {referenceEntity && (\r\n          <div className=\"mb-4 p-3 bg-fd-dark rounded-lg border border-fd-border\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <svg className=\"w-5 h-5 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\r\n              </svg>\r\n              <div className=\"flex-1\">\r\n                <p className=\"text-xs text-fd-text-muted uppercase tracking-wide\">Reference Entity</p>\r\n                <p className=\"text-fd-green font-semibold\">{getReferenceEntityFullName(referenceEntity)}</p>\r\n                <p className=\"text-fd-text-muted text-xs mt-0.5\">{referenceEntity}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label htmlFor=\"eventType\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Event Type *\r\n            </label>\r\n            <select\r\n              id=\"eventType\"\r\n              value={formData.eventType}\r\n              onChange={(e) => handleInputChange('eventType', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.eventType ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            >\r\n              {eventTypeOptions.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.eventType && <p className=\"mt-1 text-sm text-red-400\">{errors.eventType}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"eventDate\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Event Date *\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"eventDate\"\r\n              value={formData.eventDate}\r\n              onChange={(e) => handleInputChange('eventDate', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.eventDate ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            />\r\n            {errors.eventDate && <p className=\"mt-1 text-sm text-red-400\">{errors.eventDate}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"noticeDate\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Notice Date *\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"noticeDate\"\r\n              value={formData.noticeDate}\r\n              onChange={(e) => handleInputChange('noticeDate', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.noticeDate ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            />\r\n            {errors.noticeDate && <p className=\"mt-1 text-sm text-red-400\">{errors.noticeDate}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label\r\n              htmlFor=\"settlementMethod\"\r\n              className=\"block text-sm font-medium text-fd-text mb-1\"\r\n            >\r\n              Settlement Method *\r\n            </label>\r\n            <select\r\n              id=\"settlementMethod\"\r\n              value={formData.settlementMethod}\r\n              onChange={(e) => handleInputChange('settlementMethod', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.settlementMethod ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            >\r\n              {settlementMethodOptions.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.settlementMethod && (\r\n              <p className=\"mt-1 text-sm text-red-400\">{errors.settlementMethod}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"comments\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Comments\r\n            </label>\r\n            <textarea\r\n              id=\"comments\"\r\n              value={formData.comments}\r\n              onChange={(e) => handleInputChange('comments', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text placeholder-fd-text-muted\"\r\n              placeholder=\"Optional comments about the credit event...\"\r\n              disabled={isLoading}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex justify-end space-x-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-border focus:outline-none focus:ring-2 focus:ring-fd-green transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:opacity-50 transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Recording...' : 'Record Credit Event'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreditEventModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\AccrualHistoryPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadCumulative' function makes the dependencies of useEffect Hook (at line 39) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'loadCumulative' in its own useCallback() Hook.","line":30,"column":9,"nodeType":"VariableDeclarator","endLine":35,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { lifecycleService } from '../../services/lifecycleService';\r\nimport { AccrualEvent } from '../../types/lifecycle';\r\n\r\ninterface Props {\r\n  tradeId: number;\r\n}\r\n\r\nexport const AccrualHistoryPanel: React.FC<Props> = ({ tradeId }) => {\r\n  const [accruals, setAccruals] = useState<AccrualEvent[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [range, setRange] = useState({ start: '', end: '' });\r\n  const [cumulative, setCumulative] = useState<number | null>(null);\r\n\r\n  const loadAccruals = async () => {\r\n    if (!range.start || !range.end) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await lifecycleService.getAccrualEvents(tradeId, range.start, range.end);\r\n      setAccruals(data);\r\n    } catch (e: any) {\r\n      setError(e.message || 'Failed to load accrual events');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadCumulative = async () => {\r\n    try {\r\n      const cum = await lifecycleService.getCumulativeAccrual(tradeId);\r\n      setCumulative(cum);\r\n    } catch {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCumulative();\r\n  }, [tradeId, loadCumulative]);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h4 className=\"text-fd-text font-semibold\">Accrual History</h4>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <input\r\n            type=\"date\"\r\n            value={range.start}\r\n            onChange={(e) => setRange((r) => ({ ...r, start: e.target.value }))}\r\n            className=\"bg-fd-dark border border-fd-border rounded px-2 py-1 text-xs text-fd-text\"\r\n          />\r\n          <span className=\"text-fd-text-muted text-xs\">to</span>\r\n          <input\r\n            type=\"date\"\r\n            value={range.end}\r\n            onChange={(e) => setRange((r) => ({ ...r, end: e.target.value }))}\r\n            className=\"bg-fd-dark border border-fd-border rounded px-2 py-1 text-xs text-fd-text\"\r\n          />\r\n          <button\r\n            onClick={loadAccruals}\r\n            disabled={!range.start || !range.end}\r\n            className=\"px-3 py-1 text-xs bg-fd-green text-fd-dark rounded font-medium disabled:opacity-40\"\r\n          >\r\n            Load\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {cumulative !== null && (\r\n        <div className=\"bg-fd-dark border border-fd-border rounded p-3 flex items-center justify-between\">\r\n          <span className=\"text-fd-text-muted text-xs uppercase tracking-wide\">\r\n            Cumulative Accrual\r\n          </span>\r\n          <span className=\"text-fd-green font-semibold\">\r\n            {cumulative.toLocaleString(undefined, {\r\n              minimumFractionDigits: 2,\r\n              maximumFractionDigits: 2,\r\n            })}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {loading && <div className=\"text-fd-text-muted text-sm\">Loading accruals...</div>}\r\n      {error && <div className=\"text-red-400 text-sm\">{error}</div>}\r\n      {!loading && accruals.length === 0 && !error && range.start && range.end && (\r\n        <div className=\"text-fd-text-muted text-sm\">No accruals in range.</div>\r\n      )}\r\n      {accruals.length > 0 && (\r\n        <div className=\"overflow-x-auto border border-fd-border rounded max-h-72 overflow-y-auto\">\r\n          <table className=\"min-w-full text-xs\">\r\n            <thead className=\"bg-fd-dark sticky top-0\">\r\n              <tr className=\"text-fd-text-muted\">\r\n                <th className=\"px-3 py-2 text-left font-medium\">Date</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Accrual</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Cumulative</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Notional</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Version</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {accruals.map((a) => (\r\n                <tr key={a.id} className=\"border-t border-fd-border hover:bg-fd-darker/40\">\r\n                  <td className=\"px-3 py-1 text-fd-text font-mono\">{a.accrualDate}</td>\r\n                  <td className=\"px-3 py-1 text-fd-green font-medium\">\r\n                    {a.accrualAmount.toLocaleString(undefined, { minimumFractionDigits: 2 })}\r\n                  </td>\r\n                  <td className=\"px-3 py-1 text-fd-text-muted\">\r\n                    {a.cumulativeAccrual.toLocaleString(undefined, { minimumFractionDigits: 2 })}\r\n                  </td>\r\n                  <td className=\"px-3 py-1 text-fd-text-muted\">\r\n                    {a.notionalAmount.toLocaleString()}\r\n                  </td>\r\n                  <td className=\"px-3 py-1 text-fd-text-muted\">{a.tradeVersion}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\AmendTradeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\CashflowPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCashflowData'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadCashflowData, trade.id]","fix":{"range":[1451,1461],"text":"[loadCashflowData, trade.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\CouponSchedulePanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'autoGenerate', 'generateSchedule', 'loadSchedule', and 'periods.length'. Either include them or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [autoGenerate, generateSchedule, loadSchedule, periods.length, tradeId]","fix":{"range":[1457,1466],"text":"[autoGenerate, generateSchedule, loadSchedule, periods.length, tradeId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\LifecycleTimeline.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLifecycleData'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadLifecycleData, trade.id]","fix":{"range":[1641,1651],"text":"[loadLifecycleData, trade.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\NotionalAdjustmentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\AttachInstrumentsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\AttachTradesModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\CreatePortfolioModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\EnhancedOverview.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":200,"column":12,"nodeType":"MemberExpression","endLine":200,"endColumn":29}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateExposures'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [cdsConstituents, bondConstituents, basketConstituents, calculateExposures]","fix":{"range":[1324,1379],"text":"[cdsConstituents, bondConstituents, basketConstituents, calculateExposures]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  BondPortfolioConstituent,\r\n  BasketPortfolioConstituent,\r\n  CdsPortfolioConstituent,\r\n} from '../../services/portfolioService';\r\n\r\ninterface EnhancedOverviewProps {\r\n  portfolioId: number;\r\n  cdsConstituents: CdsPortfolioConstituent[];\r\n  bondConstituents: BondPortfolioConstituent[];\r\n  basketConstituents: BasketPortfolioConstituent[];\r\n  pricingData: any;\r\n}\r\n\r\ninterface IssuerExposure {\r\n  issuer: string;\r\n  sector: string;\r\n  bondNotional: number;\r\n  cdsProtectionBought: number;\r\n  cdsProtectionSold: number;\r\n  netCreditExposure: number;\r\n  hedgeRatio: number;\r\n  hedgeStatus: 'OVER_HEDGED' | 'UNDER_HEDGED' | 'BALANCED' | 'UNHEDGED';\r\n  recommendation: string;\r\n}\r\n\r\ninterface SectorExposure {\r\n  sector: string;\r\n  notional: number;\r\n  percentage: number;\r\n  instrumentCount: number;\r\n}\r\n\r\nconst EnhancedOverview: React.FC<EnhancedOverviewProps> = ({\r\n  portfolioId,\r\n  cdsConstituents,\r\n  bondConstituents,\r\n  basketConstituents,\r\n  pricingData,\r\n}) => {\r\n  const [issuerExposures, setIssuerExposures] = useState<IssuerExposure[]>([]);\r\n  const [sectorExposures, setSectorExposures] = useState<SectorExposure[]>([]);\r\n\r\n  useEffect(() => {\r\n    calculateExposures();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cdsConstituents, bondConstituents, basketConstituents]);\r\n\r\n  const calculateExposures = useCallback(() => {\r\n    // Map to aggregate by issuer\r\n    const issuerMap = new Map<string, IssuerExposure>();\r\n\r\n    // Process bonds\r\n    bondConstituents.forEach((bc) => {\r\n      const issuer = bc.bond.issuer;\r\n      if (!issuerMap.has(issuer)) {\r\n        issuerMap.set(issuer, {\r\n          issuer,\r\n          sector: getSectorFromIssuer(issuer),\r\n          bondNotional: 0,\r\n          cdsProtectionBought: 0,\r\n          cdsProtectionSold: 0,\r\n          netCreditExposure: 0,\r\n          hedgeRatio: 0,\r\n          hedgeStatus: 'UNHEDGED',\r\n          recommendation: '',\r\n        });\r\n      }\r\n      const exposure = issuerMap.get(issuer)!;\r\n      exposure.bondNotional += bc.bond.notional;\r\n    });\r\n\r\n    // Process CDS\r\n    cdsConstituents.forEach((cc) => {\r\n      const issuer = cc.trade.referenceEntity;\r\n      if (!issuerMap.has(issuer)) {\r\n        issuerMap.set(issuer, {\r\n          issuer,\r\n          sector: getSectorFromIssuer(issuer),\r\n          bondNotional: 0,\r\n          cdsProtectionBought: 0,\r\n          cdsProtectionSold: 0,\r\n          netCreditExposure: 0,\r\n          hedgeRatio: 0,\r\n          hedgeStatus: 'UNHEDGED',\r\n          recommendation: '',\r\n        });\r\n      }\r\n      const exposure = issuerMap.get(issuer)!;\r\n\r\n      // Assuming BUY = buying protection (short credit), SELL = selling protection (long credit)\r\n      // This is a simplification - you may need to check actual buySell field\r\n      exposure.cdsProtectionBought += cc.trade.notionalAmount;\r\n    });\r\n\r\n    // Calculate net exposures and recommendations\r\n    const exposures: IssuerExposure[] = [];\r\n    issuerMap.forEach((exp) => {\r\n      exp.netCreditExposure = exp.bondNotional - exp.cdsProtectionBought + exp.cdsProtectionSold;\r\n\r\n      if (exp.bondNotional > 0) {\r\n        exp.hedgeRatio = (exp.cdsProtectionBought / exp.bondNotional) * 100;\r\n\r\n        if (exp.hedgeRatio > 110) {\r\n          exp.hedgeStatus = 'OVER_HEDGED';\r\n          exp.recommendation = `Consider reducing CDS protection by $${((exp.cdsProtectionBought - exp.bondNotional) / 1000000).toFixed(1)}M`;\r\n        } else if (exp.hedgeRatio >= 90 && exp.hedgeRatio <= 110) {\r\n          exp.hedgeStatus = 'BALANCED';\r\n          exp.recommendation = 'Well hedged';\r\n        } else if (exp.hedgeRatio > 0) {\r\n          exp.hedgeStatus = 'UNDER_HEDGED';\r\n          exp.recommendation = `Consider buying $${((exp.bondNotional - exp.cdsProtectionBought) / 1000000).toFixed(1)}M CDS protection`;\r\n        } else {\r\n          exp.hedgeStatus = 'UNHEDGED';\r\n          exp.recommendation = `⚠️ Buy $${(exp.bondNotional / 1000000).toFixed(1)}M CDS protection to hedge bond exposure`;\r\n        }\r\n      } else if (exp.cdsProtectionBought > 0) {\r\n        exp.hedgeStatus = 'UNHEDGED';\r\n        exp.recommendation = `Consider buying $${(exp.cdsProtectionBought / 1000000).toFixed(1)}M in bonds to capture basis`;\r\n      }\r\n\r\n      exposures.push(exp);\r\n    });\r\n\r\n    setIssuerExposures(\r\n      exposures.sort((a, b) => Math.abs(b.netCreditExposure) - Math.abs(a.netCreditExposure))\r\n    );\r\n\r\n    // Calculate sector exposures\r\n    const sectorMap = new Map<string, { notional: number; count: number }>();\r\n\r\n    bondConstituents.forEach((bc) => {\r\n      const sector = getSectorFromIssuer(bc.bond.issuer);\r\n      if (!sectorMap.has(sector)) {\r\n        sectorMap.set(sector, { notional: 0, count: 0 });\r\n      }\r\n      const sectorData = sectorMap.get(sector)!;\r\n      sectorData.notional += bc.bond.notional;\r\n      sectorData.count++;\r\n    });\r\n\r\n    cdsConstituents.forEach((cc) => {\r\n      const sector = getSectorFromIssuer(cc.trade.referenceEntity);\r\n      if (!sectorMap.has(sector)) {\r\n        sectorMap.set(sector, { notional: 0, count: 0 });\r\n      }\r\n      const sectorData = sectorMap.get(sector)!;\r\n      sectorData.notional += cc.trade.notionalAmount;\r\n      sectorData.count++;\r\n    });\r\n\r\n    // Add baskets as \"BASKET\" sector for now\r\n    // TODO: In future, unwind basket constituents to their actual sectors\r\n    basketConstituents.forEach((bc) => {\r\n      const sector = 'BASKET';\r\n      if (!sectorMap.has(sector)) {\r\n        sectorMap.set(sector, { notional: 0, count: 0 });\r\n      }\r\n      const sectorData = sectorMap.get(sector)!;\r\n      // Use basket.notional (backend field name)\r\n      const notional = bc.basket?.notional || bc.weightValue || 0;\r\n      sectorData.notional += notional;\r\n      sectorData.count++;\r\n    });\r\n\r\n    const totalNotional = Array.from(sectorMap.values()).reduce((sum, s) => sum + s.notional, 0);\r\n    const sectors: SectorExposure[] = [];\r\n\r\n    sectorMap.forEach((data, sector) => {\r\n      sectors.push({\r\n        sector,\r\n        notional: data.notional,\r\n        percentage: totalNotional > 0 ? (data.notional / totalNotional) * 100 : 0,\r\n        instrumentCount: data.count,\r\n      });\r\n    });\r\n\r\n    setSectorExposures(sectors.sort((a, b) => b.notional - a.notional));\r\n  }, [basketConstituents, bondConstituents, cdsConstituents]); // useCallback dependency array\r\n\r\n  const getSectorFromIssuer = (issuer: string): string => {\r\n    const sectorMap: Record<string, string> = {\r\n      AAPL: 'TECH',\r\n      MSFT: 'TECH',\r\n      AMZN: 'TECH',\r\n      GOOGL: 'TECH',\r\n      TSLA: 'TECH',\r\n      NFLX: 'TECH',\r\n      META: 'TECH',\r\n      NVDA: 'TECH',\r\n      AMD: 'TECH',\r\n      JPM: 'FINANCIALS',\r\n      BAC: 'FINANCIALS',\r\n      WFC: 'FINANCIALS',\r\n      GS: 'FINANCIALS',\r\n      MS: 'FINANCIALS',\r\n      C: 'FINANCIALS',\r\n    };\r\n    return sectorMap[issuer] || 'OTHER';\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  const getHedgeStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'BALANCED':\r\n        return 'text-fd-green';\r\n      case 'UNDER_HEDGED':\r\n        return 'text-yellow-400';\r\n      case 'OVER_HEDGED':\r\n        return 'text-blue-400';\r\n      case 'UNHEDGED':\r\n        return 'text-red-400';\r\n      default:\r\n        return 'text-fd-text-muted';\r\n    }\r\n  };\r\n\r\n  const getHedgeStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'BALANCED':\r\n        return 'bg-green-900/30 text-green-400 border-green-500';\r\n      case 'UNDER_HEDGED':\r\n        return 'bg-yellow-900/30 text-yellow-400 border-yellow-500';\r\n      case 'OVER_HEDGED':\r\n        return 'bg-blue-900/30 text-blue-400 border-blue-500';\r\n      case 'UNHEDGED':\r\n        return 'bg-red-900/30 text-red-400 border-red-500';\r\n      default:\r\n        return 'bg-fd-dark text-fd-text-muted border-fd-border';\r\n    }\r\n  };\r\n\r\n  const getSectorColor = (index: number) => {\r\n    const colors = [\r\n      'bg-fd-green',\r\n      'bg-blue-500',\r\n      'bg-yellow-500',\r\n      'bg-purple-500',\r\n      'bg-pink-500',\r\n      'bg-indigo-500',\r\n      'bg-teal-500',\r\n      'bg-orange-500',\r\n    ];\r\n    return colors[index % colors.length];\r\n  };\r\n\r\n  const totalCdsNotional = cdsConstituents.reduce((sum, c) => sum + c.trade.notionalAmount, 0);\r\n  const totalBondNotional = bondConstituents.reduce((sum, c) => sum + c.bond.notional, 0);\r\n  const totalBasketNotional = basketConstituents.reduce((sum, c) => {\r\n    // Use basket.notional (backend field name)\r\n    const notional = c.basket?.notional || c.weightValue || 0;\r\n    return sum + notional;\r\n  }, 0);\r\n  const totalNotional = totalCdsNotional + totalBondNotional + totalBasketNotional;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Instrument Distribution */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Instrument Type Breakdown */}\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Instrument Distribution</h3>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"w-4 h-4 bg-fd-green rounded\"></div>\r\n                <span className=\"text-fd-text\">🛡️ CDS Trades</span>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <div className=\"text-fd-text font-medium\">{formatCurrency(totalCdsNotional)}</div>\r\n                <div className=\"text-sm text-fd-text-muted\">\r\n                  {totalNotional > 0 ? ((totalCdsNotional / totalNotional) * 100).toFixed(1) : 0}% •{' '}\r\n                  {cdsConstituents.length} positions\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\r\n              <div\r\n                className=\"bg-fd-green h-2 rounded-full transition-all\"\r\n                style={{\r\n                  width: `${totalNotional > 0 ? (totalCdsNotional / totalNotional) * 100 : 0}%`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between mt-4\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\r\n                <span className=\"text-fd-text\">📜 Corporate Bonds</span>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <div className=\"text-fd-text font-medium\">{formatCurrency(totalBondNotional)}</div>\r\n                <div className=\"text-sm text-fd-text-muted\">\r\n                  {totalNotional > 0 ? ((totalBondNotional / totalNotional) * 100).toFixed(1) : 0}%\r\n                  • {bondConstituents.length} positions\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\r\n              <div\r\n                className=\"bg-blue-500 h-2 rounded-full transition-all\"\r\n                style={{\r\n                  width: `${totalNotional > 0 ? (totalBondNotional / totalNotional) * 100 : 0}%`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between mt-4\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\r\n                <span className=\"text-fd-text\">🗂️ Credit Baskets</span>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <div className=\"text-fd-text font-medium\">\r\n                  {formatCurrency(totalBasketNotional)}\r\n                </div>\r\n                <div className=\"text-sm text-fd-text-muted\">\r\n                  {totalNotional > 0 ? ((totalBasketNotional / totalNotional) * 100).toFixed(1) : 0}\r\n                  % • {basketConstituents.length} positions\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\r\n              <div\r\n                className=\"bg-purple-500 h-2 rounded-full transition-all\"\r\n                style={{\r\n                  width: `${totalNotional > 0 ? (totalBasketNotional / totalNotional) * 100 : 0}%`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sector Exposure */}\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Sector Allocation</h3>\r\n          <div className=\"space-y-3\">\r\n            {sectorExposures.slice(0, 5).map((sector, idx) => (\r\n              <div key={sector.sector} className=\"space-y-1\">\r\n                <div className=\"flex items-center justify-between text-sm\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div className={`w-3 h-3 rounded ${getSectorColor(idx)}`}></div>\r\n                    <span className=\"text-fd-text\">{sector.sector}</span>\r\n                  </div>\r\n                  <div className=\"text-fd-text-muted\">\r\n                    {sector.percentage.toFixed(1)}% • {sector.instrumentCount} instruments\r\n                  </div>\r\n                </div>\r\n                <div className=\"w-full bg-fd-dark rounded-full h-1.5\">\r\n                  <div\r\n                    className={`${getSectorColor(idx)} h-1.5 rounded-full transition-all`}\r\n                    style={{ width: `${sector.percentage}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Net Exposure by Issuer */}\r\n      <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text\">Net Credit Exposure by Issuer</h3>\r\n          <div className=\"text-sm text-fd-text-muted\">Showing bond positions vs CDS hedges</div>\r\n        </div>\r\n\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-fd-border\">\r\n            <thead>\r\n              <tr className=\"text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\">\r\n                <th className=\"px-4 py-3\">Issuer</th>\r\n                <th className=\"px-4 py-3\">Sector</th>\r\n                <th className=\"px-4 py-3 text-right\">Bond Exposure</th>\r\n                <th className=\"px-4 py-3 text-right\">CDS Protection</th>\r\n                <th className=\"px-4 py-3 text-right\">Net Exposure</th>\r\n                <th className=\"px-4 py-3 text-center\">Hedge Ratio</th>\r\n                <th className=\"px-4 py-3 text-center\">Status</th>\r\n                <th className=\"px-4 py-3\">Recommendation</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"divide-y divide-fd-border\">\r\n              {issuerExposures.map((exp) => (\r\n                <tr key={exp.issuer} className=\"hover:bg-fd-dark transition-colors\">\r\n                  <td className=\"px-4 py-3 text-sm font-medium text-fd-text\">{exp.issuer}</td>\r\n                  <td className=\"px-4 py-3 text-sm text-fd-text-muted\">{exp.sector}</td>\r\n                  <td className=\"px-4 py-3 text-sm text-right text-fd-text\">\r\n                    {exp.bondNotional > 0 ? formatCurrency(exp.bondNotional) : '-'}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-sm text-right text-fd-text\">\r\n                    {exp.cdsProtectionBought > 0 ? formatCurrency(exp.cdsProtectionBought) : '-'}\r\n                  </td>\r\n                  <td\r\n                    className={`px-4 py-3 text-sm text-right font-medium ${\r\n                      exp.netCreditExposure > 0\r\n                        ? 'text-red-400'\r\n                        : exp.netCreditExposure < 0\r\n                          ? 'text-fd-green'\r\n                          : 'text-fd-text'\r\n                    }`}\r\n                  >\r\n                    {formatCurrency(Math.abs(exp.netCreditExposure))}\r\n                    {exp.netCreditExposure > 0\r\n                      ? ' Long'\r\n                      : exp.netCreditExposure < 0\r\n                        ? ' Short'\r\n                        : ''}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-sm text-center text-fd-text\">\r\n                    {exp.bondNotional > 0 ? `${exp.hedgeRatio.toFixed(0)}%` : 'N/A'}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-center\">\r\n                    <span\r\n                      className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium border ${getHedgeStatusBadge(exp.hedgeStatus)}`}\r\n                    >\r\n                      {exp.hedgeStatus.replace('_', ' ')}\r\n                    </span>\r\n                  </td>\r\n                  <td className={`px-4 py-3 text-sm ${getHedgeStatusColor(exp.hedgeStatus)}`}>\r\n                    {exp.recommendation}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {issuerExposures.length === 0 && (\r\n          <div className=\"text-center py-8 text-fd-text-muted\">\r\n            No exposures to analyze. Add some CDS trades and bonds to see hedge recommendations.\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Key Metrics Summary */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Total Instruments</div>\r\n          <div className=\"text-2xl font-semibold text-fd-text\">\r\n            {cdsConstituents.length + bondConstituents.length + basketConstituents.length}\r\n          </div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">\r\n            {cdsConstituents.length} CDS • {bondConstituents.length} Bonds •{' '}\r\n            {basketConstituents.length} Baskets\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Unique Issuers</div>\r\n          <div className=\"text-2xl font-semibold text-fd-text\">{issuerExposures.length}</div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">{sectorExposures.length} sectors</div>\r\n        </div>\r\n\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Hedge Coverage</div>\r\n          <div className=\"text-2xl font-semibold text-fd-text\">\r\n            {totalBondNotional > 0 ? ((totalCdsNotional / totalBondNotional) * 100).toFixed(0) : 0}%\r\n          </div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">CDS / Bond ratio</div>\r\n        </div>\r\n\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Unhedged Exposure</div>\r\n          <div className=\"text-2xl font-semibold text-red-400\">\r\n            {\r\n              issuerExposures.filter(\r\n                (e) => e.hedgeStatus === 'UNHEDGED' || e.hedgeStatus === 'UNDER_HEDGED'\r\n              ).length\r\n            }\r\n          </div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">issuers need attention</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedOverview;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioDetail.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPortfolioData'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [loadPortfolioData, portfolioId]","fix":{"range":[1607,1620],"text":"[loadPortfolioData, portfolioId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\ContributorsTable.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":25,"column":16,"nodeType":"MemberExpression","endLine":25,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":26,"column":16,"nodeType":"MemberExpression","endLine":26,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Contributor } from '../../../services/simulationService';\r\n\r\ninterface ContributorsTableProps {\r\n  contributors: Contributor[];\r\n}\r\n\r\ntype SortField = 'entity' | 'marginalElPct' | 'beta';\r\ntype SortDirection = 'asc' | 'desc';\r\n\r\nconst ContributorsTable: React.FC<ContributorsTableProps> = ({ contributors }) => {\r\n  const [sortField, setSortField] = useState<SortField>('marginalElPct');\r\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\r\n\r\n  const handleSort = (field: SortField) => {\r\n    if (sortField === field) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortField(field);\r\n      setSortDirection(field === 'entity' ? 'asc' : 'desc');\r\n    }\r\n  };\r\n\r\n  const sortedContributors = [...contributors].sort((a, b) => {\r\n    let aVal = a[sortField];\r\n    let bVal = b[sortField];\r\n\r\n    if (typeof aVal === 'string') {\r\n      aVal = aVal.toLowerCase();\r\n      bVal = (bVal as string).toLowerCase();\r\n    }\r\n\r\n    if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;\r\n    if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;\r\n    return 0;\r\n  });\r\n\r\n  const SortIcon = ({ field }: { field: SortField }) => {\r\n    if (sortField !== field) {\r\n      return (\r\n        <svg\r\n          className=\"w-4 h-4 text-fd-text-muted\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\r\n          />\r\n        </svg>\r\n      );\r\n    }\r\n\r\n    return sortDirection === 'asc' ? (\r\n      <svg className=\"w-4 h-4 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\r\n      </svg>\r\n    ) : (\r\n      <svg className=\"w-4 h-4 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n      </svg>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-fd-darker rounded-lg border border-fd-border overflow-hidden\">\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"w-full\">\r\n          <thead className=\"bg-fd-dark border-b border-fd-border\">\r\n            <tr>\r\n              <th\r\n                className=\"px-4 py-3 text-left text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\r\n                onClick={() => handleSort('entity')}\r\n              >\r\n                <div className=\"flex items-center gap-2\">\r\n                  Entity Name\r\n                  <SortIcon field=\"entity\" />\r\n                </div>\r\n              </th>\r\n              <th\r\n                className=\"px-4 py-3 text-right text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\r\n                onClick={() => handleSort('marginalElPct')}\r\n              >\r\n                <div className=\"flex items-center justify-end gap-2\">\r\n                  Marginal EL %\r\n                  <SortIcon field=\"marginalElPct\" />\r\n                </div>\r\n              </th>\r\n              <th\r\n                className=\"px-4 py-3 text-right text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\r\n                onClick={() => handleSort('beta')}\r\n              >\r\n                <div className=\"flex items-center justify-end gap-2\">\r\n                  Beta (β)\r\n                  <SortIcon field=\"beta\" />\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"divide-y divide-fd-border\">\r\n            {sortedContributors.map((contributor, index) => (\r\n              <tr key={index} className=\"hover:bg-fd-dark/50 transition-colors\">\r\n                <td className=\"px-4 py-3 text-sm text-fd-text\">{contributor.entity}</td>\r\n                <td className=\"px-4 py-3 text-sm text-fd-text text-right font-medium\">\r\n                  {contributor.marginalElPct.toFixed(2)}%\r\n                </td>\r\n                <td className=\"px-4 py-3 text-sm text-fd-text-muted text-right\">\r\n                  {contributor.beta.toFixed(3)}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {sortedContributors.length === 0 && (\r\n        <div className=\"p-8 text-center text-fd-text-muted\">No contributors data available</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContributorsTable;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\MetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\MetricsGlossaryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationConfigForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationStatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\CashflowScheduleTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\MarketDataPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\RegressionStatusBadge.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":17,"column":88,"nodeType":"MemberExpression","endLine":17,"endColumn":104}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n\r\ninterface Props {\r\n  status: 'PASS' | 'FAIL' | 'UNKNOWN';\r\n  lastRun?: string;\r\n}\r\n\r\nconst colorMap: Record<string, string> = {\r\n  PASS: 'bg-green-600 text-white',\r\n  FAIL: 'bg-red-600 text-white',\r\n  UNKNOWN: 'bg-gray-600 text-white',\r\n};\r\n\r\nconst RegressionStatusBadge: React.FC<Props> = ({ status, lastRun }) => {\r\n  return (\r\n    <span\r\n      className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-semibold ${colorMap[status]}`}\r\n      title={\r\n        lastRun ? `Last regression: ${new Date(lastRun).toLocaleString()}` : 'No regression run yet'\r\n      }\r\n    >\r\n      Regression: {status}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default RegressionStatusBadge;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\RiskMeasuresPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addedDays' is assigned a value but never used.","line":170,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":170,"endColumn":18}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkForPayoutEvent', 'loadCouponPeriods', and 'loadRiskMeasures'. Either include them or remove the dependency array.","line":222,"column":6,"nodeType":"ArrayExpression","endLine":222,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [checkForPayoutEvent, loadCouponPeriods, loadRiskMeasures, tradeId]","fix":{"range":[7806,7815],"text":"[checkForPayoutEvent, loadCouponPeriods, loadRiskMeasures, tradeId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { fetchRiskMeasures } from '../../services/risk/riskService';\r\nimport { RiskMeasures } from '../../services/risk/riskTypes';\r\nimport { lifecycleService } from '../../services/lifecycleService';\r\nimport { CouponPeriod } from '../../types/lifecycle';\r\nimport { CDSTradeResponse } from '../../services/cdsTradeService';\r\nimport { creditEventService } from '../../services/creditEventService';\r\n\r\ninterface Props {\r\n  tradeId: number;\r\n  trade?: CDSTradeResponse; // Optional trade object for richer display\r\n}\r\n\r\nconst RiskMeasuresPanel: React.FC<Props> = ({ tradeId, trade }) => {\r\n  const [data, setData] = useState<RiskMeasures | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [couponPeriods, setCouponPeriods] = useState<CouponPeriod[]>([]);\r\n  const [payingPeriodId, setPayingPeriodId] = useState<number | null>(null);\r\n  const [recalculating, setRecalculating] = useState(false);\r\n  const [generatingSchedule, setGeneratingSchedule] = useState(false);\r\n  const [valuationDate, setValuationDate] = useState<string | undefined>(undefined); // undefined means \"today\"\r\n  const [hasPayoutEvent, setHasPayoutEvent] = useState(false);\r\n\r\n  // Check if trade is in a final state (settled or terminated) where no modifications are allowed\r\n  const isTradeFinalized = trade && (\r\n    trade.tradeStatus === 'SETTLED_CASH' || \r\n    trade.tradeStatus === 'SETTLED_PHYSICAL' ||\r\n    trade.tradeStatus === 'TERMINATED'\r\n  );\r\n\r\n  const checkForPayoutEvent = async () => {\r\n    try {\r\n      const events = await creditEventService.getCreditEventsForTrade(tradeId);\r\n      const payoutExists = events.some((event) => event.eventType === 'PAYOUT');\r\n      setHasPayoutEvent(payoutExists);\r\n    } catch (error) {\r\n      console.error('Failed to check for payout events:', error);\r\n      setHasPayoutEvent(false);\r\n    }\r\n  };\r\n\r\n  const loadRiskMeasures = async (customValuationDate?: string, forceRefresh: boolean = false) => {\r\n    if (!tradeId) return;\r\n    setLoading(true);\r\n    try {\r\n      // When forceRefresh is true, use customValuationDate directly (even if undefined)\r\n      // Otherwise fall back to state's valuationDate\r\n      const dateToUse = forceRefresh ? customValuationDate : customValuationDate || valuationDate;\r\n      console.log(`🔍 DEBUG loadRiskMeasures called with:`, {\r\n        customValuationDate,\r\n        valuationDate,\r\n        forceRefresh,\r\n        dateToUse,\r\n        tradeId,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      console.log(\r\n        `Loading risk measures for trade ${tradeId} with valuation date: ${dateToUse || 'today'}...`\r\n      );\r\n      const measures = await fetchRiskMeasures(tradeId, dateToUse);\r\n      console.log('Risk measures loaded:', {\r\n        npv: measures.npv,\r\n        currency: measures.currency,\r\n        timestamp: measures.valuationTimestamp,\r\n        loadedAt: new Date().toISOString(),\r\n      });\r\n      setData(measures);\r\n      setError(null);\r\n    } catch (e: any) {\r\n      console.error('Failed to load risk measures:', e);\r\n      setError(e.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadCouponPeriods = async () => {\r\n    if (!tradeId) return;\r\n    try {\r\n      console.log('Loading coupon periods for trade:', tradeId);\r\n      const periods = await lifecycleService.getCouponSchedule(tradeId);\r\n      console.log('Loaded coupon periods:', periods.length, periods);\r\n      setCouponPeriods(periods);\r\n    } catch (e: any) {\r\n      console.error('Failed to load coupon periods:', e);\r\n      setCouponPeriods([]); // Ensure it's set to empty array on error\r\n    }\r\n  };\r\n\r\n  const handlePayCoupon = async (periodId: number, payOnTime: boolean = false) => {\r\n    setPayingPeriodId(periodId);\r\n    try {\r\n      await lifecycleService.payCoupon(tradeId, periodId, payOnTime);\r\n      console.log('Coupon paid successfully, reloading data...');\r\n\r\n      // Reload coupon periods to reflect payment\r\n      await loadCouponPeriods();\r\n\r\n      // Trigger risk recalculation - CRITICAL: Clear old data first to force re-render\r\n      setRecalculating(true);\r\n      setData(null); // Force clear to ensure React detects the change\r\n\r\n      // Wait a bit to ensure backend has processed the payment\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n      await loadRiskMeasures();\r\n      console.log('Risk measures reloaded after coupon payment');\r\n      setRecalculating(false);\r\n    } catch (e: any) {\r\n      alert('Failed to pay coupon: ' + e.message);\r\n      setRecalculating(false);\r\n    } finally {\r\n      setPayingPeriodId(null);\r\n    }\r\n  };\r\n\r\n  const handleUnpayCoupon = async (periodId: number) => {\r\n    setPayingPeriodId(periodId);\r\n    try {\r\n      await lifecycleService.unpayCoupon(tradeId, periodId);\r\n      console.log('Coupon payment cancelled successfully, reloading data...');\r\n\r\n      // Reload coupon periods to reflect cancellation\r\n      await loadCouponPeriods();\r\n\r\n      // Trigger risk recalculation\r\n      setRecalculating(true);\r\n      setData(null);\r\n\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n      await loadRiskMeasures();\r\n      console.log('Risk measures reloaded after coupon cancellation');\r\n      setRecalculating(false);\r\n    } catch (e: any) {\r\n      alert('Failed to cancel coupon payment: ' + e.message);\r\n      setRecalculating(false);\r\n    } finally {\r\n      setPayingPeriodId(null);\r\n    }\r\n  };\r\n\r\n  const handleGenerateSchedule = async () => {\r\n    setGeneratingSchedule(true);\r\n    try {\r\n      await lifecycleService.generateCouponSchedule(tradeId);\r\n      // Reload the schedule\r\n      await loadCouponPeriods();\r\n    } catch (e: any) {\r\n      alert('Failed to generate coupon schedule: ' + e.message);\r\n    } finally {\r\n      setGeneratingSchedule(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to calculate business days offset (simplified - assumes no holidays)\r\n  const getBusinessDaysFromToday = (days: number): string => {\r\n    const today = new Date();\r\n    const target = new Date(today);\r\n\r\n    let addedDays = 0;\r\n    let daysToAdd = days;\r\n\r\n    while (daysToAdd > 0) {\r\n      target.setDate(target.getDate() + 1);\r\n      const dayOfWeek = target.getDay();\r\n      // Skip weekends (0 = Sunday, 6 = Saturday)\r\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\r\n        addedDays++;\r\n        daysToAdd--;\r\n      }\r\n    }\r\n\r\n    return target.toISOString().split('T')[0];\r\n  };\r\n\r\n  const handleQuickValuationDate = async (option: 'today' | 't+1' | 't+7' | 't+45') => {\r\n    let newDate: string | undefined = undefined;\r\n\r\n    switch (option) {\r\n      case 'today':\r\n        newDate = undefined; // undefined means use backend's \"today\"\r\n        break;\r\n      case 't+1':\r\n        newDate = getBusinessDaysFromToday(1);\r\n        break;\r\n      case 't+7':\r\n        newDate = getBusinessDaysFromToday(7);\r\n        break;\r\n      case 't+45':\r\n        newDate = getBusinessDaysFromToday(45);\r\n        break;\r\n    }\r\n\r\n    console.log(`🔍 DEBUG handleQuickValuationDate:`, {\r\n      option,\r\n      newDate,\r\n      currentValuationDate: valuationDate,\r\n    });\r\n\r\n    // Update state first\r\n    setValuationDate(newDate);\r\n\r\n    // Force a fresh fetch by clearing data first\r\n    setData(null);\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    // Small delay to ensure state updates propagate\r\n    await new Promise((resolve) => setTimeout(resolve, 10));\r\n\r\n    // Now fetch with the new date, passing forceRefresh=true to use newDate directly\r\n    await loadRiskMeasures(newDate, true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRiskMeasures();\r\n    loadCouponPeriods();\r\n    checkForPayoutEvent();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [tradeId]);\r\n\r\n  if (!tradeId) return <div className=\"text-fd-text\">No trade selected</div>;\r\n\r\n  // Show payout message if PAYOUT event exists\r\n  if (hasPayoutEvent) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"bg-fd-darker p-6 rounded-md border-2 border-fd-green\">\r\n          <div className=\"flex items-center gap-3 mb-4\">\r\n            <div className=\"w-12 h-12 bg-fd-green/20 rounded-full flex items-center justify-center\">\r\n              <svg\r\n                className=\"w-6 h-6 text-fd-green\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                ></path>\r\n              </svg>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-fd-green font-semibold text-lg\">CDS Protection Paid Out</h3>\r\n              <p className=\"text-fd-text-muted text-sm\">\r\n                A credit event has triggered payout - all risk measures are now zero\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\r\n            <div className=\"bg-fd-dark rounded p-4\">\r\n              <div className=\"text-xs text-fd-text-muted mb-1\">Net Present Value</div>\r\n              <div className=\"text-2xl font-bold text-fd-green font-mono\">$0.00</div>\r\n            </div>\r\n            <div className=\"bg-fd-dark rounded p-4\">\r\n              <div className=\"text-xs text-fd-text-muted mb-1\">Jump-to-Default (JTD)</div>\r\n              <div className=\"text-2xl font-bold text-fd-green font-mono\">$0.00</div>\r\n            </div>\r\n            <div className=\"bg-fd-dark rounded p-4\">\r\n              <div className=\"text-xs text-fd-text-muted mb-1\">Fair Spread</div>\r\n              <div className=\"text-2xl font-bold text-fd-green font-mono\">0 bps</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-6 bg-fd-dark rounded p-4\">\r\n            <div className=\"flex items-start gap-2\">\r\n              <svg\r\n                className=\"w-5 h-5 text-fd-green mt-0.5 flex-shrink-0\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                ></path>\r\n              </svg>\r\n              <div className=\"text-sm text-fd-text-muted\">\r\n                <p className=\"mb-2\">\r\n                  This trade has experienced a credit event (Bankruptcy or Restructuring) resulting\r\n                  in payout. The CDS contract has fulfilled its protection obligation.\r\n                </p>\r\n                <p>\r\n                  All risk exposures have been reduced to zero as the contract has settled and no\r\n                  further obligations remain.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Paid Coupons Information */}\r\n          <div className=\"mt-6 bg-fd-dark rounded p-4\">\r\n            <h4 className=\"text-fd-text font-semibold mb-3 flex items-center gap-2\">\r\n              <svg\r\n                className=\"w-5 h-5 text-fd-green\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\"\r\n                ></path>\r\n              </svg>\r\n              Coupon Payment History\r\n            </h4>\r\n            {couponPeriods.length === 0 ? (\r\n              <p className=\"text-fd-text-muted text-sm\">\r\n                No coupon schedule was generated for this trade.\r\n              </p>\r\n            ) : (\r\n              (() => {\r\n                const paidCoupons = couponPeriods.filter((p) => p.paid === true);\r\n                if (paidCoupons.length === 0) {\r\n                  return (\r\n                    <p className=\"text-fd-text-muted text-sm\">\r\n                      No coupons were paid before the credit event occurred.\r\n                    </p>\r\n                  );\r\n                }\r\n                return (\r\n                  <div className=\"space-y-2\">\r\n                    <p className=\"text-fd-text text-sm mb-3\">\r\n                      {paidCoupons.length} coupon{paidCoupons.length > 1 ? 's' : ''} paid before\r\n                      credit event:\r\n                    </p>\r\n                    <div className=\"space-y-2 max-h-48 overflow-y-auto\">\r\n                      {paidCoupons.map((period, index) => (\r\n                        <div\r\n                          key={period.id}\r\n                          className=\"bg-fd-darker rounded p-3 flex items-center justify-between border border-fd-border\"\r\n                        >\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <svg\r\n                                className=\"w-4 h-4 text-fd-green\"\r\n                                fill=\"currentColor\"\r\n                                viewBox=\"0 0 20 20\"\r\n                              >\r\n                                <path\r\n                                  fillRule=\"evenodd\"\r\n                                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\r\n                                  clipRule=\"evenodd\"\r\n                                ></path>\r\n                              </svg>\r\n                              <span className=\"text-fd-text text-sm font-medium\">\r\n                                Period #{index + 1}\r\n                              </span>\r\n                              <span className=\"text-fd-text-muted text-xs\">\r\n                                ({new Date(period.periodStartDate).toLocaleDateString()} -{' '}\r\n                                {new Date(period.periodEndDate).toLocaleDateString()})\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"text-xs text-fd-text-muted mt-1\">\r\n                              Payment Date: {new Date(period.paymentDate).toLocaleDateString()}\r\n                              {period.paidAt && (\r\n                                <span className=\"ml-2 text-fd-green\">\r\n                                  ✓ Paid: {new Date(period.paidAt).toLocaleDateString()}\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <div className=\"text-fd-green font-mono font-semibold\">\r\n                              {new Intl.NumberFormat('en-US', {\r\n                                style: 'currency',\r\n                                currency: data?.currency || 'USD',\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                              }).format(period.couponAmount || 0)}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })()\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"flex items-center gap-2 text-fd-text\">\r\n        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-fd-green\"></div>\r\n        <span>Calculating risk measures with ORE...</span>\r\n      </div>\r\n    );\r\n  if (error)\r\n    return (\r\n      <div className=\"text-red-400\" role=\"alert\">\r\n        Failed: {error}\r\n      </div>\r\n    );\r\n  if (!data) return null;\r\n\r\n  const formatValue = (value: number | null | undefined, decimals: number = 2): string => {\r\n    if (value === null || value === undefined) return '-';\r\n    return typeof value === 'number'\r\n      ? value.toLocaleString(undefined, {\r\n          minimumFractionDigits: decimals,\r\n          maximumFractionDigits: decimals,\r\n        })\r\n      : String(value);\r\n  };\r\n\r\n  const formatCurrency = (value: number | null | undefined, currency: string = 'USD'): string => {\r\n    if (value === null || value === undefined) return '-';\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: currency,\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    }).format(value);\r\n  };\r\n\r\n  const formatBasisPoints = (value: number | null | undefined): string => {\r\n    if (value === null || value === undefined) return '-';\r\n    return (value * 10000).toFixed(2) + ' bps';\r\n  };\r\n\r\n  // Calculate Risky PV01 if ORE doesn't provide it\r\n  // Formula: |Premium Leg NPV + Accrued Premium| / (Notional × Running Spread)\r\n  const calculateRiskyPV01 = (): number | null => {\r\n    // If ORE provided it, use that\r\n    if (data.riskyAnnuity !== null && data.riskyAnnuity !== undefined) {\r\n      return data.riskyAnnuity;\r\n    }\r\n\r\n    // Otherwise calculate it from available data\r\n    const premiumLegNPV = data.premiumLegNPVClean || 0;\r\n    const accruedPremium = data.accruedPremium || 0;\r\n    const notional = data.currentNotional || data.originalNotional;\r\n    const runningSpread = data.fairSpreadClean; // Fair spread in decimal form\r\n\r\n    if (!notional || !runningSpread || runningSpread === 0) {\r\n      return null;\r\n    }\r\n\r\n    const riskyPV01 = Math.abs(premiumLegNPV + accruedPremium) / (notional * runningSpread);\r\n    return riskyPV01;\r\n  };\r\n\r\n  const riskyPV01 = calculateRiskyPV01();\r\n\r\n  // Find the next unpaid coupon (earliest payment date among unpaid)\r\n  const getNextUnpaidCoupon = (): CouponPeriod | null => {\r\n    const unpaidCoupons = couponPeriods\r\n      .filter((p) => !p.paid)\r\n      .sort((a, b) => new Date(a.paymentDate).getTime() - new Date(b.paymentDate).getTime());\r\n    return unpaidCoupons.length > 0 ? unpaidCoupons[0] : null;\r\n  };\r\n\r\n  // Find the most recently paid coupon (latest payment date among paid coupons)\r\n  const getMostRecentlyPaidCoupon = (): CouponPeriod | null => {\r\n    const paidCoupons = couponPeriods\r\n      .filter((p) => p.paid)\r\n      .sort((a, b) => new Date(b.paymentDate).getTime() - new Date(a.paymentDate).getTime());\r\n    return paidCoupons.length > 0 ? paidCoupons[0] : null;\r\n  };\r\n\r\n  const nextUnpaidCoupon = getNextUnpaidCoupon();\r\n  const mostRecentlyPaidCoupon = getMostRecentlyPaidCoupon();\r\n\r\n  const canPayCoupon = (period: CouponPeriod): boolean => {\r\n    if (period.paid) return false;\r\n    if (!nextUnpaidCoupon) return false;\r\n    return period.id === nextUnpaidCoupon.id;\r\n  };\r\n\r\n  const canUnpayCoupon = (period: CouponPeriod): boolean => {\r\n    if (!period.paid) return false;\r\n    if (!mostRecentlyPaidCoupon) return false;\r\n    return period.id === mostRecentlyPaidCoupon.id;\r\n  };\r\n\r\n  // Calculate coupon statistics\r\n  const totalCoupons = couponPeriods.length;\r\n  const paidCoupons = couponPeriods.filter((p) => p.paid).length;\r\n  const totalPaidAmount = couponPeriods\r\n    .filter((p) => p.paid && p.couponAmount)\r\n    .reduce((sum, p) => sum + (p.couponAmount || 0), 0);\r\n\r\n  // Derive frequency and maturity from coupon periods\r\n  const getScheduleDescription = () => {\r\n    if (couponPeriods.length === 0) return '';\r\n\r\n    // Get maturity from last period\r\n    const lastPeriod = couponPeriods[couponPeriods.length - 1];\r\n    const maturityDate = new Date(lastPeriod.periodEndDate);\r\n    const maturityYear = maturityDate.getFullYear();\r\n    const maturityMonth = maturityDate.toLocaleDateString('en-US', { month: 'short' });\r\n\r\n    // Use trade's premium frequency if available\r\n    let frequency = 'Periodic';\r\n    if (trade?.premiumFrequency) {\r\n      // Map the database values to display names\r\n      const frequencyMap: Record<string, string> = {\r\n        MONTHLY: 'Monthly',\r\n        QUARTERLY: 'Quarterly',\r\n        SEMI_ANNUAL: 'Semi-annual',\r\n        ANNUAL: 'Annual',\r\n      };\r\n      frequency = frequencyMap[trade.premiumFrequency] || trade.premiumFrequency;\r\n    } else if (couponPeriods.length > 1) {\r\n      // Fall back to calculating from payment date intervals if trade data not available\r\n      const firstPayment = new Date(couponPeriods[0].paymentDate);\r\n      const secondPayment = new Date(couponPeriods[1].paymentDate);\r\n      const daysDiff = Math.round(\r\n        (secondPayment.getTime() - firstPayment.getTime()) / (1000 * 60 * 60 * 24)\r\n      );\r\n\r\n      // More lenient ranges for CDS IMM schedules\r\n      // Quarterly: ~91 days (3 months)\r\n      // Semi-annual: ~182 days (6 months)\r\n      // Monthly: ~30 days\r\n      // Annual: ~365 days\r\n      if (daysDiff >= 25 && daysDiff <= 35) frequency = 'Monthly';\r\n      else if (daysDiff >= 80 && daysDiff <= 100) frequency = 'Quarterly';\r\n      else if (daysDiff >= 170 && daysDiff <= 195) frequency = 'Semi-annual';\r\n      else if (daysDiff >= 350 && daysDiff <= 375) frequency = 'Annual';\r\n    }\r\n\r\n    return `${frequency} until ${maturityMonth} ${maturityYear}`;\r\n  };\r\n\r\n  const hasCashflows = data.cashflows && data.cashflows.length > 0;\r\n  const hasCDSMetrics = data.fairSpreadClean !== null || data.protectionLegNPV !== null;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Core ORE Valuation */}\r\n      <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n        <div className=\"flex justify-between items-start mb-3\">\r\n          <h3 className=\"text-fd-green font-semibold flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z\"\r\n              ></path>\r\n            </svg>\r\n            ORE Valuation\r\n          </h3>\r\n\r\n          {/* Valuation Date Quick Selector */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-xs text-fd-text-muted\">Valuation Date:</span>\r\n            <div className=\"flex gap-1\">\r\n              <button\r\n                onClick={() => handleQuickValuationDate('today')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === undefined || valuationDate === ''\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                Today\r\n              </button>\r\n              <button\r\n                onClick={() => handleQuickValuationDate('t+1')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === getBusinessDaysFromToday(1)\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                T+1\r\n              </button>\r\n              <button\r\n                onClick={() => handleQuickValuationDate('t+7')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === getBusinessDaysFromToday(7)\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                T+7\r\n              </button>\r\n              <button\r\n                onClick={() => handleQuickValuationDate('t+45')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === getBusinessDaysFromToday(45)\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                T+45\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div className=\"bg-fd-dark rounded p-3\">\r\n            <div className=\"text-xs text-fd-text-muted mb-1\">Net Present Value</div>\r\n            <div className=\"text-2xl font-bold text-fd-green font-mono\">\r\n              {formatCurrency(data.npv, data.currency)}\r\n            </div>\r\n          </div>\r\n          <div className=\"bg-fd-dark rounded p-3\">\r\n            <div className=\"text-xs text-fd-text-muted mb-1\">Currency</div>\r\n            <div className=\"text-2xl font-bold text-fd-text font-mono\">\r\n              {data.currency || 'USD'}\r\n            </div>\r\n          </div>\r\n          <div className=\"bg-fd-dark rounded p-3\">\r\n            <div className=\"text-xs text-fd-text-muted mb-1\">Valuation Time</div>\r\n            <div className=\"text-sm text-fd-text\">\r\n              {new Date(data.valuationTimestamp).toLocaleString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* CDS-Specific Metrics (if available) */}\r\n      {hasCDSMetrics && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\"\r\n              ></path>\r\n            </svg>\r\n            CDS Valuation Breakdown\r\n          </h3>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 text-sm\">\r\n            {data.jtd !== null && data.jtd !== undefined && (\r\n              <div className=\"md:col-span-2 lg:col-span-4 bg-fd-dark rounded p-3 border-l-4 border-fd-green\">\r\n                <span className=\"text-fd-text-muted\">Jump-to-Default (JTD) Exposure:</span>\r\n                <div className=\"font-mono text-fd-green font-bold text-xl mt-1\">\r\n                  {formatCurrency(data.jtd, data.currency)}\r\n                </div>\r\n                <div className=\"text-xs text-fd-text-muted mt-1\">\r\n                  Potential loss if reference entity defaults immediately\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Fair Spread (Clean):</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatBasisPoints(data.fairSpreadClean)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Fair Spread (Dirty):</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatBasisPoints(data.fairSpreadDirty)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Protection Leg NPV:</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatCurrency(data.protectionLegNPV, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Premium Leg NPV:</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatCurrency(data.premiumLegNPVClean, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Accrued Premium:</span>\r\n              <div className=\"font-mono text-fd-text\">\r\n                {formatCurrency(data.accruedPremium, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Upfront Premium:</span>\r\n              <div className=\"font-mono text-fd-text\">\r\n                {formatCurrency(data.upfrontPremium, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Coupon Leg BPS:</span>\r\n              <div className=\"font-mono text-fd-text\">{formatValue(data.couponLegBPS, 2)}</div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Current Notional:</span>\r\n              <div className=\"font-mono text-fd-text\">\r\n                {formatCurrency(data.currentNotional, data.currency)}\r\n              </div>\r\n            </div>\r\n            {riskyPV01 !== null && (\r\n              <div>\r\n                <span className=\"text-fd-text-muted\">Risky PV01:</span>\r\n                <div className=\"font-mono text-fd-text font-semibold text-fd-green\">\r\n                  {formatValue(riskyPV01, 6)}\r\n                </div>\r\n                <div className=\"text-xs text-fd-text-muted mt-0.5\">\r\n                  {data.riskyAnnuity ? 'From ORE' : 'Calculated'}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {trade?.recoveryRate !== undefined && trade?.recoveryRate !== null && (\r\n              <div>\r\n                <span className=\"text-fd-text-muted\">Recovery Rate:</span>\r\n                <div className=\"font-mono text-fd-text font-semibold\">{trade.recoveryRate}%</div>\r\n              </div>\r\n            )}\r\n            {paidCoupons > 0 && (\r\n              <div>\r\n                <span className=\"text-fd-text-muted\">Total Paid Coupons:</span>\r\n                <div className=\"font-mono text-fd-green font-semibold\">\r\n                  {formatCurrency(totalPaidAmount, data.currency)}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Credit Risk Profile (if available) */}\r\n      {data.defaultProbabilities && data.defaultProbabilities.length > 0 && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-1.964-1.333-2.732 0L3.268 16c-.77 1.333.192 3 1.732 3z\"\r\n              ></path>\r\n            </svg>\r\n            Credit Risk Profile\r\n          </h3>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-fd-text mb-2\">\r\n                Default Probabilities by Period\r\n              </h4>\r\n              <div className=\"space-y-1 text-sm\">\r\n                {data.defaultProbabilities.slice(0, 6).map((prob, idx) => (\r\n                  <div key={idx} className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Period {idx + 1}:</span>\r\n                    <span className=\"font-mono text-fd-text\">{(prob * 100).toFixed(2)}%</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {data.expectedLosses && data.expectedLosses.length > 0 && (\r\n              <div>\r\n                <h4 className=\"text-sm font-medium text-fd-text mb-2\">Expected Losses by Period</h4>\r\n                <div className=\"space-y-1 text-sm\">\r\n                  {data.expectedLosses.slice(0, 6).map((loss, idx) => (\r\n                    <div key={idx} className=\"flex justify-between\">\r\n                      <span className=\"text-fd-text-muted\">Period {idx + 1}:</span>\r\n                      <span className=\"font-mono text-fd-text\">\r\n                        {formatCurrency(loss, data.currency)}\r\n                      </span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Coupon Payment Schedule */}\r\n      {couponPeriods.length > 0 && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z\"\r\n              ></path>\r\n            </svg>\r\n            Coupon Payment Schedule\r\n            <span className=\"ml-auto text-sm font-normal text-fd-text-muted\">\r\n              {paidCoupons} of {totalCoupons} paid\r\n            </span>\r\n            {recalculating && (\r\n              <span className=\"ml-2 text-sm font-normal text-fd-text-muted flex items-center gap-1\">\r\n                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-fd-green\"></div>\r\n                Recalculating risk...\r\n              </span>\r\n            )}\r\n          </h3>\r\n\r\n          {/* Schedule description */}\r\n          <div className=\"mb-3 text-sm text-fd-text-muted italic\">{getScheduleDescription()}</div>\r\n\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full text-sm text-fd-text\">\r\n              <thead>\r\n                <tr className=\"text-left border-b-2 border-fd-border bg-fd-dark\">\r\n                  <th className=\"py-2 px-3 font-medium\">Payment Date</th>\r\n                  <th className=\"py-2 px-3 font-medium\">Period</th>\r\n                  <th className=\"py-2 px-3 font-medium text-right\">Days</th>\r\n                  <th className=\"py-2 px-3 font-medium text-right\">Notional</th>\r\n                  <th className=\"py-2 px-3 font-medium text-right\">Coupon Amount</th>\r\n                  <th className=\"py-2 px-3 font-medium\">Status</th>\r\n                  <th className=\"py-2 px-3 font-medium text-center\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {couponPeriods.map((period) => (\r\n                  <tr\r\n                    key={period.id}\r\n                    className={`border-b border-fd-border hover:bg-fd-dark transition-colors ${period.paid ? 'opacity-60' : ''}`}\r\n                  >\r\n                    <td className=\"py-2 px-3 font-mono\">\r\n                      {new Date(period.paymentDate).toLocaleDateString()}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 text-fd-text-muted\">\r\n                      {new Date(period.periodStartDate).toLocaleDateString()} →{' '}\r\n                      {new Date(period.periodEndDate).toLocaleDateString()}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 font-mono text-right\">{period.accrualDays}</td>\r\n                    <td className=\"py-2 px-3 font-mono text-right\">\r\n                      {formatCurrency(period.notionalAmount, data?.currency)}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 font-mono text-right\">\r\n                      {period.couponAmount\r\n                        ? formatCurrency(period.couponAmount, data?.currency)\r\n                        : '-'}\r\n                    </td>\r\n                    <td className=\"py-2 px-3\">\r\n                      {period.paid ? (\r\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-500/20 text-green-400\">\r\n                          <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                            <path\r\n                              fillRule=\"evenodd\"\r\n                              d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\r\n                              clipRule=\"evenodd\"\r\n                            />\r\n                          </svg>\r\n                          Paid\r\n                        </span>\r\n                      ) : (\r\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-500/20 text-yellow-400\">\r\n                          <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                            <path\r\n                              fillRule=\"evenodd\"\r\n                              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\"\r\n                              clipRule=\"evenodd\"\r\n                            />\r\n                          </svg>\r\n                          Unpaid\r\n                        </span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 text-center\">\r\n                      {/* Show Cancel button for the most recently paid coupon */}\r\n                      {period.paid && canUnpayCoupon(period) && !isTradeFinalized && (\r\n                        <div className=\"flex flex-col gap-1 items-center\">\r\n                          <button\r\n                            onClick={() => handleUnpayCoupon(period.id)}\r\n                            disabled={payingPeriodId === period.id || recalculating}\r\n                            title=\"Cancel this payment (for demo)\"\r\n                            className=\"px-2 py-1 text-xs bg-red-600 text-white rounded font-medium hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors w-full\"\r\n                          >\r\n                            {payingPeriodId === period.id ? (\r\n                              <span className=\"flex items-center gap-1 justify-center\">\r\n                                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white\"></div>\r\n                              </span>\r\n                            ) : (\r\n                              '↩ Cancel Payment'\r\n                            )}\r\n                          </button>\r\n                          <span className=\"text-xs text-fd-text-muted\">\r\n                            {new Date(period.paidAt!).toLocaleString()}\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n\r\n                      {/* Show payment timestamp for other paid coupons */}\r\n                      {period.paid && !canUnpayCoupon(period) && period.paidAt && (\r\n                        <span className=\"text-xs text-fd-text-muted\">\r\n                          {new Date(period.paidAt).toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                      \r\n                      {/* Show payment timestamp for finalized trades (no cancel button) */}\r\n                      {period.paid && canUnpayCoupon(period) && isTradeFinalized && (\r\n                        <span className=\"text-xs text-fd-text-muted\">\r\n                          {new Date(period.paidAt!).toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                      \r\n                      {/* Show payment buttons for unpaid coupons */}\r\n                      {!period.paid && !isTradeFinalized && (\r\n                        <div className=\"flex gap-1 justify-center\">\r\n                          <button\r\n                            onClick={() => handlePayCoupon(period.id, true)}\r\n                            disabled={\r\n                              !canPayCoupon(period) || payingPeriodId === period.id || recalculating\r\n                            }\r\n                            title={\r\n                              !canPayCoupon(period)\r\n                                ? 'You must pay earlier coupons first'\r\n                                : 'Pay on the scheduled payment date'\r\n                            }\r\n                            className=\"px-2 py-1 text-xs bg-fd-green text-fd-dark rounded font-medium hover:bg-fd-green-hover disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                          >\r\n                            {payingPeriodId === period.id ? (\r\n                              <span className=\"flex items-center gap-1\">\r\n                                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-fd-dark\"></div>\r\n                              </span>\r\n                            ) : canPayCoupon(period) ? (\r\n                              'Pay On Time'\r\n                            ) : (\r\n                              '🔒 Locked'\r\n                            )}\r\n                          </button>\r\n                          <button\r\n                            onClick={() => handlePayCoupon(period.id, false)}\r\n                            disabled={\r\n                              !canPayCoupon(period) || payingPeriodId === period.id || recalculating\r\n                            }\r\n                            title={\r\n                              !canPayCoupon(period)\r\n                                ? 'You must pay earlier coupons first'\r\n                                : 'Pay now (backdated)'\r\n                            }\r\n                            className=\"px-2 py-1 text-xs bg-blue-600 text-white rounded font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                          >\r\n                            {canPayCoupon(period) ? 'Pay Now' : '🔒'}\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {/* Show locked message for finalized trades */}\r\n                      {!period.paid && isTradeFinalized && (\r\n                        <span className=\"text-xs text-red-400\">\r\n                          🔒 Trade {trade?.tradeStatus.replace(/_/g, ' ').toLowerCase()}\r\n                        </span>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className=\"mt-3 text-xs text-fd-text-muted\">\r\n            <p>\r\n              💡 <strong>Tip:</strong> Coupons must be paid sequentially by payment date. Only the\r\n              next unpaid coupon can be paid — earlier coupons must be settled before later ones.\r\n              <br />• <strong>Pay On Time:</strong> Marks the coupon as paid on its scheduled\r\n              payment date (no accrued premium).\r\n              <br />• <strong>Pay Now:</strong> Marks the coupon as paid today (shows accrued\r\n              premium if applicable).\r\n              <br />• <strong>Cancel:</strong> Reverts the most recently paid coupon (for demo\r\n              purposes only).\r\n              <br />\r\n              Paying or canceling a coupon will trigger a risk recalculation.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* No coupon schedule message */}\r\n      {couponPeriods.length === 0 && data && !loading && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-dashed border-fd-border text-center\">\r\n          <svg\r\n            className=\"w-12 h-12 text-fd-text-muted mx-auto mb-3\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n            ></path>\r\n          </svg>\r\n          <p className=\"text-fd-text-muted mb-4\">\r\n            No coupon schedule generated for this trade yet.\r\n          </p>\r\n          {isTradeFinalized ? (\r\n            <p className=\"text-red-400 text-sm\">\r\n              Cannot generate schedule - trade is {trade?.tradeStatus.replace(/_/g, ' ').toLowerCase()}\r\n            </p>\r\n          ) : (\r\n            <button\r\n              onClick={handleGenerateSchedule}\r\n              disabled={generatingSchedule}\r\n              className=\"px-4 py-2 bg-fd-green text-fd-dark rounded font-medium hover:bg-fd-green-hover disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n            >\r\n              {generatingSchedule ? (\r\n                <span className=\"flex items-center gap-2\">\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-fd-dark\"></div>\r\n                  Generating Schedule...\r\n                </span>\r\n              ) : (\r\n                'Generate Coupon Schedule'\r\n              )}\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Cashflow Schedule - Hidden: Merged with Coupon Payment Schedule above */}\r\n      {/* hasCashflows && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n            </svg>\r\n            Cashflow Schedule\r\n            <span className=\"ml-auto text-sm font-normal text-fd-text-muted\">\r\n              {data.cashflows!.length} payment{data.cashflows!.length !== 1 ? 's' : ''}\r\n            </span>\r\n          </h3>\r\n          \r\n          <CashflowScheduleTable cashflows={data.cashflows!} />\r\n        </div>\r\n      ) */}\r\n\r\n      {/* No data message */}\r\n      {!hasCashflows && !hasCDSMetrics && (\r\n        <div className=\"bg-fd-darker p-6 rounded-md border border-dashed border-fd-border text-center\">\r\n          <svg\r\n            className=\"w-12 h-12 text-fd-text-muted mx-auto mb-3\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n            ></path>\r\n          </svg>\r\n          <p className=\"text-fd-text-muted\">\r\n            Additional CDS metrics and cashflow schedule will appear here once available.\r\n          </p>\r\n          <p className=\"text-fd-text-muted text-sm mt-2\">\r\n            Currently showing NPV calculated by ORE.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RiskMeasuresPanel;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\ScenarioRunModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\__tests__\\RegressionStatusBadge.test.tsx","messages":[{"ruleId":"testing-library/prefer-screen-queries","severity":2,"message":"Avoid destructuring queries from `render` result, use `screen.getByText` instead","line":8,"column":10,"nodeType":"Identifier","messageId":"preferScreenQueries","endLine":8,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport RegressionStatusBadge from '../../RegressionStatusBadge';\r\n\r\ntest('renders regression status badge', () => {\r\n  // eslint-disable-next-line testing-library/prefer-screen-queries\r\n  const { getByText } = render(<RegressionStatusBadge status=\"PASS\" />);\r\n  expect(getByText(/Regression: PASS/)).toBeInTheDocument();\r\n});","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\services-status-modal\\ServicesStatusModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\settlement-view\\SettlementView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\top-bar\\TopBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\trade-detail-modal\\TradeDetailModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\config\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\data\\referenceData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\data\\simulationGlossary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\hooks\\useSimulationPolling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\basketService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\bondService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\cdsTradeService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\creditEventService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\lifecycleService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\portfolioService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\risk\\riskService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\risk\\riskTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\simulationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\types\\basket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\types\\lifecycle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]