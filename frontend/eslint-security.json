[{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSubmitting' is assigned a value but never used.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'submitError' is assigned a value but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\nimport TopBar from './components/top-bar/TopBar';\r\nimport CDSTradeForm from './components/cds-trade-form/CDSTradeForm';\r\nimport ConfirmationModal from './components/confirmation-modal/ConfirmationModal';\r\nimport CDSBlotter, { CDSBlotterRef } from './components/cds-blotter/CDSBlotter';\r\nimport TradeDetailModal from './components/trade-detail-modal/TradeDetailModal';\r\nimport PortfolioPage from './components/portfolio/PortfolioPage';\r\nimport BondPage from './components/bond/BondPage';\r\nimport BasketPage from './components/basket/BasketPage';\r\nimport { CDSTrade } from './data/referenceData';\r\nimport { cdsTradeService, CDSTradeRequest, CDSTradeResponse } from './services/cdsTradeService';\r\n\r\ntype ViewMode = 'form' | 'blotter' | 'portfolios' | 'bonds' | 'baskets';\r\n\r\nfunction App() {\r\n  const [currentView, setCurrentView] = useState<ViewMode>('form');\r\n  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\r\n  const [bookedTrade, setBookedTrade] = useState<CDSTradeResponse | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitError, setSubmitError] = useState<string | null>(null);\r\n  const [selectedTrade, setSelectedTrade] = useState<CDSTradeResponse | null>(null);\r\n  const [isTradeDetailOpen, setIsTradeDetailOpen] = useState(false);\r\n  const blotterRef = useRef<CDSBlotterRef>(null);\r\n\r\n  const handleTradeSubmit = async (trade: CDSTrade) => {\r\n    setIsSubmitting(true);\r\n    setSubmitError(null);\r\n\r\n    try {\r\n      const tradeRequest: CDSTradeRequest = {\r\n        referenceEntity: trade.referenceEntity,\r\n        notionalAmount: trade.notionalAmount,\r\n        spread: trade.spread,\r\n        maturityDate: trade.maturityDate,\r\n        effectiveDate: trade.effectiveDate,\r\n        counterparty: trade.counterparty,\r\n        tradeDate: trade.tradeDate,\r\n        currency: trade.currency,\r\n        premiumFrequency: trade.premiumFrequency,\r\n        dayCountConvention: trade.dayCountConvention,\r\n        buySellProtection: trade.buySellProtection,\r\n        restructuringClause: trade.restructuringClause,\r\n        paymentCalendar: trade.paymentCalendar,\r\n        accrualStartDate: trade.accrualStartDate,\r\n        tradeStatus: trade.tradeStatus,\r\n        recoveryRate: trade.recoveryRate,\r\n        settlementType: trade.settlementType,\r\n        obligation: trade.obligation\r\n      };\r\n\r\n      const savedTrade = await cdsTradeService.createTrade(tradeRequest);\r\n\r\n      setBookedTrade(savedTrade);\r\n      setIsConfirmationOpen(true);\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      setSubmitError(`Failed to book trade: ${errorMessage}`);\r\n      alert(`Error booking trade: ${errorMessage}`);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseConfirmation = () => {\r\n    setIsConfirmationOpen(false);\r\n    setBookedTrade(null);\r\n  };\r\n\r\n  const handleTradeSelect = (trade: CDSTradeResponse) => {\r\n    setSelectedTrade(trade);\r\n    setIsTradeDetailOpen(true);\r\n  };\r\n\r\n  const handleCloseTradeDetail = () => {\r\n    setIsTradeDetailOpen(false);\r\n    setSelectedTrade(null);\r\n  };\r\n\r\n  const handleTradesUpdated = (affectedTradeIds?: number[]) => {\r\n    // When trades are updated (e.g., credit event propagated), refresh the blotter\r\n    if (blotterRef.current) {\r\n      blotterRef.current.refreshTrades();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-fd-dark\">\r\n      <TopBar />\r\n\r\n      {/* Sub-navigation bar */}\r\n      <div className=\"bg-fd-darker border-b border-fd-border\">\r\n        <div className=\"px-8 py-4\">\r\n          <div className=\"flex items-center space-x-6\">\r\n            <button\r\n              onClick={() => setCurrentView('form')}\r\n              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                currentView === 'form'\r\n                  ? 'bg-fd-green text-fd-dark'\r\n                  : 'text-fd-text hover:text-fd-green hover:bg-fd-dark'\r\n              }`}\r\n            >\r\n              New Single-Name CDS\r\n            </button>\r\n            <button\r\n              onClick={() => setCurrentView('blotter')}\r\n              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                currentView === 'blotter'\r\n                  ? 'bg-fd-green text-fd-dark'\r\n                  : 'text-fd-text hover:text-fd-green hover:bg-fd-dark'\r\n              }`}\r\n            >\r\n              Single-Name CDS Blotter\r\n            </button>\r\n            <button\r\n              onClick={() => setCurrentView('bonds')}\r\n              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                currentView === 'bonds'\r\n                  ? 'bg-fd-green text-fd-dark'\r\n                  : 'text-fd-text hover:text-fd-green hover:bg-fd-dark'\r\n              }`}\r\n            >\r\n              Corporate Bonds\r\n            </button>\r\n            <button\r\n              onClick={() => setCurrentView('baskets')}\r\n              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                currentView === 'baskets'\r\n                  ? 'bg-fd-green text-fd-dark'\r\n                  : 'text-fd-text hover:text-fd-green hover:bg-fd-dark'\r\n              }`}\r\n            >\r\n              Basket Derivatives\r\n            </button>\r\n            <button\r\n              onClick={() => setCurrentView('portfolios')}\r\n              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                currentView === 'portfolios'\r\n                  ? 'bg-fd-green text-fd-dark'\r\n                  : 'text-fd-text hover:text-fd-green hover:bg-fd-dark'\r\n              }`}\r\n            >\r\n              CDS Portfolios\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"p-8\">\r\n        {/* Content based on current view */}\r\n        {currentView === 'form' ? (\r\n          <CDSTradeForm onSubmit={handleTradeSubmit} />\r\n        ) : currentView === 'blotter' ? (\r\n          <CDSBlotter ref={blotterRef} onTradeSelect={handleTradeSelect} />\r\n        ) : currentView === 'portfolios' ? (\r\n          <PortfolioPage />\r\n        ) : currentView === 'baskets' ? (\r\n          <BasketPage />\r\n        ) : (\r\n          <BondPage />\r\n        )}\r\n\r\n        <ConfirmationModal\r\n          isOpen={isConfirmationOpen}\r\n          trade={bookedTrade}\r\n          onClose={handleCloseConfirmation}\r\n        />\r\n\r\n        <TradeDetailModal\r\n          isOpen={isTradeDetailOpen}\r\n          trade={selectedTrade}\r\n          onClose={handleCloseTradeDetail}\r\n          onTradesUpdated={handleTradesUpdated}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketCreationModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":150,"column":9,"nodeType":"MemberExpression","endLine":150,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":160,"column":5,"nodeType":"MemberExpression","endLine":160,"endColumn":19},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":160,"column":27,"nodeType":"MemberExpression","endLine":160,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":164,"column":9,"nodeType":"MemberExpression","endLine":164,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":196,"column":19,"nodeType":"MemberExpression","endLine":196,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":473,"column":42,"nodeType":"MemberExpression","endLine":473,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Basket, BasketType, BasketConstituent } from '../../types/basket';\r\nimport { basketService } from '../../services/basketService';\r\nimport { REFERENCE_ENTITIES } from '../../data/referenceData';\r\n\r\ninterface BasketCreationModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSuccess: (basket: Basket) => void;\r\n}\r\n\r\ninterface FormErrors {\r\n  [key: string]: string;\r\n}\r\n\r\nconst BASKET_TYPE_OPTIONS = [\r\n  { value: 'FIRST_TO_DEFAULT', label: 'First-to-Default (FTD)' },\r\n  { value: 'NTH_TO_DEFAULT', label: 'N-th-to-Default' },\r\n  { value: 'TRANCHETTE', label: 'Tranchette (Loss Slice)' },\r\n];\r\n\r\nconst PREMIUM_FREQUENCY_OPTIONS = [\r\n  { value: 'QUARTERLY', label: 'Quarterly' },\r\n  { value: 'SEMI_ANNUAL', label: 'Semi-Annual' },\r\n  { value: 'ANNUAL', label: 'Annual' },\r\n];\r\n\r\nconst DAY_COUNT_OPTIONS = [\r\n  { value: 'ACT_360', label: 'ACT/360' },\r\n  { value: 'ACT_365', label: 'ACT/365' },\r\n  { value: 'THIRTY_360', label: '30/360' },\r\n];\r\n\r\nconst CURRENCY_OPTIONS = ['USD', 'EUR', 'GBP', 'JPY'];\r\n\r\nconst SENIORITY_OPTIONS = [\r\n  { value: 'SR_UNSEC', label: 'Senior Unsecured' },\r\n  { value: 'SR_SEC', label: 'Senior Secured' },\r\n  { value: 'SUBORD', label: 'Subordinated' },\r\n];\r\n\r\nconst BasketCreationModal: React.FC<BasketCreationModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSuccess,\r\n}) => {\r\n  const [formData, setFormData] = useState<Partial<Basket>>({\r\n    type: 'FIRST_TO_DEFAULT',\r\n    currency: 'USD',\r\n    premiumFrequency: 'QUARTERLY',\r\n    dayCount: 'ACT_360',\r\n    constituents: [],\r\n  });\r\n\r\n  const [constituents, setConstituents] = useState<Partial<BasketConstituent>[]>([]);\r\n  const [errors, setErrors] = useState<FormErrors>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Calculate normalized weights dynamically\r\n  const calculateNormalizedWeights = () => {\r\n    const totalWeight = constituents.reduce((sum, c) => sum + (c.weight || 0), 0);\r\n\r\n    if (totalWeight === 0) {\r\n      // Equal weights if none provided\r\n      return constituents.map(() => 1 / constituents.length);\r\n    }\r\n\r\n    // Normalize to sum to 1\r\n    return constituents.map((c) => (c.weight || 0) / totalWeight);\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: FormErrors = {};\r\n\r\n    if (!formData.name?.trim()) {\r\n      newErrors.name = 'Basket name is required';\r\n    }\r\n\r\n    if (!formData.type) {\r\n      newErrors.type = 'Basket type is required';\r\n    }\r\n\r\n    if (formData.type === 'NTH_TO_DEFAULT' && (!formData.nth || formData.nth < 1)) {\r\n      newErrors.nth = 'N-th value must be >= 1';\r\n    }\r\n\r\n    if (formData.type === 'NTH_TO_DEFAULT' && formData.nth && formData.nth > constituents.length) {\r\n      newErrors.nth = `N-th value cannot exceed number of constituents (${constituents.length})`;\r\n    }\r\n\r\n    if (formData.type === 'TRANCHETTE') {\r\n      if (\r\n        formData.attachmentPoint === undefined ||\r\n        formData.attachmentPoint < 0 ||\r\n        formData.attachmentPoint > 1\r\n      ) {\r\n        newErrors.attachmentPoint = 'Attachment point must be between 0 and 1';\r\n      }\r\n      if (\r\n        formData.detachmentPoint === undefined ||\r\n        formData.detachmentPoint < 0 ||\r\n        formData.detachmentPoint > 1\r\n      ) {\r\n        newErrors.detachmentPoint = 'Detachment point must be between 0 and 1';\r\n      }\r\n      if (\r\n        formData.attachmentPoint !== undefined &&\r\n        formData.detachmentPoint !== undefined &&\r\n        formData.attachmentPoint >= formData.detachmentPoint\r\n      ) {\r\n        newErrors.detachmentPoint = 'Detachment point must be greater than attachment point';\r\n      }\r\n    }\r\n\r\n    if (!formData.notional || formData.notional <= 0) {\r\n      newErrors.notional = 'Notional must be positive';\r\n    }\r\n\r\n    if (!formData.maturityDate) {\r\n      newErrors.maturityDate = 'Maturity date is required';\r\n    }\r\n\r\n    if (constituents.length === 0) {\r\n      newErrors.constituents = 'At least one constituent is required';\r\n    }\r\n\r\n    // Check for duplicate issuers\r\n    const issuerSet = new Set<string>();\r\n    constituents.forEach((c, idx) => {\r\n      if (c.issuer) {\r\n        if (issuerSet.has(c.issuer)) {\r\n          newErrors[`constituent_${idx}_issuer`] = 'Duplicate issuer';\r\n        }\r\n        issuerSet.add(c.issuer);\r\n      } else {\r\n        newErrors[`constituent_${idx}_issuer`] = 'Issuer is required';\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleInputChange = (field: keyof Basket, value: any) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleConstituentChange = (index: number, field: keyof BasketConstituent, value: any) => {\r\n    const updated = [...constituents];\r\n    updated[index] = { ...updated[index], [field]: value };\r\n    setConstituents(updated);\r\n\r\n    const errorKey = `constituent_${index}_${field}`;\r\n    if (errors[errorKey]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [errorKey]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const addConstituent = () => {\r\n    setConstituents([...constituents, { seniority: 'SR_UNSEC' }]);\r\n  };\r\n\r\n  const removeConstituent = (index: number) => {\r\n    setConstituents(constituents.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const normalizedWeights = calculateNormalizedWeights();\r\n\r\n      const basketRequest = {\r\n        ...formData,\r\n        constituents: constituents.map((c, idx) => ({\r\n          issuer: c.issuer!,\r\n          weight: normalizedWeights[idx],\r\n          recoveryOverride: c.recoveryOverride,\r\n          seniority: c.seniority || 'SR_UNSEC',\r\n          sector: c.sector,\r\n        })),\r\n      };\r\n\r\n      const basket = await basketService.createBasket(basketRequest as any);\r\n      onSuccess(basket);\r\n      resetForm();\r\n      onClose();\r\n    } catch (error: any) {\r\n      setErrors({ submit: error.message || 'Failed to create basket' });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      type: 'FIRST_TO_DEFAULT',\r\n      currency: 'USD',\r\n      premiumFrequency: 'QUARTERLY',\r\n      dayCount: 'ACT_360',\r\n      constituents: [],\r\n    });\r\n    setConstituents([]);\r\n    setErrors({});\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const normalizedWeights = calculateNormalizedWeights();\r\n\r\n  return (\r\n    <div\r\n      className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\"\r\n      onClick={onClose}\r\n    >\r\n      <div\r\n        className=\"bg-fd-darker rounded-lg shadow-xl border border-fd-border max-w-6xl w-full max-h-[90vh] overflow-y-auto m-4\"\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"sticky top-0 bg-fd-darker border-b border-fd-border px-6 py-4 flex justify-between items-center z-10\">\r\n          <h2 className=\"text-xl font-semibold text-fd-text\">Create New Basket Derivative</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\r\n            aria-label=\"Close modal\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Form */}\r\n        <form onSubmit={handleSubmit} className=\"p-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* Basic Information Section */}\r\n            <div className=\"md:col-span-2\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Basic Information\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Basket Name <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.name || ''}\r\n                onChange={(e) => handleInputChange('name', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.name ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                placeholder=\"e.g., US_IG_TECH_FTD_5Y\"\r\n              />\r\n              {errors.name && <p className=\"mt-1 text-sm text-red-400\">{errors.name}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Basket Type <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.type}\r\n                onChange={(e) => handleInputChange('type', e.target.value as BasketType)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {BASKET_TYPE_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.type && <p className=\"mt-1 text-sm text-red-400\">{errors.type}</p>}\r\n            </div>\r\n\r\n            {/* Conditional Fields for N-th-to-Default */}\r\n            {formData.type === 'NTH_TO_DEFAULT' && (\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                  N-th Value <span className=\"text-red-500\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={formData.nth || ''}\r\n                  onChange={(e) => handleInputChange('nth', parseInt(e.target.value))}\r\n                  className={`w-full px-3 py-2 bg-fd-dark border ${errors.nth ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                  placeholder=\"e.g., 2 for 2nd-to-default\"\r\n                />\r\n                {errors.nth && <p className=\"mt-1 text-sm text-red-400\">{errors.nth}</p>}\r\n              </div>\r\n            )}\r\n\r\n            {/* Conditional Fields for Tranchette */}\r\n            {formData.type === 'TRANCHETTE' && (\r\n              <>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                    Attachment Point (0-1) <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    value={formData.attachmentPoint || ''}\r\n                    onChange={(e) =>\r\n                      handleInputChange('attachmentPoint', parseFloat(e.target.value))\r\n                    }\r\n                    className={`w-full px-3 py-2 bg-fd-dark border ${errors.attachmentPoint ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                    placeholder=\"e.g., 0.03 for 3%\"\r\n                  />\r\n                  {errors.attachmentPoint && (\r\n                    <p className=\"mt-1 text-sm text-red-400\">{errors.attachmentPoint}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                    Detachment Point (0-1) <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    value={formData.detachmentPoint || ''}\r\n                    onChange={(e) =>\r\n                      handleInputChange('detachmentPoint', parseFloat(e.target.value))\r\n                    }\r\n                    className={`w-full px-3 py-2 bg-fd-dark border ${errors.detachmentPoint ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                    placeholder=\"e.g., 0.07 for 7%\"\r\n                  />\r\n                  {errors.detachmentPoint && (\r\n                    <p className=\"mt-1 text-sm text-red-400\">{errors.detachmentPoint}</p>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {/* Economics Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Economics\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Currency <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.currency}\r\n                onChange={(e) => handleInputChange('currency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {CURRENCY_OPTIONS.map((curr) => (\r\n                  <option key={curr} value={curr}>\r\n                    {curr}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Notional <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.notional || ''}\r\n                onChange={(e) => handleInputChange('notional', parseFloat(e.target.value))}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.notional ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n                placeholder=\"e.g., 10000000\"\r\n              />\r\n              {errors.notional && <p className=\"mt-1 text-sm text-red-400\">{errors.notional}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Premium Frequency\r\n              </label>\r\n              <select\r\n                value={formData.premiumFrequency}\r\n                onChange={(e) => handleInputChange('premiumFrequency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {PREMIUM_FREQUENCY_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Day Count Convention\r\n              </label>\r\n              <select\r\n                value={formData.dayCount}\r\n                onChange={(e) => handleInputChange('dayCount', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {DAY_COUNT_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Maturity Date <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formData.maturityDate || ''}\r\n                onChange={(e) => handleInputChange('maturityDate', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.maturityDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              />\r\n              {errors.maturityDate && (\r\n                <p className=\"mt-1 text-sm text-red-400\">{errors.maturityDate}</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Constituents Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <div className=\"flex justify-between items-center mb-4\">\r\n                <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide\">\r\n                  Basket Constituents <span className=\"text-red-500\">*</span>\r\n                </h3>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={addConstituent}\r\n                  className=\"px-3 py-1 text-sm bg-fd-green text-fd-dark rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green\"\r\n                >\r\n                  + Add Constituent\r\n                </button>\r\n              </div>\r\n\r\n              {errors.constituents && (\r\n                <p className=\"mb-2 text-sm text-red-400\">{errors.constituents}</p>\r\n              )}\r\n\r\n              {constituents.map((constituent, index) => {\r\n                const normalizedWeight = normalizedWeights[index];\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    className=\"mb-4 p-4 bg-fd-dark border border-fd-border rounded-md\"\r\n                  >\r\n                    <div className=\"flex justify-between items-center mb-3\">\r\n                      <h4 className=\"text-sm font-medium text-fd-text\">Constituent #{index + 1}</h4>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => removeConstituent(index)}\r\n                        className=\"text-red-400 hover:text-red-300 text-sm\"\r\n                      >\r\n                        Remove\r\n                      </button>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Issuer <span className=\"text-red-500\">*</span>\r\n                        </label>\r\n                        <select\r\n                          value={constituent.issuer || ''}\r\n                          onChange={(e) => handleConstituentChange(index, 'issuer', e.target.value)}\r\n                          className={`w-full px-2 py-1 text-sm bg-fd-darker border ${errors[`constituent_${index}_issuer`] ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green`}\r\n                        >\r\n                          <option value=\"\">Select Issuer</option>\r\n                          {REFERENCE_ENTITIES.map((entity) => (\r\n                            <option key={entity.code} value={entity.code}>\r\n                              {entity.code} - {entity.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {errors[`constituent_${index}_issuer`] && (\r\n                          <p className=\"mt-1 text-xs text-red-400\">\r\n                            {errors[`constituent_${index}_issuer`]}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Weight (optional, normalized)\r\n                        </label>\r\n                        <input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          value={constituent.weight || ''}\r\n                          onChange={(e) =>\r\n                            handleConstituentChange(\r\n                              index,\r\n                              'weight',\r\n                              parseFloat(e.target.value) || 0\r\n                            )\r\n                          }\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                          placeholder={`Auto: ${normalizedWeight.toFixed(4)}`}\r\n                        />\r\n                        {normalizedWeight !== undefined && (\r\n                          <p className=\"mt-1 text-xs text-fd-text-muted\">\r\n                            Normalized: {(normalizedWeight * 100).toFixed(2)}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Seniority\r\n                        </label>\r\n                        <select\r\n                          value={constituent.seniority || 'SR_UNSEC'}\r\n                          onChange={(e) =>\r\n                            handleConstituentChange(index, 'seniority', e.target.value)\r\n                          }\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                        >\r\n                          {SENIORITY_OPTIONS.map((opt) => (\r\n                            <option key={opt.value} value={opt.value}>\r\n                              {opt.label}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Recovery Override (0-1)\r\n                        </label>\r\n                        <input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          max=\"1\"\r\n                          value={constituent.recoveryOverride || ''}\r\n                          onChange={(e) =>\r\n                            handleConstituentChange(\r\n                              index,\r\n                              'recoveryOverride',\r\n                              parseFloat(e.target.value)\r\n                            )\r\n                          }\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                          placeholder=\"Optional\"\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"md:col-span-2\">\r\n                        <label className=\"block text-xs font-medium text-fd-text-muted mb-1\">\r\n                          Sector (optional)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={constituent.sector || ''}\r\n                          onChange={(e) => handleConstituentChange(index, 'sector', e.target.value)}\r\n                          className=\"w-full px-2 py-1 text-sm bg-fd-darker border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-1 focus:ring-fd-green\"\r\n                          placeholder=\"e.g., TECH, ENERGY\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Message */}\r\n          {errors.submit && (\r\n            <div className=\"mt-4 p-3 bg-red-900/20 border border-red-500/30 rounded-md\">\r\n              <p className=\"text-sm text-red-400\">{errors.submit}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"mt-6 flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-darker focus:outline-none focus:ring-2 focus:ring-fd-green\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:bg-fd-green/50 disabled:cursor-not-allowed\"\r\n            >\r\n              {isSubmitting ? 'Creating...' : 'Create Basket'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BasketCreationModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketDetailView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondCreationModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":112,"column":9,"nodeType":"MemberExpression","endLine":112,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Bond, bondService } from '../../services/bondService';\r\nimport { REFERENCE_ENTITIES, SECTORS } from '../../data/referenceData';\r\n\r\ninterface BondCreationModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSuccess: (bond: Bond) => void;\r\n}\r\n\r\ninterface FormErrors {\r\n  [key: string]: string;\r\n}\r\n\r\nconst SENIORITY_OPTIONS = [\r\n  { value: 'SR_UNSEC', label: 'Senior Unsecured' },\r\n  { value: 'SR_SEC', label: 'Senior Secured' },\r\n  { value: 'SUBORD', label: 'Subordinated' },\r\n];\r\n\r\nconst COUPON_FREQUENCY_OPTIONS = [\r\n  { value: 'ANNUAL', label: 'Annual' },\r\n  { value: 'SEMI_ANNUAL', label: 'Semi-Annual' },\r\n  { value: 'QUARTERLY', label: 'Quarterly' },\r\n];\r\n\r\nconst DAY_COUNT_OPTIONS = [\r\n  { value: 'ACT_ACT', label: 'ACT/ACT' },\r\n  { value: 'THIRTY_360', label: '30/360' },\r\n];\r\n\r\nconst CURRENCY_OPTIONS = ['USD', 'EUR', 'GBP', 'JPY'];\r\n\r\nconst BondCreationModal: React.FC<BondCreationModalProps> = ({ isOpen, onClose, onSuccess }) => {\r\n  const [formData, setFormData] = useState<Partial<Bond>>({\r\n    currency: 'USD',\r\n    couponFrequency: 'SEMI_ANNUAL',\r\n    dayCount: 'ACT_ACT',\r\n    seniority: 'SR_UNSEC',\r\n    settlementDays: 2,\r\n    faceValue: 100,\r\n    priceConvention: 'CLEAN',\r\n  });\r\n\r\n  const [errors, setErrors] = useState<FormErrors>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [userModifiedSector, setUserModifiedSector] = useState(false);\r\n\r\n  // Auto-populate sector when issuer changes\r\n  useEffect(() => {\r\n    if (!userModifiedSector && formData.issuer) {\r\n      const entity = REFERENCE_ENTITIES.find((e) => e.code === formData.issuer);\r\n      if (entity?.sector) {\r\n        setFormData((prev) => ({\r\n          ...prev,\r\n          sector: entity.sector,\r\n        }));\r\n      }\r\n    }\r\n  }, [formData.issuer, userModifiedSector]);\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: FormErrors = {};\r\n\r\n    if (!formData.issuer?.trim()) {\r\n      newErrors.issuer = 'Issuer is required';\r\n    }\r\n\r\n    if (!formData.notional || formData.notional <= 0) {\r\n      newErrors.notional = 'Notional must be positive';\r\n    }\r\n\r\n    if (!formData.couponRate || formData.couponRate < 0) {\r\n      newErrors.couponRate = 'Coupon rate must be >= 0';\r\n    }\r\n\r\n    if (formData.couponRate && formData.couponRate > 1) {\r\n      newErrors.couponRate = 'Coupon rate exceeds 100% - please verify';\r\n    }\r\n\r\n    if (!formData.issueDate) {\r\n      newErrors.issueDate = 'Issue date is required';\r\n    }\r\n\r\n    if (!formData.maturityDate) {\r\n      newErrors.maturityDate = 'Maturity date is required';\r\n    }\r\n\r\n    if (\r\n      formData.issueDate &&\r\n      formData.maturityDate &&\r\n      new Date(formData.issueDate) >= new Date(formData.maturityDate)\r\n    ) {\r\n      newErrors.maturityDate = 'Maturity date must be after issue date';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleInputChange = (field: keyof Bond, value: any) => {\r\n    // Track if user manually edits the sector\r\n    if (field === 'sector') {\r\n      setUserModifiedSector(true);\r\n    }\r\n\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const bond = await bondService.createBond(formData as Bond);\r\n      onSuccess(bond);\r\n      resetForm();\r\n      onClose();\r\n    } catch (error: any) {\r\n      setErrors({ submit: error.message || 'Failed to create bond' });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      currency: 'USD',\r\n      couponFrequency: 'SEMI_ANNUAL',\r\n      dayCount: 'ACT_ACT',\r\n      seniority: 'SR_UNSEC',\r\n      settlementDays: 2,\r\n      faceValue: 100,\r\n      priceConvention: 'CLEAN',\r\n    });\r\n    setErrors({});\r\n    setUserModifiedSector(false);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div\r\n      className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\"\r\n      onClick={onClose}\r\n    >\r\n      <div\r\n        className=\"bg-fd-darker rounded-lg shadow-xl border border-fd-border max-w-4xl w-full max-h-[90vh] overflow-y-auto m-4\"\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"sticky top-0 bg-fd-darker border-b border-fd-border px-6 py-4 flex justify-between items-center z-10\">\r\n          <h2 className=\"text-xl font-semibold text-fd-text\">Create New Bond</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\r\n            aria-label=\"Close modal\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Form */}\r\n        <form onSubmit={handleSubmit} className=\"p-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* Issuer & Credit Info Section */}\r\n            <div className=\"md:col-span-2\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Issuer & Credit Information\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Issuer <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.issuer || ''}\r\n                onChange={(e) => handleInputChange('issuer', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.issuer ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              >\r\n                <option value=\"\">Select Issuer</option>\r\n                {REFERENCE_ENTITIES.map((entity) => (\r\n                  <option key={entity.code} value={entity.code}>\r\n                    {entity.code} - {entity.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.issuer && <p className=\"mt-1 text-sm text-red-400\">{errors.issuer}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Seniority <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.seniority}\r\n                onChange={(e) => handleInputChange('seniority', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {SENIORITY_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Sector</label>\r\n              <select\r\n                value={formData.sector || ''}\r\n                onChange={(e) => handleInputChange('sector', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                <option value=\"\">Auto-suggested from issuer</option>\r\n                {SECTORS.map((sector) => (\r\n                  <option key={sector.code} value={sector.code}>\r\n                    {sector.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">ISIN</label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.isin || ''}\r\n                onChange={(e) => handleInputChange('isin', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\r\n                placeholder=\"Optional\"\r\n                maxLength={12}\r\n              />\r\n            </div>\r\n\r\n            {/* Economics Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Bond Economics\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Currency <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.currency}\r\n                onChange={(e) => handleInputChange('currency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {CURRENCY_OPTIONS.map((curr) => (\r\n                  <option key={curr} value={curr}>\r\n                    {curr}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Notional <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.notional || ''}\r\n                onChange={(e) => handleInputChange('notional', parseFloat(e.target.value))}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.notional ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted`}\r\n              />\r\n              {errors.notional && <p className=\"mt-1 text-sm text-red-400\">{errors.notional}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Coupon Rate (decimal) <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.000001\"\r\n                value={formData.couponRate || ''}\r\n                onChange={(e) => handleInputChange('couponRate', parseFloat(e.target.value))}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.couponRate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted`}\r\n                placeholder=\"e.g., 0.045 for 4.5%\"\r\n              />\r\n              {errors.couponRate && (\r\n                <p className=\"mt-1 text-sm text-red-400\">{errors.couponRate}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Coupon Frequency\r\n              </label>\r\n              <select\r\n                value={formData.couponFrequency}\r\n                onChange={(e) => handleInputChange('couponFrequency', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {COUPON_FREQUENCY_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Day Count Convention\r\n              </label>\r\n              <select\r\n                value={formData.dayCount}\r\n                onChange={(e) => handleInputChange('dayCount', e.target.value)}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\r\n              >\r\n                {DAY_COUNT_OPTIONS.map((opt) => (\r\n                  <option key={opt.value} value={opt.value}>\r\n                    {opt.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Dates Section */}\r\n            <div className=\"md:col-span-2 mt-4\">\r\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\r\n                Dates\r\n              </h3>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Issue Date <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formData.issueDate || ''}\r\n                onChange={(e) => handleInputChange('issueDate', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.issueDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              />\r\n              {errors.issueDate && <p className=\"mt-1 text-sm text-red-400\">{errors.issueDate}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\r\n                Maturity Date <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formData.maturityDate || ''}\r\n                onChange={(e) => handleInputChange('maturityDate', e.target.value)}\r\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.maturityDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\r\n              />\r\n              {errors.maturityDate && (\r\n                <p className=\"mt-1 text-sm text-red-400\">{errors.maturityDate}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Settlement Days</label>\r\n              <input\r\n                type=\"number\"\r\n                value={formData.settlementDays || ''}\r\n                onChange={(e) => handleInputChange('settlementDays', parseInt(e.target.value))}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Face Value</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.faceValue || ''}\r\n                onChange={(e) => handleInputChange('faceValue', parseFloat(e.target.value))}\r\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Message */}\r\n          {errors.submit && (\r\n            <div className=\"mt-4 p-3 bg-red-900/20 border border-red-500/30 rounded-md\">\r\n              <p className=\"text-sm text-red-400\">{errors.submit}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"mt-6 flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-darker focus:outline-none focus:ring-2 focus:ring-fd-green\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:bg-fd-green/50 disabled:cursor-not-allowed\"\r\n            >\r\n              {isSubmitting ? 'Creating...' : 'Create Bond'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BondCreationModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondDetailView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBondDetails'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [bondId, loadBondDetails]","fix":{"range":[982,990],"text":"[bondId, loadBondDetails]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\cds-blotter\\CDSBlotter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\cds-trade-form\\CDSTradeForm.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Merge conflict marker encountered.","line":34,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  REFERENCE_ENTITIES,\r\n  COUNTERPARTIES,\r\n  CURRENCIES,\r\n  PREMIUM_FREQUENCIES,\r\n  DAY_COUNT_CONVENTIONS,\r\n  RESTRUCTURING_CLAUSES,\r\n  PAYMENT_CALENDARS,\r\n  TRADE_STATUSES,\r\n  SETTLEMENT_METHODS,\r\n  CDSTrade\r\n} from '../../data/referenceData';\r\nimport { bondService, Bond } from '../../services/bondService';\r\n\r\ninterface FormErrors {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface CDSTradeFormProps {\r\n  onSubmit: (trade: CDSTrade) => void;\r\n}\r\n\r\nconst CDSTradeForm: React.FC<CDSTradeFormProps> = ({ onSubmit }) => {\r\n  const [formData, setFormData] = useState<Partial<CDSTrade>>({\r\n    tradeDate: new Date().toISOString().split('T')[0],\r\n    currency: 'USD',\r\n    premiumFrequency: 'QUARTERLY',\r\n    dayCountConvention: 'ACT_360',\r\n    buySellProtection: 'BUY',\r\n    paymentCalendar: 'NYC',\r\n    tradeStatus: 'PENDING',\r\n    recoveryRate: 40,\r\n<<<<<<< HEAD\r\n    settlementType: 'CASH'\r\n=======\r\n>>>>>>> 689d737 (feat: add comprehensive security and quality analysis)\r\n  });\r\n\r\n  const [errors, setErrors] = useState<FormErrors>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [availableBonds, setAvailableBonds] = useState<Bond[]>([]);\r\n  const [loadingBonds, setLoadingBonds] = useState(false);\r\n\r\n  // Fetch bonds when reference entity changes\r\n  useEffect(() => {\r\n    const fetchBonds = async () => {\r\n      if (!formData.referenceEntity) {\r\n        setAvailableBonds([]);\r\n        return;\r\n      }\r\n\r\n      setLoadingBonds(true);\r\n      try {\r\n        const bonds = await bondService.getBondsByIssuer(formData.referenceEntity);\r\n        setAvailableBonds(bonds);\r\n      } catch (error) {\r\n        console.error('Error fetching bonds:', error);\r\n        setAvailableBonds([]);\r\n      } finally {\r\n        setLoadingBonds(false);\r\n      }\r\n    };\r\n\r\n    fetchBonds();\r\n  }, [formData.referenceEntity]);\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: FormErrors = {};\r\n\r\n    // Required field validations\r\n    if (!formData.referenceEntity) {\r\n      newErrors.referenceEntity = 'Reference Entity is required';\r\n    }\r\n\r\n    if (formData.referenceEntity && !formData.obligation?.id) {\r\n      newErrors.obligation = 'Obligation is required';\r\n    }\r\n\r\n    if (!formData.notionalAmount || formData.notionalAmount <= 0) {\r\n      newErrors.notionalAmount = 'Notional Amount must be greater than 0';\r\n    }\r\n\r\n    if (!formData.spread || formData.spread < 0) {\r\n      newErrors.spread = 'Spread must be 0 or greater';\r\n    }\r\n\r\n    if (!formData.recoveryRate || formData.recoveryRate < 0 || formData.recoveryRate > 100) {\r\n      newErrors.recoveryRate = 'Recovery Rate must be between 0 and 100';\r\n    }\r\n\r\n    if (!formData.maturityDate) {\r\n      newErrors.maturityDate = 'Maturity Date is required';\r\n    }\r\n\r\n    if (!formData.effectiveDate) {\r\n      newErrors.effectiveDate = 'Effective Date is required';\r\n    }\r\n\r\n    if (!formData.counterparty) {\r\n      newErrors.counterparty = 'Counterparty is required';\r\n    }\r\n\r\n    if (!formData.tradeDate) {\r\n      newErrors.tradeDate = 'Trade Date is required';\r\n    }\r\n\r\n    if (!formData.accrualStartDate) {\r\n      newErrors.accrualStartDate = 'Accrual Start Date is required';\r\n    }\r\n\r\n    // Date validations\r\n    if (\r\n      formData.effectiveDate &&\r\n      formData.maturityDate &&\r\n      new Date(formData.effectiveDate) >= new Date(formData.maturityDate)\r\n    ) {\r\n      newErrors.maturityDate = 'Maturity Date must be after Effective Date';\r\n    }\r\n\r\n    if (\r\n      formData.tradeDate &&\r\n      formData.effectiveDate &&\r\n      new Date(formData.tradeDate) > new Date(formData.effectiveDate)\r\n    ) {\r\n      newErrors.effectiveDate = 'Effective Date must be on or after Trade Date';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleInputChange = (field: keyof CDSTrade, value: any) => {\r\n    setFormData((prev) => {\r\n      const updates: Partial<CDSTrade> = {};\r\n\r\n      // Handle obligation specially - convert to nested object\r\n      if (field === 'obligation') {\r\n        updates.obligation = value ? { id: value } : undefined;\r\n      } else {\r\n        updates[field] = value as any;\r\n      }\r\n\r\n      // Clear obligation when reference entity changes\r\n      if (field === 'referenceEntity' && prev.referenceEntity !== value) {\r\n        updates.obligation = undefined;\r\n      }\r\n\r\n      return {\r\n        ...prev,\r\n        ...updates,\r\n      };\r\n    });\r\n\r\n    // Clear error for this field when user starts typing\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Format number with commas for display\r\n  const formatNumberWithCommas = (num: number | undefined): string => {\r\n    if (!num && num !== 0) return '';\r\n    return num.toLocaleString('en-US');\r\n  };\r\n\r\n  // Parse formatted string back to number\r\n  const parseFormattedNumber = (str: string): number => {\r\n    return parseFloat(str.replace(/,/g, '')) || 0;\r\n  };\r\n\r\n  // Handle notional amount input with formatting\r\n  const handleNotionalChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const rawValue = e.target.value.replace(/,/g, ''); // Remove commas\r\n    const numValue = parseFloat(rawValue);\r\n\r\n    if (!isNaN(numValue) || rawValue === '') {\r\n      handleInputChange('notionalAmount', rawValue === '' ? undefined : numValue);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    // Defensive normalization\r\n    if (formData.tradeStatus === 'SETTLED' || formData.tradeStatus === 'CONFIRMED') {\r\n      formData.tradeStatus = 'ACTIVE';\r\n    }\r\n\r\n    // Simulate API call delay\r\n    setTimeout(() => {\r\n      onSubmit(formData as CDSTrade);\r\n      setIsSubmitting(false);\r\n\r\n      // Reset form\r\n      setFormData({\r\n        tradeDate: new Date().toISOString().split('T')[0],\r\n        currency: 'USD',\r\n        premiumFrequency: 'QUARTERLY',\r\n        dayCountConvention: 'ACT_360',\r\n        buySellProtection: 'BUY',\r\n        paymentCalendar: 'NYC',\r\n        tradeStatus: 'PENDING',\r\n        recoveryRate: 40,\r\n<<<<<<< HEAD\r\n        settlementType: 'CASH'\r\n=======\r\n>>>>>>> 689d737 (feat: add comprehensive security and quality analysis)\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  const inputClassName = (fieldName: string) => {\r\n    const baseClass =\r\n      'w-full px-3 py-2 bg-fd-input border rounded-md text-fd-text placeholder-fd-text-muted focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-fd-green';\r\n    const errorClass = 'border-red-500';\r\n    const normalClass = 'border-fd-border';\r\n\r\n    return `${baseClass} ${errors[fieldName] ? errorClass : normalClass}`;\r\n  };\r\n\r\n  const selectClassName = (fieldName: string) => {\r\n    const baseClass =\r\n      'w-full px-3 py-2 bg-fd-input border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-fd-green';\r\n    const errorClass = 'border-red-500';\r\n    const normalClass = 'border-fd-border';\r\n\r\n    return `${baseClass} ${errors[fieldName] ? errorClass : normalClass}`;\r\n  };\r\n\r\n  const generateRandomData = () => {\r\n    // Helper function to get random item from array\r\n    const getRandomItem = (array: any[]) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    // Helper function to get random date within a range (days offset from today)\r\n    const getRandomDate = (startDays: number, endDays: number) => {\r\n      const start = new Date();\r\n      start.setDate(start.getDate() + startDays);\r\n      const end = new Date();\r\n      end.setDate(end.getDate() + endDays);\r\n\r\n      const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r\n      return new Date(randomTime).toISOString().split('T')[0];\r\n    };\r\n\r\n    // Generate trades that started in the PAST for demo purposes\r\n    // This allows demonstrating coupon payments immediately\r\n\r\n    // Trade date: 24-48 months ago (2-4 years in the past) for more coupons\r\n    const tradeDate = getRandomDate(-365 * 4, -365 * 2);\r\n\r\n    // Effective date: 1-7 days after trade date (still in the past)\r\n    const tradeDateObj = new Date(tradeDate);\r\n    const effectiveDaysOffset = Math.floor(Math.random() * 7) + 1;\r\n    const effectiveDateObj = new Date(tradeDateObj);\r\n    effectiveDateObj.setDate(effectiveDateObj.getDate() + effectiveDaysOffset);\r\n    const effectiveDate = effectiveDateObj.toISOString().split('T')[0];\r\n\r\n    // Maturity date: 2-5 years from TODAY (in the future)\r\n    const maturityDate = getRandomDate(365 * 2, 365 * 5);\r\n\r\n    // Accrual start date: same as effective date\r\n    const accrualStartDate = effectiveDate;\r\n\r\n    // Generate round notional amounts (5M, 10M, 20M, 50M, 100M, 200M, 500M)\r\n    const roundNotionals = [5000000, 10000000, 20000000, 50000000, 100000000, 200000000, 500000000];\r\n    const notionalAmount = getRandomItem(roundNotionals);\r\n\r\n    const randomData: Partial<CDSTrade> = {\r\n      referenceEntity: getRandomItem(REFERENCE_ENTITIES).code,\r\n      counterparty: getRandomItem(COUNTERPARTIES).code,\r\n      currency: getRandomItem(CURRENCIES).code,\r\n      notionalAmount,\r\n      spread: Math.floor(Math.random() * 500) + 50, // 50 to 550 bps\r\n      buySellProtection: Math.random() > 0.5 ? 'BUY' : 'SELL',\r\n      tradeDate,\r\n      effectiveDate,\r\n      maturityDate,\r\n      accrualStartDate,\r\n      premiumFrequency: getRandomItem(PREMIUM_FREQUENCIES).value,\r\n      dayCountConvention: getRandomItem(DAY_COUNT_CONVENTIONS).value,\r\n      restructuringClause: Math.random() > 0.3 ? getRandomItem(RESTRUCTURING_CLAUSES).value : '', // 70% chance of having a clause\r\n      paymentCalendar: getRandomItem(PAYMENT_CALENDARS).value,\r\n      tradeStatus: 'ACTIVE', // Always generate ACTIVE trades for demo purposes\r\n<<<<<<< HEAD\r\n      recoveryRate: 40,  // Default recovery rate\r\n      settlementType: getRandomItem(SETTLEMENT_METHODS).value\r\n=======\r\n      recoveryRate: 40, // Default recovery rate\r\n>>>>>>> 689d737 (feat: add comprehensive security and quality analysis)\r\n    };\r\n    setFormData(randomData);\r\n    setErrors({}); // Clear any existing errors\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-2xl font-bold text-fd-text\">New CDS Trade Entry</h2>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n        {/* Row 1: Reference Entity, Counterparty, Currency */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Reference Entity <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.referenceEntity || ''}\r\n              onChange={(e) => handleInputChange('referenceEntity', e.target.value)}\r\n              className={selectClassName('referenceEntity')}\r\n            >\r\n              <option value=\"\">Select Reference Entity</option>\r\n              {REFERENCE_ENTITIES.map((entity) => (\r\n                <option key={entity.code} value={entity.code}>\r\n                  {entity.code} - {entity.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.referenceEntity && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.referenceEntity}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Counterparty <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.counterparty || ''}\r\n              onChange={(e) => handleInputChange('counterparty', e.target.value)}\r\n              className={selectClassName('counterparty')}\r\n            >\r\n              <option value=\"\">Select Counterparty</option>\r\n              {COUNTERPARTIES.map((cp) => (\r\n                <option key={cp.code} value={cp.code}>\r\n                  {cp.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.counterparty && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.counterparty}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Currency <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.currency || 'USD'}\r\n              onChange={(e) => handleInputChange('currency', e.target.value)}\r\n              className={selectClassName('currency')}\r\n            >\r\n              {CURRENCIES.map((curr) => (\r\n                <option key={curr.code} value={curr.code}>\r\n                  {curr.code} - {curr.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 1.5: Obligation (conditional on reference entity) */}\r\n        {formData.referenceEntity && (\r\n          <div className=\"grid grid-cols-1 gap-4\">\r\n            <div>\r\n              <label className=\"block text-fd-text font-medium mb-2\">\r\n                Obligation (Bond) <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <select\r\n                value={formData.obligation?.id || ''}\r\n                onChange={(e) =>\r\n                  handleInputChange(\r\n                    'obligation',\r\n                    e.target.value ? Number(e.target.value) : undefined\r\n                  )\r\n                }\r\n                className={selectClassName('obligation')}\r\n                disabled={loadingBonds}\r\n              >\r\n                <option value=\"\">Select Obligation</option>\r\n                {loadingBonds && <option value=\"\">Loading bonds...</option>}\r\n                {!loadingBonds && availableBonds.length === 0 && (\r\n                  <option value=\"\">No bonds available for {formData.referenceEntity}</option>\r\n                )}\r\n                {!loadingBonds &&\r\n                  availableBonds.map((bond) => (\r\n                    <option key={bond.id} value={bond.id}>\r\n                      {bond.isin ? `${bond.isin} - ` : ''}\r\n                      {bond.issuer} {bond.seniority} - Coupon: {bond.couponRate}% - Maturity:{' '}\r\n                      {new Date(bond.maturityDate).toLocaleDateString()}\r\n                    </option>\r\n                  ))}\r\n              </select>\r\n              <p className=\"text-xs text-fd-text-muted mt-1\">\r\n                Select a specific bond from {formData.referenceEntity}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Row 2: Notional Amount, Spread, Buy/Sell Protection */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Notional Amount <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={formatNumberWithCommas(formData.notionalAmount)}\r\n              onChange={handleNotionalChange}\r\n              className={inputClassName('notionalAmount')}\r\n              placeholder=\"e.g., 10,000,000\"\r\n            />\r\n            {errors.notionalAmount && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.notionalAmount}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Spread (bps) <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              min=\"0\"\r\n              value={formData.spread || ''}\r\n              onChange={(e) => handleInputChange('spread', parseFloat(e.target.value))}\r\n              className={inputClassName('spread')}\r\n              placeholder=\"e.g., 100\"\r\n            />\r\n            {errors.spread && <p className=\"text-red-500 text-sm mt-1\">{errors.spread}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Recovery Rate (%) <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              step=\"1\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={formData.recoveryRate || 40}\r\n              onChange={(e) => handleInputChange('recoveryRate', parseFloat(e.target.value))}\r\n              className={inputClassName('recoveryRate')}\r\n              placeholder=\"e.g., 40\"\r\n            />\r\n            {errors.recoveryRate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.recoveryRate}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 3: Buy/Sell Protection, Settlement Type */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Buy/Sell Protection <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.buySellProtection || 'BUY'}\r\n              onChange={(e) => handleInputChange('buySellProtection', e.target.value)}\r\n              className={selectClassName('buySellProtection')}\r\n            >\r\n              <option value=\"BUY\">Buy Protection</option>\r\n              <option value=\"SELL\">Sell Protection</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Settlement Type <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.settlementType || 'CASH'}\r\n              onChange={(e) => handleInputChange('settlementType', e.target.value)}\r\n              className={selectClassName('settlementType')}\r\n            >\r\n              {SETTLEMENT_METHODS.map((method) => (\r\n                <option key={method.value} value={method.value}>\r\n                  {method.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 4: Trade Date, Effective Date, Maturity Date */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Trade Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.tradeDate || ''}\r\n              onChange={(e) => handleInputChange('tradeDate', e.target.value)}\r\n              className={inputClassName('tradeDate')}\r\n            />\r\n            {errors.tradeDate && <p className=\"text-red-500 text-sm mt-1\">{errors.tradeDate}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Effective Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.effectiveDate || ''}\r\n              onChange={(e) => handleInputChange('effectiveDate', e.target.value)}\r\n              className={inputClassName('effectiveDate')}\r\n            />\r\n            {errors.effectiveDate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.effectiveDate}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Maturity Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.maturityDate || ''}\r\n              onChange={(e) => handleInputChange('maturityDate', e.target.value)}\r\n              className={inputClassName('maturityDate')}\r\n            />\r\n            {errors.maturityDate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.maturityDate}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 4: Premium Frequency, Day Count Convention, Accrual Start Date */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Premium Frequency <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.premiumFrequency || 'QUARTERLY'}\r\n              onChange={(e) => handleInputChange('premiumFrequency', e.target.value)}\r\n              className={selectClassName('premiumFrequency')}\r\n            >\r\n              {PREMIUM_FREQUENCIES.map((freq) => (\r\n                <option key={freq.value} value={freq.value}>\r\n                  {freq.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Day Count Convention <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.dayCountConvention || 'ACT_360'}\r\n              onChange={(e) => handleInputChange('dayCountConvention', e.target.value)}\r\n              className={selectClassName('dayCountConvention')}\r\n            >\r\n              {DAY_COUNT_CONVENTIONS.map((dcc) => (\r\n                <option key={dcc.value} value={dcc.value}>\r\n                  {dcc.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Accrual Start Date <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.accrualStartDate || ''}\r\n              onChange={(e) => handleInputChange('accrualStartDate', e.target.value)}\r\n              className={inputClassName('accrualStartDate')}\r\n            />\r\n            {errors.accrualStartDate && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.accrualStartDate}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 5: Payment Calendar, Restructuring Clause, Trade Status */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Payment Calendar <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.paymentCalendar || 'NYC'}\r\n              onChange={(e) => handleInputChange('paymentCalendar', e.target.value)}\r\n              className={selectClassName('paymentCalendar')}\r\n            >\r\n              {PAYMENT_CALENDARS.map((cal) => (\r\n                <option key={cal.value} value={cal.value}>\r\n                  {cal.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">Restructuring Clause</label>\r\n            <select\r\n              value={formData.restructuringClause || ''}\r\n              onChange={(e) => handleInputChange('restructuringClause', e.target.value)}\r\n              className={selectClassName('restructuringClause')}\r\n            >\r\n              <option value=\"\">None</option>\r\n              {RESTRUCTURING_CLAUSES.map((clause) => (\r\n                <option key={clause.value} value={clause.value}>\r\n                  {clause.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-fd-text font-medium mb-2\">\r\n              Trade Status <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              value={formData.tradeStatus || 'PENDING'}\r\n              onChange={(e) => handleInputChange('tradeStatus', e.target.value)}\r\n              className={selectClassName('tradeStatus')}\r\n            >\r\n              {TRADE_STATUSES.map((status) => (\r\n                <option key={status.value} value={status.value}>\r\n                  {status.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <div className=\"flex justify-end space-x-4 pt-6 border-t border-fd-border\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={generateRandomData}\r\n            className=\"px-6 py-2 bg-transparent border border-fd-border text-fd-text rounded hover:bg-fd-dark transition-colors\"\r\n          >\r\n            Fill Random Data\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setFormData({\r\n                tradeDate: new Date().toISOString().split('T')[0],\r\n                currency: 'USD',\r\n                premiumFrequency: 'QUARTERLY',\r\n                dayCountConvention: 'ACT_360',\r\n                buySellProtection: 'BUY',\r\n                paymentCalendar: 'NYC',\r\n                tradeStatus: 'PENDING',\r\n                recoveryRate: 40,\r\n              });\r\n              setErrors({});\r\n            }}\r\n            className=\"px-6 py-2 bg-transparent border border-fd-border text-fd-text rounded hover:bg-fd-dark transition-colors\"\r\n          >\r\n            Clear Form\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n            className=\"px-6 py-2 bg-fd-green text-fd-dark font-medium rounded hover:bg-fd-green-hover disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n          >\r\n            {isSubmitting ? 'Booking Trade...' : 'Book Trade'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CDSTradeForm;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\confirmation-modal\\ConfirmationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\credit-event-modal\\CreditEventModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":128,"column":9,"nodeType":"MemberExpression","endLine":128,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { REFERENCE_ENTITIES } from '../../data/referenceData';\r\n\r\nexport type CreditEventType =\r\n  | 'BANKRUPTCY'\r\n  | 'FAILURE_TO_PAY'\r\n  | 'RESTRUCTURING'\r\n  | 'OBLIGATION_DEFAULT'\r\n  | 'REPUDIATION_MORATORIUM'\r\n  | 'PAYOUT';\r\nexport type SettlementMethod = 'CASH' | 'PHYSICAL';\r\n\r\nexport interface CreateCreditEventRequest {\r\n  eventType: CreditEventType;\r\n  eventDate: string;\r\n  noticeDate: string;\r\n  settlementMethod: SettlementMethod;\r\n  comments?: string;\r\n}\r\n\r\ninterface CreditEventModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (request: CreateCreditEventRequest) => Promise<void>;\r\n  tradeId: number;\r\n  referenceEntity?: string;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst CreditEventModal: React.FC<CreditEventModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  tradeId,\r\n  referenceEntity,\r\n  isLoading = false\r\n}) => {\r\n  // Get today's date in YYYY-MM-DD format\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    return today.toISOString().split('T')[0];\r\n  };\r\n\r\n  // Helper function to get full name of reference entity\r\n  const getReferenceEntityFullName = (code: string): string => {\r\n    const entity = REFERENCE_ENTITIES.find(e => e.code === code);\r\n    return entity ? entity.name : code;\r\n  };\r\n\r\n  const [formData, setFormData] = useState<CreateCreditEventRequest>({\r\n    eventType: 'RESTRUCTURING',\r\n    eventDate: getTodayDate(),\r\n    noticeDate: getTodayDate(),\r\n    settlementMethod: 'PHYSICAL',\r\n    comments: '',\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const eventTypeOptions: { value: CreditEventType; label: string }[] = [\r\n    { value: 'RESTRUCTURING', label: 'Restructuring' },\r\n    { value: 'BANKRUPTCY', label: 'Bankruptcy' },\r\n  ];\r\n\r\n  const settlementMethodOptions: { value: SettlementMethod; label: string }[] = [\r\n    { value: 'PHYSICAL', label: 'Physical Settlement' },\r\n    { value: 'CASH', label: 'Cash Settlement' },\r\n  ];\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.eventType) {\r\n      newErrors.eventType = 'Event type is required';\r\n    }\r\n\r\n    if (!formData.eventDate) {\r\n      newErrors.eventDate = 'Event date is required';\r\n    } else if (new Date(formData.eventDate) > new Date()) {\r\n      newErrors.eventDate = 'Event date cannot be in the future';\r\n    }\r\n\r\n    if (!formData.noticeDate) {\r\n      newErrors.noticeDate = 'Notice date is required';\r\n    } else if (formData.eventDate && new Date(formData.noticeDate) < new Date(formData.eventDate)) {\r\n      newErrors.noticeDate = 'Notice date must be on or after event date';\r\n    }\r\n\r\n    if (!formData.settlementMethod) {\r\n      newErrors.settlementMethod = 'Settlement method is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await onSubmit(formData);\r\n      // Reset form on successful submission\r\n      setFormData({\r\n        eventType: 'RESTRUCTURING',\r\n        eventDate: getTodayDate(),\r\n        noticeDate: getTodayDate(),\r\n        settlementMethod: 'PHYSICAL',\r\n        comments: '',\r\n      });\r\n      setErrors({});\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error submitting credit event:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: keyof CreateCreditEventRequest, value: string) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6 w-full max-w-md max-h-[90vh] overflow-y-auto\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <h2 className=\"text-xl font-semibold text-fd-text\">Record Credit Event</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\r\n            disabled={isLoading}\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Reference Entity Information */}\r\n        {referenceEntity && (\r\n          <div className=\"mb-4 p-3 bg-fd-dark rounded-lg border border-fd-border\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <svg className=\"w-5 h-5 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\r\n              </svg>\r\n              <div className=\"flex-1\">\r\n                <p className=\"text-xs text-fd-text-muted uppercase tracking-wide\">Reference Entity</p>\r\n                <p className=\"text-fd-green font-semibold\">{getReferenceEntityFullName(referenceEntity)}</p>\r\n                <p className=\"text-fd-text-muted text-xs mt-0.5\">{referenceEntity}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label htmlFor=\"eventType\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Event Type *\r\n            </label>\r\n            <select\r\n              id=\"eventType\"\r\n              value={formData.eventType}\r\n              onChange={(e) => handleInputChange('eventType', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.eventType ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            >\r\n              {eventTypeOptions.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.eventType && <p className=\"mt-1 text-sm text-red-400\">{errors.eventType}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"eventDate\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Event Date *\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"eventDate\"\r\n              value={formData.eventDate}\r\n              onChange={(e) => handleInputChange('eventDate', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.eventDate ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            />\r\n            {errors.eventDate && <p className=\"mt-1 text-sm text-red-400\">{errors.eventDate}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"noticeDate\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Notice Date *\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"noticeDate\"\r\n              value={formData.noticeDate}\r\n              onChange={(e) => handleInputChange('noticeDate', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.noticeDate ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            />\r\n            {errors.noticeDate && <p className=\"mt-1 text-sm text-red-400\">{errors.noticeDate}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label\r\n              htmlFor=\"settlementMethod\"\r\n              className=\"block text-sm font-medium text-fd-text mb-1\"\r\n            >\r\n              Settlement Method *\r\n            </label>\r\n            <select\r\n              id=\"settlementMethod\"\r\n              value={formData.settlementMethod}\r\n              onChange={(e) => handleInputChange('settlementMethod', e.target.value)}\r\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\r\n                errors.settlementMethod ? 'border-red-500' : 'border-fd-border'\r\n              }`}\r\n              disabled={isLoading}\r\n            >\r\n              {settlementMethodOptions.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errors.settlementMethod && (\r\n              <p className=\"mt-1 text-sm text-red-400\">{errors.settlementMethod}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"comments\" className=\"block text-sm font-medium text-fd-text mb-1\">\r\n              Comments\r\n            </label>\r\n            <textarea\r\n              id=\"comments\"\r\n              value={formData.comments}\r\n              onChange={(e) => handleInputChange('comments', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text placeholder-fd-text-muted\"\r\n              placeholder=\"Optional comments about the credit event...\"\r\n              disabled={isLoading}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex justify-end space-x-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-border focus:outline-none focus:ring-2 focus:ring-fd-green transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:opacity-50 transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Recording...' : 'Record Credit Event'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreditEventModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\AccrualHistoryPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCumulative'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [loadCumulative, tradeId]","fix":{"range":[1232,1241],"text":"[loadCumulative, tradeId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { lifecycleService } from '../../services/lifecycleService';\r\nimport { AccrualEvent } from '../../types/lifecycle';\r\n\r\ninterface Props {\r\n  tradeId: number;\r\n}\r\n\r\nexport const AccrualHistoryPanel: React.FC<Props> = ({ tradeId }) => {\r\n  const [accruals, setAccruals] = useState<AccrualEvent[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [range, setRange] = useState({ start: '', end: '' });\r\n  const [cumulative, setCumulative] = useState<number | null>(null);\r\n\r\n  const loadAccruals = async () => {\r\n    if (!range.start || !range.end) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await lifecycleService.getAccrualEvents(tradeId, range.start, range.end);\r\n      setAccruals(data);\r\n    } catch (e: any) {\r\n      setError(e.message || 'Failed to load accrual events');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadCumulative = async () => {\r\n    try {\r\n      const cum = await lifecycleService.getCumulativeAccrual(tradeId);\r\n      setCumulative(cum);\r\n    } catch {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCumulative();\r\n  }, [tradeId]);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h4 className=\"text-fd-text font-semibold\">Accrual History</h4>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <input\r\n            type=\"date\"\r\n            value={range.start}\r\n            onChange={(e) => setRange((r) => ({ ...r, start: e.target.value }))}\r\n            className=\"bg-fd-dark border border-fd-border rounded px-2 py-1 text-xs text-fd-text\"\r\n          />\r\n          <span className=\"text-fd-text-muted text-xs\">to</span>\r\n          <input\r\n            type=\"date\"\r\n            value={range.end}\r\n            onChange={(e) => setRange((r) => ({ ...r, end: e.target.value }))}\r\n            className=\"bg-fd-dark border border-fd-border rounded px-2 py-1 text-xs text-fd-text\"\r\n          />\r\n          <button\r\n            onClick={loadAccruals}\r\n            disabled={!range.start || !range.end}\r\n            className=\"px-3 py-1 text-xs bg-fd-green text-fd-dark rounded font-medium disabled:opacity-40\"\r\n          >\r\n            Load\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {cumulative !== null && (\r\n        <div className=\"bg-fd-dark border border-fd-border rounded p-3 flex items-center justify-between\">\r\n          <span className=\"text-fd-text-muted text-xs uppercase tracking-wide\">\r\n            Cumulative Accrual\r\n          </span>\r\n          <span className=\"text-fd-green font-semibold\">\r\n            {cumulative.toLocaleString(undefined, {\r\n              minimumFractionDigits: 2,\r\n              maximumFractionDigits: 2,\r\n            })}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {loading && <div className=\"text-fd-text-muted text-sm\">Loading accruals...</div>}\r\n      {error && <div className=\"text-red-400 text-sm\">{error}</div>}\r\n      {!loading && accruals.length === 0 && !error && range.start && range.end && (\r\n        <div className=\"text-fd-text-muted text-sm\">No accruals in range.</div>\r\n      )}\r\n      {accruals.length > 0 && (\r\n        <div className=\"overflow-x-auto border border-fd-border rounded max-h-72 overflow-y-auto\">\r\n          <table className=\"min-w-full text-xs\">\r\n            <thead className=\"bg-fd-dark sticky top-0\">\r\n              <tr className=\"text-fd-text-muted\">\r\n                <th className=\"px-3 py-2 text-left font-medium\">Date</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Accrual</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Cumulative</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Notional</th>\r\n                <th className=\"px-3 py-2 text-left font-medium\">Version</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {accruals.map((a) => (\r\n                <tr key={a.id} className=\"border-t border-fd-border hover:bg-fd-darker/40\">\r\n                  <td className=\"px-3 py-1 text-fd-text font-mono\">{a.accrualDate}</td>\r\n                  <td className=\"px-3 py-1 text-fd-green font-medium\">\r\n                    {a.accrualAmount.toLocaleString(undefined, { minimumFractionDigits: 2 })}\r\n                  </td>\r\n                  <td className=\"px-3 py-1 text-fd-text-muted\">\r\n                    {a.cumulativeAccrual.toLocaleString(undefined, { minimumFractionDigits: 2 })}\r\n                  </td>\r\n                  <td className=\"px-3 py-1 text-fd-text-muted\">\r\n                    {a.notionalAmount.toLocaleString()}\r\n                  </td>\r\n                  <td className=\"px-3 py-1 text-fd-text-muted\">{a.tradeVersion}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\AmendTradeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\CashflowPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCashflowData'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadCashflowData, trade.id]","fix":{"range":[1451,1461],"text":"[loadCashflowData, trade.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\CouponSchedulePanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'autoGenerate', 'generateSchedule', 'loadSchedule', and 'periods.length'. Either include them or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [autoGenerate, generateSchedule, loadSchedule, periods.length, tradeId]","fix":{"range":[1457,1466],"text":"[autoGenerate, generateSchedule, loadSchedule, periods.length, tradeId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\LifecycleTimeline.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLifecycleData'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadLifecycleData, trade.id]","fix":{"range":[1641,1651],"text":"[loadLifecycleData, trade.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\NotionalAdjustmentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\AttachInstrumentsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\AttachTradesModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\CreatePortfolioModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\EnhancedOverview.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'basketConstituents', 'bondConstituents', and 'cdsConstituents'. Either include them or remove the dependency array.","line":180,"column":6,"nodeType":"ArrayExpression","endLine":180,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [basketConstituents, bondConstituents, cdsConstituents]","fix":{"range":[6301,6303],"text":"[basketConstituents, bondConstituents, cdsConstituents]"}}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":200,"column":12,"nodeType":"MemberExpression","endLine":200,"endColumn":29}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateExposures'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [cdsConstituents, bondConstituents, basketConstituents, calculateExposures]","fix":{"range":[1324,1379],"text":"[cdsConstituents, bondConstituents, basketConstituents, calculateExposures]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  BondPortfolioConstituent,\r\n  BasketPortfolioConstituent,\r\n  CdsPortfolioConstituent,\r\n} from '../../services/portfolioService';\r\n\r\ninterface EnhancedOverviewProps {\r\n  portfolioId: number;\r\n  cdsConstituents: CdsPortfolioConstituent[];\r\n  bondConstituents: BondPortfolioConstituent[];\r\n  basketConstituents: BasketPortfolioConstituent[];\r\n  pricingData: any;\r\n}\r\n\r\ninterface IssuerExposure {\r\n  issuer: string;\r\n  sector: string;\r\n  bondNotional: number;\r\n  cdsProtectionBought: number;\r\n  cdsProtectionSold: number;\r\n  netCreditExposure: number;\r\n  hedgeRatio: number;\r\n  hedgeStatus: 'OVER_HEDGED' | 'UNDER_HEDGED' | 'BALANCED' | 'UNHEDGED';\r\n  recommendation: string;\r\n}\r\n\r\ninterface SectorExposure {\r\n  sector: string;\r\n  notional: number;\r\n  percentage: number;\r\n  instrumentCount: number;\r\n}\r\n\r\nconst EnhancedOverview: React.FC<EnhancedOverviewProps> = ({\r\n  portfolioId,\r\n  cdsConstituents,\r\n  bondConstituents,\r\n  basketConstituents,\r\n  pricingData,\r\n}) => {\r\n  const [issuerExposures, setIssuerExposures] = useState<IssuerExposure[]>([]);\r\n  const [sectorExposures, setSectorExposures] = useState<SectorExposure[]>([]);\r\n\r\n  useEffect(() => {\r\n    calculateExposures();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cdsConstituents, bondConstituents, basketConstituents]);\r\n\r\n  const calculateExposures = useCallback(() => {\r\n    // Map to aggregate by issuer\r\n    const issuerMap = new Map<string, IssuerExposure>();\r\n\r\n    // Process bonds\r\n    bondConstituents.forEach((bc) => {\r\n      const issuer = bc.bond.issuer;\r\n      if (!issuerMap.has(issuer)) {\r\n        issuerMap.set(issuer, {\r\n          issuer,\r\n          sector: getSectorFromIssuer(issuer),\r\n          bondNotional: 0,\r\n          cdsProtectionBought: 0,\r\n          cdsProtectionSold: 0,\r\n          netCreditExposure: 0,\r\n          hedgeRatio: 0,\r\n          hedgeStatus: 'UNHEDGED',\r\n          recommendation: '',\r\n        });\r\n      }\r\n      const exposure = issuerMap.get(issuer)!;\r\n      exposure.bondNotional += bc.bond.notional;\r\n    });\r\n\r\n    // Process CDS\r\n    cdsConstituents.forEach((cc) => {\r\n      const issuer = cc.trade.referenceEntity;\r\n      if (!issuerMap.has(issuer)) {\r\n        issuerMap.set(issuer, {\r\n          issuer,\r\n          sector: getSectorFromIssuer(issuer),\r\n          bondNotional: 0,\r\n          cdsProtectionBought: 0,\r\n          cdsProtectionSold: 0,\r\n          netCreditExposure: 0,\r\n          hedgeRatio: 0,\r\n          hedgeStatus: 'UNHEDGED',\r\n          recommendation: '',\r\n        });\r\n      }\r\n      const exposure = issuerMap.get(issuer)!;\r\n\r\n      // Assuming BUY = buying protection (short credit), SELL = selling protection (long credit)\r\n      // This is a simplification - you may need to check actual buySell field\r\n      exposure.cdsProtectionBought += cc.trade.notionalAmount;\r\n    });\r\n\r\n    // Calculate net exposures and recommendations\r\n    const exposures: IssuerExposure[] = [];\r\n    issuerMap.forEach((exp) => {\r\n      exp.netCreditExposure = exp.bondNotional - exp.cdsProtectionBought + exp.cdsProtectionSold;\r\n\r\n      if (exp.bondNotional > 0) {\r\n        exp.hedgeRatio = (exp.cdsProtectionBought / exp.bondNotional) * 100;\r\n\r\n        if (exp.hedgeRatio > 110) {\r\n          exp.hedgeStatus = 'OVER_HEDGED';\r\n          exp.recommendation = `Consider reducing CDS protection by $${((exp.cdsProtectionBought - exp.bondNotional) / 1000000).toFixed(1)}M`;\r\n        } else if (exp.hedgeRatio >= 90 && exp.hedgeRatio <= 110) {\r\n          exp.hedgeStatus = 'BALANCED';\r\n          exp.recommendation = 'Well hedged';\r\n        } else if (exp.hedgeRatio > 0) {\r\n          exp.hedgeStatus = 'UNDER_HEDGED';\r\n          exp.recommendation = `Consider buying $${((exp.bondNotional - exp.cdsProtectionBought) / 1000000).toFixed(1)}M CDS protection`;\r\n        } else {\r\n          exp.hedgeStatus = 'UNHEDGED';\r\n          exp.recommendation = `⚠️ Buy $${(exp.bondNotional / 1000000).toFixed(1)}M CDS protection to hedge bond exposure`;\r\n        }\r\n      } else if (exp.cdsProtectionBought > 0) {\r\n        exp.hedgeStatus = 'UNHEDGED';\r\n        exp.recommendation = `Consider buying $${(exp.cdsProtectionBought / 1000000).toFixed(1)}M in bonds to capture basis`;\r\n      }\r\n\r\n      exposures.push(exp);\r\n    });\r\n\r\n    setIssuerExposures(\r\n      exposures.sort((a, b) => Math.abs(b.netCreditExposure) - Math.abs(a.netCreditExposure))\r\n    );\r\n\r\n    // Calculate sector exposures\r\n    const sectorMap = new Map<string, { notional: number; count: number }>();\r\n\r\n    bondConstituents.forEach((bc) => {\r\n      const sector = getSectorFromIssuer(bc.bond.issuer);\r\n      if (!sectorMap.has(sector)) {\r\n        sectorMap.set(sector, { notional: 0, count: 0 });\r\n      }\r\n      const sectorData = sectorMap.get(sector)!;\r\n      sectorData.notional += bc.bond.notional;\r\n      sectorData.count++;\r\n    });\r\n\r\n    cdsConstituents.forEach((cc) => {\r\n      const sector = getSectorFromIssuer(cc.trade.referenceEntity);\r\n      if (!sectorMap.has(sector)) {\r\n        sectorMap.set(sector, { notional: 0, count: 0 });\r\n      }\r\n      const sectorData = sectorMap.get(sector)!;\r\n      sectorData.notional += cc.trade.notionalAmount;\r\n      sectorData.count++;\r\n    });\r\n\r\n    // Add baskets as \"BASKET\" sector for now\r\n    // TODO: In future, unwind basket constituents to their actual sectors\r\n    basketConstituents.forEach((bc) => {\r\n      const sector = 'BASKET';\r\n      if (!sectorMap.has(sector)) {\r\n        sectorMap.set(sector, { notional: 0, count: 0 });\r\n      }\r\n      const sectorData = sectorMap.get(sector)!;\r\n      // Use basket.notional (backend field name)\r\n      const notional = bc.basket?.notional || bc.weightValue || 0;\r\n      sectorData.notional += notional;\r\n      sectorData.count++;\r\n    });\r\n\r\n    const totalNotional = Array.from(sectorMap.values()).reduce((sum, s) => sum + s.notional, 0);\r\n    const sectors: SectorExposure[] = [];\r\n\r\n    sectorMap.forEach((data, sector) => {\r\n      sectors.push({\r\n        sector,\r\n        notional: data.notional,\r\n        percentage: totalNotional > 0 ? (data.notional / totalNotional) * 100 : 0,\r\n        instrumentCount: data.count,\r\n      });\r\n    });\r\n\r\n    setSectorExposures(sectors.sort((a, b) => b.notional - a.notional));\r\n  }, []); // useCallback dependency array\r\n\r\n  const getSectorFromIssuer = (issuer: string): string => {\r\n    const sectorMap: Record<string, string> = {\r\n      AAPL: 'TECH',\r\n      MSFT: 'TECH',\r\n      AMZN: 'TECH',\r\n      GOOGL: 'TECH',\r\n      TSLA: 'TECH',\r\n      NFLX: 'TECH',\r\n      META: 'TECH',\r\n      NVDA: 'TECH',\r\n      AMD: 'TECH',\r\n      JPM: 'FINANCIALS',\r\n      BAC: 'FINANCIALS',\r\n      WFC: 'FINANCIALS',\r\n      GS: 'FINANCIALS',\r\n      MS: 'FINANCIALS',\r\n      C: 'FINANCIALS',\r\n    };\r\n    return sectorMap[issuer] || 'OTHER';\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  const getHedgeStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'BALANCED':\r\n        return 'text-fd-green';\r\n      case 'UNDER_HEDGED':\r\n        return 'text-yellow-400';\r\n      case 'OVER_HEDGED':\r\n        return 'text-blue-400';\r\n      case 'UNHEDGED':\r\n        return 'text-red-400';\r\n      default:\r\n        return 'text-fd-text-muted';\r\n    }\r\n  };\r\n\r\n  const getHedgeStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'BALANCED':\r\n        return 'bg-green-900/30 text-green-400 border-green-500';\r\n      case 'UNDER_HEDGED':\r\n        return 'bg-yellow-900/30 text-yellow-400 border-yellow-500';\r\n      case 'OVER_HEDGED':\r\n        return 'bg-blue-900/30 text-blue-400 border-blue-500';\r\n      case 'UNHEDGED':\r\n        return 'bg-red-900/30 text-red-400 border-red-500';\r\n      default:\r\n        return 'bg-fd-dark text-fd-text-muted border-fd-border';\r\n    }\r\n  };\r\n\r\n  const getSectorColor = (index: number) => {\r\n    const colors = [\r\n      'bg-fd-green',\r\n      'bg-blue-500',\r\n      'bg-yellow-500',\r\n      'bg-purple-500',\r\n      'bg-pink-500',\r\n      'bg-indigo-500',\r\n      'bg-teal-500',\r\n      'bg-orange-500',\r\n    ];\r\n    return colors[index % colors.length];\r\n  };\r\n\r\n  const totalCdsNotional = cdsConstituents.reduce((sum, c) => sum + c.trade.notionalAmount, 0);\r\n  const totalBondNotional = bondConstituents.reduce((sum, c) => sum + c.bond.notional, 0);\r\n  const totalBasketNotional = basketConstituents.reduce((sum, c) => {\r\n    // Use basket.notional (backend field name)\r\n    const notional = c.basket?.notional || c.weightValue || 0;\r\n    return sum + notional;\r\n  }, 0);\r\n  const totalNotional = totalCdsNotional + totalBondNotional + totalBasketNotional;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Instrument Distribution */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Instrument Type Breakdown */}\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Instrument Distribution</h3>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"w-4 h-4 bg-fd-green rounded\"></div>\r\n                <span className=\"text-fd-text\">🛡️ CDS Trades</span>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <div className=\"text-fd-text font-medium\">{formatCurrency(totalCdsNotional)}</div>\r\n                <div className=\"text-sm text-fd-text-muted\">\r\n                  {totalNotional > 0 ? ((totalCdsNotional / totalNotional) * 100).toFixed(1) : 0}% •{' '}\r\n                  {cdsConstituents.length} positions\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\r\n              <div\r\n                className=\"bg-fd-green h-2 rounded-full transition-all\"\r\n                style={{\r\n                  width: `${totalNotional > 0 ? (totalCdsNotional / totalNotional) * 100 : 0}%`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between mt-4\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\r\n                <span className=\"text-fd-text\">📜 Corporate Bonds</span>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <div className=\"text-fd-text font-medium\">{formatCurrency(totalBondNotional)}</div>\r\n                <div className=\"text-sm text-fd-text-muted\">\r\n                  {totalNotional > 0 ? ((totalBondNotional / totalNotional) * 100).toFixed(1) : 0}%\r\n                  • {bondConstituents.length} positions\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\r\n              <div\r\n                className=\"bg-blue-500 h-2 rounded-full transition-all\"\r\n                style={{\r\n                  width: `${totalNotional > 0 ? (totalBondNotional / totalNotional) * 100 : 0}%`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between mt-4\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\r\n                <span className=\"text-fd-text\">🗂️ Credit Baskets</span>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <div className=\"text-fd-text font-medium\">\r\n                  {formatCurrency(totalBasketNotional)}\r\n                </div>\r\n                <div className=\"text-sm text-fd-text-muted\">\r\n                  {totalNotional > 0 ? ((totalBasketNotional / totalNotional) * 100).toFixed(1) : 0}\r\n                  % • {basketConstituents.length} positions\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\r\n              <div\r\n                className=\"bg-purple-500 h-2 rounded-full transition-all\"\r\n                style={{\r\n                  width: `${totalNotional > 0 ? (totalBasketNotional / totalNotional) * 100 : 0}%`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sector Exposure */}\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Sector Allocation</h3>\r\n          <div className=\"space-y-3\">\r\n            {sectorExposures.slice(0, 5).map((sector, idx) => (\r\n              <div key={sector.sector} className=\"space-y-1\">\r\n                <div className=\"flex items-center justify-between text-sm\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div className={`w-3 h-3 rounded ${getSectorColor(idx)}`}></div>\r\n                    <span className=\"text-fd-text\">{sector.sector}</span>\r\n                  </div>\r\n                  <div className=\"text-fd-text-muted\">\r\n                    {sector.percentage.toFixed(1)}% • {sector.instrumentCount} instruments\r\n                  </div>\r\n                </div>\r\n                <div className=\"w-full bg-fd-dark rounded-full h-1.5\">\r\n                  <div\r\n                    className={`${getSectorColor(idx)} h-1.5 rounded-full transition-all`}\r\n                    style={{ width: `${sector.percentage}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Net Exposure by Issuer */}\r\n      <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text\">Net Credit Exposure by Issuer</h3>\r\n          <div className=\"text-sm text-fd-text-muted\">Showing bond positions vs CDS hedges</div>\r\n        </div>\r\n\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-fd-border\">\r\n            <thead>\r\n              <tr className=\"text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\">\r\n                <th className=\"px-4 py-3\">Issuer</th>\r\n                <th className=\"px-4 py-3\">Sector</th>\r\n                <th className=\"px-4 py-3 text-right\">Bond Exposure</th>\r\n                <th className=\"px-4 py-3 text-right\">CDS Protection</th>\r\n                <th className=\"px-4 py-3 text-right\">Net Exposure</th>\r\n                <th className=\"px-4 py-3 text-center\">Hedge Ratio</th>\r\n                <th className=\"px-4 py-3 text-center\">Status</th>\r\n                <th className=\"px-4 py-3\">Recommendation</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"divide-y divide-fd-border\">\r\n              {issuerExposures.map((exp) => (\r\n                <tr key={exp.issuer} className=\"hover:bg-fd-dark transition-colors\">\r\n                  <td className=\"px-4 py-3 text-sm font-medium text-fd-text\">{exp.issuer}</td>\r\n                  <td className=\"px-4 py-3 text-sm text-fd-text-muted\">{exp.sector}</td>\r\n                  <td className=\"px-4 py-3 text-sm text-right text-fd-text\">\r\n                    {exp.bondNotional > 0 ? formatCurrency(exp.bondNotional) : '-'}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-sm text-right text-fd-text\">\r\n                    {exp.cdsProtectionBought > 0 ? formatCurrency(exp.cdsProtectionBought) : '-'}\r\n                  </td>\r\n                  <td\r\n                    className={`px-4 py-3 text-sm text-right font-medium ${\r\n                      exp.netCreditExposure > 0\r\n                        ? 'text-red-400'\r\n                        : exp.netCreditExposure < 0\r\n                          ? 'text-fd-green'\r\n                          : 'text-fd-text'\r\n                    }`}\r\n                  >\r\n                    {formatCurrency(Math.abs(exp.netCreditExposure))}\r\n                    {exp.netCreditExposure > 0\r\n                      ? ' Long'\r\n                      : exp.netCreditExposure < 0\r\n                        ? ' Short'\r\n                        : ''}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-sm text-center text-fd-text\">\r\n                    {exp.bondNotional > 0 ? `${exp.hedgeRatio.toFixed(0)}%` : 'N/A'}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-center\">\r\n                    <span\r\n                      className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium border ${getHedgeStatusBadge(exp.hedgeStatus)}`}\r\n                    >\r\n                      {exp.hedgeStatus.replace('_', ' ')}\r\n                    </span>\r\n                  </td>\r\n                  <td className={`px-4 py-3 text-sm ${getHedgeStatusColor(exp.hedgeStatus)}`}>\r\n                    {exp.recommendation}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {issuerExposures.length === 0 && (\r\n          <div className=\"text-center py-8 text-fd-text-muted\">\r\n            No exposures to analyze. Add some CDS trades and bonds to see hedge recommendations.\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Key Metrics Summary */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Total Instruments</div>\r\n          <div className=\"text-2xl font-semibold text-fd-text\">\r\n            {cdsConstituents.length + bondConstituents.length + basketConstituents.length}\r\n          </div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">\r\n            {cdsConstituents.length} CDS • {bondConstituents.length} Bonds •{' '}\r\n            {basketConstituents.length} Baskets\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Unique Issuers</div>\r\n          <div className=\"text-2xl font-semibold text-fd-text\">{issuerExposures.length}</div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">{sectorExposures.length} sectors</div>\r\n        </div>\r\n\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Hedge Coverage</div>\r\n          <div className=\"text-2xl font-semibold text-fd-text\">\r\n            {totalBondNotional > 0 ? ((totalCdsNotional / totalBondNotional) * 100).toFixed(0) : 0}%\r\n          </div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">CDS / Bond ratio</div>\r\n        </div>\r\n\r\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\r\n          <div className=\"text-sm text-fd-text-muted mb-1\">Unhedged Exposure</div>\r\n          <div className=\"text-2xl font-semibold text-red-400\">\r\n            {\r\n              issuerExposures.filter(\r\n                (e) => e.hedgeStatus === 'UNHEDGED' || e.hedgeStatus === 'UNDER_HEDGED'\r\n              ).length\r\n            }\r\n          </div>\r\n          <div className=\"text-xs text-fd-text-muted mt-1\">issuers need attention</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedOverview;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cdsTradeService' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CDSTradeResponse' is defined but never used.","line":10,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":43},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPortfolioData'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [loadPortfolioData, portfolioId]","fix":{"range":[1631,1644],"text":"[loadPortfolioData, portfolioId]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MetricCard' is assigned a value but never used.","line":640,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":640,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  portfolioService,\r\n  CdsPortfolio,\r\n  CdsPortfolioConstituent,\r\n  BondPortfolioConstituent,\r\n  BasketPortfolioConstituent,\r\n  PortfolioPricingResponse,\r\n} from '../../services/portfolioService';\r\nimport { cdsTradeService, CDSTradeResponse } from '../../services/cdsTradeService';\r\nimport AttachInstrumentsModal from './AttachInstrumentsModal';\r\nimport SimulationPanel from './simulation/SimulationPanel';\r\nimport EnhancedOverview from './EnhancedOverview';\r\n\r\ninterface PortfolioDetailProps {\r\n  portfolioId: number;\r\n  onBack?: () => void;\r\n}\r\n\r\nconst PortfolioDetail: React.FC<PortfolioDetailProps> = ({ portfolioId, onBack }) => {\r\n  const [portfolio, setPortfolio] = useState<CdsPortfolio | null>(null);\r\n  const [constituents, setConstituents] = useState<CdsPortfolioConstituent[]>([]);\r\n  const [bondConstituents, setBondConstituents] = useState<BondPortfolioConstituent[]>([]);\r\n  const [basketConstituents, setBasketConstituents] = useState<BasketPortfolioConstituent[]>([]);\r\n  const [riskSummary, setRiskSummary] = useState<PortfolioPricingResponse | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [pricingLoading, setPricingLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<\r\n    'overview' | 'constituents' | 'concentration' | 'simulation'\r\n  >('overview');\r\n  const [showAttachModal, setShowAttachModal] = useState(false);\r\n  const [valuationDate, setValuationDate] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    loadPortfolioData();\r\n  }, [portfolioId]);\r\n\r\n  const loadPortfolioData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [portfolioData, constituentsData, bondsData, basketsData] = await Promise.all([\r\n        portfolioService.getPortfolioById(portfolioId),\r\n        portfolioService.getConstituents(portfolioId),\r\n        portfolioService.getPortfolioBonds(portfolioId),\r\n        portfolioService.getPortfolioBaskets(portfolioId),\r\n      ]);\r\n\r\n      setPortfolio(portfolioData);\r\n      setConstituents(constituentsData);\r\n      setBondConstituents(bondsData);\r\n      setBasketConstituents(basketsData);\r\n\r\n      // Try to load cached risk summary\r\n      try {\r\n        const cachedRisk = await portfolioService.getRiskSummary(portfolioId);\r\n        setRiskSummary(cachedRisk);\r\n        setValuationDate(cachedRisk.valuationDate);\r\n      } catch (err) {\r\n        // No cached risk available, that's okay\r\n        console.log('No cached risk summary available');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to load portfolio';\r\n      setError(errorMessage);\r\n      console.error('Error loading portfolio:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getBusinessDaysFromToday = (days: number): string => {\r\n    const today = new Date();\r\n    const target = new Date(today);\r\n    let addedDays = 0;\r\n\r\n    while (addedDays < days) {\r\n      target.setDate(target.getDate() + 1);\r\n      const dayOfWeek = target.getDay();\r\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\r\n        addedDays++;\r\n      }\r\n    }\r\n\r\n    return target.toISOString().split('T')[0];\r\n  };\r\n\r\n  const handleQuickValuationDate = async (option: 'today' | 't+1' | 't+7' | 't+45') => {\r\n    let newDate: string;\r\n\r\n    switch (option) {\r\n      case 'today':\r\n        newDate = new Date().toISOString().split('T')[0];\r\n        break;\r\n      case 't+1':\r\n        newDate = getBusinessDaysFromToday(1);\r\n        break;\r\n      case 't+7':\r\n        newDate = getBusinessDaysFromToday(7);\r\n        break;\r\n      case 't+45':\r\n        newDate = getBusinessDaysFromToday(45);\r\n        break;\r\n    }\r\n\r\n    setValuationDate(newDate);\r\n    await handlePriceWithDate(newDate);\r\n  };\r\n\r\n  const handlePriceWithDate = async (date: string) => {\r\n    try {\r\n      setPricingLoading(true);\r\n      setError(null);\r\n      const result = await portfolioService.pricePortfolio(portfolioId, date);\r\n      setRiskSummary(result);\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to price portfolio';\r\n      setError(errorMessage);\r\n      console.error('Error pricing portfolio:', err);\r\n    } finally {\r\n      setPricingLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePriceNow = async () => {\r\n    const today = new Date().toISOString().split('T')[0];\r\n    setValuationDate(today);\r\n    await handlePriceWithDate(today);\r\n  };\r\n\r\n  const handleDetachConstituent = async (constituentId: number) => {\r\n    if (!window.confirm('Are you sure you want to remove this trade from the portfolio?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await portfolioService.detachConstituent(portfolioId, constituentId);\r\n      loadPortfolioData();\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to detach constituent';\r\n      alert(errorMessage);\r\n    }\r\n  };\r\n\r\n  const handleDetachBond = async (bondId: number) => {\r\n    if (!window.confirm('Are you sure you want to remove this bond from the portfolio?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await portfolioService.removeBond(portfolioId, bondId);\r\n      loadPortfolioData();\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to remove bond';\r\n      alert(errorMessage);\r\n    }\r\n  };\r\n\r\n  const handleDetachBasket = async (basketId: number) => {\r\n    if (!window.confirm('Are you sure you want to remove this basket from the portfolio?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await portfolioService.removeBasket(portfolioId, basketId);\r\n      loadPortfolioData();\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to remove basket';\r\n      alert(errorMessage);\r\n    }\r\n  };\r\n\r\n  const handleAttachSuccess = () => {\r\n    setShowAttachModal(false);\r\n    loadPortfolioData();\r\n  };\r\n\r\n  const formatCurrency = (amount: number | undefined) => {\r\n    if (amount === undefined || amount === null) return '-';\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatNumber = (num: number | undefined, decimals: number = 2) => {\r\n    if (num === undefined || num === null) return '-';\r\n    return num.toFixed(decimals);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-64\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-fd-green\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || !portfolio) {\r\n    return (\r\n      <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\r\n        <div className=\"flex\">\r\n          <div className=\"flex-shrink-0\">\r\n            <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                clipRule=\"evenodd\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <div className=\"ml-3\">\r\n            <h3 className=\"text-sm font-medium text-red-800\">Error</h3>\r\n            <div className=\"mt-2 text-sm text-red-700\">\r\n              <p>{error || 'Portfolio not found'}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            {onBack && (\r\n              <button\r\n                onClick={onBack}\r\n                className=\"text-fd-green hover:text-fd-green-hover font-medium\"\r\n              >\r\n                ← Back\r\n              </button>\r\n            )}\r\n            <div>\r\n              <h2 className=\"text-2xl font-semibold text-fd-text\">{portfolio.name}</h2>\r\n              {portfolio.description && (\r\n                <p className=\"text-sm text-fd-text-muted mt-1\">{portfolio.description}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center space-x-3\">\r\n            {/* Valuation Date Quick Selector */}\r\n            <div className=\"flex items-center space-x-2\">\r\n              <span className=\"text-xs text-fd-text-muted\">Valuation:</span>\r\n              <div className=\"flex space-x-1\">\r\n                <button\r\n                  onClick={() => handleQuickValuationDate('today')}\r\n                  disabled={pricingLoading}\r\n                  className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                    valuationDate === new Date().toISOString().split('T')[0]\r\n                      ? 'bg-fd-green text-fd-dark'\r\n                      : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                  } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n                >\r\n                  Today\r\n                </button>\r\n                <button\r\n                  onClick={() => handleQuickValuationDate('t+1')}\r\n                  disabled={pricingLoading}\r\n                  className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                    valuationDate === getBusinessDaysFromToday(1)\r\n                      ? 'bg-fd-green text-fd-dark'\r\n                      : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                  } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n                >\r\n                  T+1\r\n                </button>\r\n                <button\r\n                  onClick={() => handleQuickValuationDate('t+7')}\r\n                  disabled={pricingLoading}\r\n                  className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                    valuationDate === getBusinessDaysFromToday(7)\r\n                      ? 'bg-fd-green text-fd-dark'\r\n                      : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                  } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n                >\r\n                  T+7\r\n                </button>\r\n                <button\r\n                  onClick={() => handleQuickValuationDate('t+45')}\r\n                  disabled={pricingLoading}\r\n                  className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                    valuationDate === getBusinessDaysFromToday(45)\r\n                      ? 'bg-fd-green text-fd-dark'\r\n                      : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                  } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n                >\r\n                  T+45\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <button\r\n              onClick={() => setShowAttachModal(true)}\r\n              className=\"bg-fd-green hover:bg-fd-green-hover text-fd-dark font-medium py-2 px-4 rounded transition-colors\"\r\n            >\r\n              + Add Instruments\r\n            </button>\r\n            <button\r\n              onClick={handlePriceNow}\r\n              disabled={pricingLoading || constituents.length === 0}\r\n              className=\"bg-fd-green hover:bg-fd-green-hover text-fd-dark font-medium py-2 px-4 rounded transition-colors disabled:bg-fd-text-muted/50 disabled:cursor-not-allowed\"\r\n            >\r\n              {pricingLoading ? 'Pricing...' : 'Reprice Now'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <div className=\"bg-fd-darker rounded-lg shadow-fd border border-fd-border\">\r\n        <div className=\"border-b border-fd-border px-6\">\r\n          <nav className=\"-mb-px flex space-x-8\">\r\n            <button\r\n              onClick={() => setActiveTab('overview')}\r\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\r\n                activeTab === 'overview'\r\n                  ? 'border-fd-green text-fd-green'\r\n                  : 'border-transparent text-fd-text-muted hover:text-fd-text hover:border-fd-border'\r\n              }`}\r\n            >\r\n              Overview\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('constituents')}\r\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\r\n                activeTab === 'constituents'\r\n                  ? 'border-fd-green text-fd-green'\r\n                  : 'border-transparent text-fd-text-muted hover:text-fd-text hover:border-fd-border'\r\n              }`}\r\n            >\r\n              Constituents (\r\n              {constituents.length + bondConstituents.length + basketConstituents.length})\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('concentration')}\r\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\r\n                activeTab === 'concentration'\r\n                  ? 'border-fd-green text-fd-green'\r\n                  : 'border-transparent text-fd-text-muted hover:text-fd-text hover:border-fd-border'\r\n              }`}\r\n            >\r\n              Concentration\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('simulation')}\r\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\r\n                activeTab === 'simulation'\r\n                  ? 'border-fd-green text-fd-green'\r\n                  : 'border-transparent text-fd-text-muted hover:text-fd-text hover:border-fd-border'\r\n              }`}\r\n            >\r\n              Monte Carlo Simulation\r\n            </button>\r\n          </nav>\r\n        </div>\r\n\r\n        {/* Tab Content */}\r\n        <div className=\"p-6\">\r\n          {activeTab === 'overview' && (\r\n            <EnhancedOverview\r\n              portfolioId={portfolioId}\r\n              cdsConstituents={constituents}\r\n              bondConstituents={bondConstituents}\r\n              basketConstituents={basketConstituents}\r\n              pricingData={riskSummary}\r\n            />\r\n          )}\r\n\r\n          {activeTab === 'constituents' && (\r\n            <>\r\n              {constituents.length === 0 &&\r\n              bondConstituents.length === 0 &&\r\n              basketConstituents.length === 0 ? (\r\n                <div className=\"text-center py-12\">\r\n                  <svg\r\n                    className=\"mx-auto h-12 w-12 text-fd-text-muted\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    aria-hidden=\"true\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                    />\r\n                  </svg>\r\n                  <h3 className=\"mt-2 text-sm font-medium text-fd-text\">\r\n                    No instruments in portfolio\r\n                  </h3>\r\n                  <p className=\"mt-1 text-sm text-fd-text-muted\">\r\n                    Add CDS trades or bonds to get started.\r\n                  </p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"overflow-x-auto\">\r\n                  <table className=\"min-w-full divide-y divide-fd-border\">\r\n                    <thead className=\"bg-fd-dark\">\r\n                      <tr>\r\n                        <th\r\n                          scope=\"col\"\r\n                          className=\"px-6 py-3 text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\"\r\n                        >\r\n                          Type\r\n                        </th>\r\n                        <th\r\n                          scope=\"col\"\r\n                          className=\"px-6 py-3 text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\"\r\n                        >\r\n                          ID\r\n                        </th>\r\n                        <th\r\n                          scope=\"col\"\r\n                          className=\"px-6 py-3 text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\"\r\n                        >\r\n                          Reference / Issuer\r\n                        </th>\r\n                        <th\r\n                          scope=\"col\"\r\n                          className=\"px-6 py-3 text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\"\r\n                        >\r\n                          Notional\r\n                        </th>\r\n                        <th\r\n                          scope=\"col\"\r\n                          className=\"px-6 py-3 text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\"\r\n                        >\r\n                          Weight Type\r\n                        </th>\r\n                        <th\r\n                          scope=\"col\"\r\n                          className=\"px-6 py-3 text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\"\r\n                        >\r\n                          Weight Value\r\n                        </th>\r\n                        <th\r\n                          scope=\"col\"\r\n                          className=\"px-6 py-3 text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\"\r\n                        >\r\n                          Actions\r\n                        </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className=\"bg-fd-darker divide-y divide-fd-border\">\r\n                      {constituents.map((constituent) => (\r\n                        <tr\r\n                          key={`cds-${constituent.id}`}\r\n                          className=\"hover:bg-fd-dark transition-colors\"\r\n                        >\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-900 text-blue-200\">\r\n                              🛡️ CDS\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-fd-text\">\r\n                            CDS-{constituent.trade.id}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {constituent.trade.referenceEntity}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {formatCurrency(constituent.trade.notionalAmount)}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text-muted\">\r\n                            {constituent.weightType}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {constituent.weightType === 'PERCENT'\r\n                              ? `${(constituent.weightValue * 100).toFixed(2)}%`\r\n                              : formatCurrency(constituent.weightValue)}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                            <button\r\n                              onClick={() => handleDetachConstituent(constituent.id)}\r\n                              className=\"text-red-400 hover:text-red-300 font-medium\"\r\n                            >\r\n                              Remove\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                      {bondConstituents.map((bondConstituent) => (\r\n                        <tr\r\n                          key={`bond-${bondConstituent.id}`}\r\n                          className=\"hover:bg-fd-dark transition-colors\"\r\n                        >\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-900 text-green-200\">\r\n                              📜 Bond\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-fd-text\">\r\n                            {bondConstituent.bond.isin}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {bondConstituent.bond.issuer}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {formatCurrency(bondConstituent.bond.notional)}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text-muted\">\r\n                            {bondConstituent.weightType}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {formatCurrency(bondConstituent.weightValue)}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                            <button\r\n                              onClick={() => handleDetachBond(bondConstituent.bond.id)}\r\n                              className=\"text-red-400 hover:text-red-300 font-medium\"\r\n                            >\r\n                              Remove\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                      {basketConstituents.map((basketConstituent) => (\r\n                        <tr\r\n                          key={`basket-${basketConstituent.id}`}\r\n                          className=\"hover:bg-fd-dark transition-colors\"\r\n                        >\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-900 text-purple-200\">\r\n                              🗂️ Basket\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-fd-text\">\r\n                            {basketConstituent.basket.name}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {basketConstituent.basket.basketType === 'FIRST_TO_DEFAULT'\r\n                              ? 'FTD'\r\n                              : basketConstituent.basket.basketType === 'NTH_TO_DEFAULT'\r\n                                ? `${basketConstituent.basket.kthToDefault}th-to-Default`\r\n                                : 'Tranchette'}{' '}\r\n                            ({basketConstituent.basket.numberOfConstituents} names)\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {formatCurrency(basketConstituent.basket.notional)}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text-muted\">\r\n                            {basketConstituent.weightType}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-fd-text\">\r\n                            {formatCurrency(basketConstituent.weightValue)}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                            <button\r\n                              onClick={() => handleDetachBasket(basketConstituent.basket.id)}\r\n                              className=\"text-red-400 hover:text-red-300 font-medium\"\r\n                            >\r\n                              Remove\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              )}\r\n            </>\r\n          )}\r\n\r\n          {activeTab === 'concentration' && (\r\n            <div className=\"space-y-4\">\r\n              {riskSummary?.concentration ? (\r\n                <>\r\n                  <div className=\"bg-fd-dark p-6 rounded-lg border border-fd-border\">\r\n                    <h3 className=\"text-lg font-semibold text-fd-text mb-4\">\r\n                      Top 5 CS01 Concentration\r\n                    </h3>\r\n                    <div className=\"text-3xl font-bold text-fd-green\">\r\n                      {formatNumber(riskSummary.concentration.top5PctCs01, 1)}%\r\n                    </div>\r\n                    <p className=\"text-sm text-fd-text-muted mt-2\">\r\n                      of total CS01 is concentrated in the top 5 contributors\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div className=\"bg-fd-dark p-6 rounded-lg border border-fd-border\">\r\n                    <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Sector Breakdown</h3>\r\n                    <div className=\"space-y-3\">\r\n                      {riskSummary.concentration.sectorBreakdown.map((sector) => (\r\n                        <div key={sector.sector} className=\"flex items-center justify-between\">\r\n                          <div className=\"flex items-center space-x-3 flex-1\">\r\n                            <span className=\"text-sm font-medium text-fd-text w-32\">\r\n                              {sector.sector}\r\n                            </span>\r\n                            <div className=\"flex-1 bg-fd-darker rounded-full h-4\">\r\n                              <div\r\n                                className={`h-4 rounded-full ${\r\n                                  sector.cs01Pct > 25 ? 'bg-red-500' : 'bg-fd-green'\r\n                                }`}\r\n                                style={{ width: `${Math.min(sector.cs01Pct, 100)}%` }}\r\n                              ></div>\r\n                            </div>\r\n                          </div>\r\n                          <span className=\"text-sm font-semibold text-fd-text ml-3\">\r\n                            {formatNumber(sector.cs01Pct, 1)}%\r\n                          </span>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className=\"bg-fd-dark p-6 rounded-lg border border-fd-border text-center\">\r\n                  <p className=\"text-fd-text-muted\">\r\n                    No concentration metrics available. Price the portfolio first.\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'simulation' && <SimulationPanel portfolioId={portfolioId} />}\r\n        </div>\r\n      </div>\r\n\r\n      {showAttachModal && (\r\n        <AttachInstrumentsModal\r\n          portfolioId={portfolioId}\r\n          onClose={() => setShowAttachModal(false)}\r\n          onSuccess={handleAttachSuccess}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MetricCard: React.FC<{ label: string; value: string }> = ({ label, value }) => (\r\n  <div className=\"bg-fd-dark p-4 rounded-lg border border-fd-border\">\r\n    <p className=\"text-sm text-fd-text-muted mb-1\">{label}</p>\r\n    <p className=\"text-xl font-semibold text-fd-text\">{value}</p>\r\n  </div>\r\n);\r\n\r\nexport default PortfolioDetail;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\ContributorsTable.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":25,"column":16,"nodeType":"MemberExpression","endLine":25,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":26,"column":16,"nodeType":"MemberExpression","endLine":26,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Contributor } from '../../../services/simulationService';\r\n\r\ninterface ContributorsTableProps {\r\n  contributors: Contributor[];\r\n}\r\n\r\ntype SortField = 'entity' | 'marginalElPct' | 'beta';\r\ntype SortDirection = 'asc' | 'desc';\r\n\r\nconst ContributorsTable: React.FC<ContributorsTableProps> = ({ contributors }) => {\r\n  const [sortField, setSortField] = useState<SortField>('marginalElPct');\r\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\r\n\r\n  const handleSort = (field: SortField) => {\r\n    if (sortField === field) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortField(field);\r\n      setSortDirection(field === 'entity' ? 'asc' : 'desc');\r\n    }\r\n  };\r\n\r\n  const sortedContributors = [...contributors].sort((a, b) => {\r\n    let aVal = a[sortField];\r\n    let bVal = b[sortField];\r\n\r\n    if (typeof aVal === 'string') {\r\n      aVal = aVal.toLowerCase();\r\n      bVal = (bVal as string).toLowerCase();\r\n    }\r\n\r\n    if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;\r\n    if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;\r\n    return 0;\r\n  });\r\n\r\n  const SortIcon = ({ field }: { field: SortField }) => {\r\n    if (sortField !== field) {\r\n      return (\r\n        <svg\r\n          className=\"w-4 h-4 text-fd-text-muted\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\r\n          />\r\n        </svg>\r\n      );\r\n    }\r\n\r\n    return sortDirection === 'asc' ? (\r\n      <svg className=\"w-4 h-4 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\r\n      </svg>\r\n    ) : (\r\n      <svg className=\"w-4 h-4 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n      </svg>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-fd-darker rounded-lg border border-fd-border overflow-hidden\">\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"w-full\">\r\n          <thead className=\"bg-fd-dark border-b border-fd-border\">\r\n            <tr>\r\n              <th\r\n                className=\"px-4 py-3 text-left text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\r\n                onClick={() => handleSort('entity')}\r\n              >\r\n                <div className=\"flex items-center gap-2\">\r\n                  Entity Name\r\n                  <SortIcon field=\"entity\" />\r\n                </div>\r\n              </th>\r\n              <th\r\n                className=\"px-4 py-3 text-right text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\r\n                onClick={() => handleSort('marginalElPct')}\r\n              >\r\n                <div className=\"flex items-center justify-end gap-2\">\r\n                  Marginal EL %\r\n                  <SortIcon field=\"marginalElPct\" />\r\n                </div>\r\n              </th>\r\n              <th\r\n                className=\"px-4 py-3 text-right text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\r\n                onClick={() => handleSort('beta')}\r\n              >\r\n                <div className=\"flex items-center justify-end gap-2\">\r\n                  Beta (β)\r\n                  <SortIcon field=\"beta\" />\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"divide-y divide-fd-border\">\r\n            {sortedContributors.map((contributor, index) => (\r\n              <tr key={index} className=\"hover:bg-fd-dark/50 transition-colors\">\r\n                <td className=\"px-4 py-3 text-sm text-fd-text\">{contributor.entity}</td>\r\n                <td className=\"px-4 py-3 text-sm text-fd-text text-right font-medium\">\r\n                  {contributor.marginalElPct.toFixed(2)}%\r\n                </td>\r\n                <td className=\"px-4 py-3 text-sm text-fd-text-muted text-right\">\r\n                  {contributor.beta.toFixed(3)}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {sortedContributors.length === 0 && (\r\n        <div className=\"p-8 text-center text-fd-text-muted\">No contributors data available</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContributorsTable;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\MetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\MetricsGlossaryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationConfigForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'polling' is assigned a value but never used.","line":20,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { simulationService, SimulationRequest } from '../../../services/simulationService';\r\nimport { useSimulationPolling } from '../../../hooks/useSimulationPolling';\r\nimport SimulationConfigForm from './SimulationConfigForm';\r\nimport SimulationResults from './SimulationResults';\r\nimport MetricsGlossaryModal from './MetricsGlossaryModal';\r\n\r\ninterface SimulationPanelProps {\r\n  portfolioId: number;\r\n}\r\n\r\nconst SimulationPanel: React.FC<SimulationPanelProps> = ({ portfolioId }) => {\r\n  const [runId, setRunId] = useState<string | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitError, setSubmitError] = useState<string | null>(null);\r\n  const [showGlossary, setShowGlossary] = useState(false);\r\n\r\n  const {\r\n    simulation,\r\n    loading: polling,\r\n    error: pollingError,\r\n  } = useSimulationPolling(runId, !!runId);\r\n\r\n  const handleSubmit = async (request: SimulationRequest) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      setSubmitError(null);\r\n\r\n      const response = await simulationService.runSimulation(portfolioId, request);\r\n      setRunId(response.runId);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to start simulation';\r\n      setSubmitError(errorMessage);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = async () => {\r\n    if (runId && window.confirm('Are you sure you want to cancel this simulation?')) {\r\n      try {\r\n        await simulationService.cancelSimulation(runId);\r\n      } catch (err) {\r\n        console.error('Failed to cancel simulation:', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    if (simulation) {\r\n      simulationService.downloadResults(simulation);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setRunId(null);\r\n    setSubmitError(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with Help Button */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-fd-text\">Monte Carlo Simulation</h3>\r\n          <p className=\"text-sm text-fd-text-muted mt-1\">\r\n            Correlated default risk analysis with portfolio metrics\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => setShowGlossary(true)}\r\n          className=\"flex items-center space-x-2 px-3 py-2 text-sm font-medium text-fd-green hover:text-fd-green-hover transition-colors\"\r\n        >\r\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n            />\r\n          </svg>\r\n          <span>Help & Glossary</span>\r\n        </button>\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {(submitError || pollingError) && (\r\n        <div className=\"bg-red-900/20 border border-red-500/50 rounded-md p-4\">\r\n          <div className=\"flex\">\r\n            <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                clipRule=\"evenodd\"\r\n              />\r\n            </svg>\r\n            <div className=\"ml-3\">\r\n              <h3 className=\"text-sm font-medium text-red-400\">Error</h3>\r\n              <div className=\"mt-2 text-sm text-red-300\">\r\n                <p>{submitError || pollingError}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Configuration Form or Results */}\r\n      {!runId || !simulation ? (\r\n        <SimulationConfigForm onSubmit={handleSubmit} isSubmitting={isSubmitting} />\r\n      ) : (\r\n        <SimulationResults\r\n          simulation={simulation}\r\n          onCancel={handleCancel}\r\n          onDownload={handleDownload}\r\n          onReset={handleReset}\r\n        />\r\n      )}\r\n\r\n      {/* Glossary Modal */}\r\n      <MetricsGlossaryModal isOpen={showGlossary} onClose={() => setShowGlossary(false)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulationPanel;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationResults.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'displayHorizon' is assigned a value but never used.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { SimulationResponse } from '../../../services/simulationService';\r\nimport SimulationStatusBadge from './SimulationStatusBadge';\r\nimport MetricsCard from './MetricsCard';\r\nimport ContributorsTable from './ContributorsTable';\r\n\r\ninterface SimulationResultsProps {\r\n  simulation: SimulationResponse;\r\n  onCancel: () => void;\r\n  onDownload: () => void;\r\n  onReset: () => void;\r\n}\r\n\r\nconst SimulationResults: React.FC<SimulationResultsProps> = ({\r\n  simulation,\r\n  onCancel,\r\n  onDownload,\r\n  onReset,\r\n}) => {\r\n  const isRunning = simulation.status === 'RUNNING' || simulation.status === 'QUEUED';\r\n  const isComplete = simulation.status === 'COMPLETE';\r\n  const isFailed = simulation.status === 'FAILED';\r\n\r\n  // For display, use the horizon with most data (prefer 5Y, then 3Y, then 1Y)\r\n  const displayHorizon =\r\n    simulation.horizons?.find((h) => h.tenor === '5Y') ||\r\n    simulation.horizons?.find((h) => h.tenor === '3Y') ||\r\n    simulation.horizons?.[0];\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Status Header */}\r\n      <div className=\"bg-fd-darker rounded-lg border border-fd-border p-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h3 className=\"text-lg font-medium text-fd-text\">Simulation Status</h3>\r\n            <p className=\"text-sm text-fd-text-muted mt-1\">Run ID: {simulation.runId}</p>\r\n          </div>\r\n          <SimulationStatusBadge status={simulation.status} />\r\n        </div>\r\n\r\n        {simulation.errorMessage && (\r\n          <div className=\"mt-4 p-3 bg-red-500/10 border border-red-500/20 rounded text-red-400 text-sm\">\r\n            <strong>Error:</strong> {simulation.errorMessage}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"mt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n          <div>\r\n            <span className=\"text-fd-text-muted\">Valuation Date:</span>\r\n            <p className=\"text-fd-text font-medium\">{simulation.valuationDate || 'N/A'}</p>\r\n          </div>\r\n          <div>\r\n            <span className=\"text-fd-text-muted\">Paths:</span>\r\n            <p className=\"text-fd-text font-medium\">\r\n              {simulation.paths?.toLocaleString() || 'N/A'}\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <span className=\"text-fd-text-muted\">Horizons:</span>\r\n            <p className=\"text-fd-text font-medium\">\r\n              {simulation.horizons?.map((h) => h.tenor).join(', ') || 'N/A'}\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <span className=\"text-fd-text-muted\">Seed:</span>\r\n            <p className=\"text-fd-text font-medium\">{simulation.seedUsed ?? 'Random'}</p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"mt-4 flex gap-3\">\r\n          {isRunning && (\r\n            <button\r\n              onClick={onCancel}\r\n              className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded text-sm font-medium transition-colors\"\r\n            >\r\n              Cancel Simulation\r\n            </button>\r\n          )}\r\n          {isComplete && (\r\n            <>\r\n              <button\r\n                onClick={onDownload}\r\n                className=\"bg-fd-green hover:bg-fd-green-hover text-fd-dark px-4 py-2 rounded text-sm font-medium transition-colors\"\r\n              >\r\n                Download Results (JSON)\r\n              </button>\r\n              <button\r\n                onClick={onReset}\r\n                className=\"bg-fd-border hover:bg-fd-text-muted text-fd-text px-4 py-2 rounded text-sm font-medium transition-colors\"\r\n              >\r\n                Run New Simulation\r\n              </button>\r\n            </>\r\n          )}\r\n          {isFailed && (\r\n            <button\r\n              onClick={onReset}\r\n              className=\"bg-fd-border hover:bg-fd-text-muted text-fd-text px-4 py-2 rounded text-sm font-medium transition-colors\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Metrics Grid - Show ALL Horizons */}\r\n      {isComplete && simulation.horizons && simulation.horizons.length > 0 && (\r\n        <>\r\n          {simulation.horizons.map((horizon, idx) => (\r\n            <div key={horizon.tenor}>\r\n              <h3 className=\"text-lg font-medium text-fd-text mb-4\">\r\n                Risk Metrics ({horizon.tenor})\r\n              </h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                <MetricsCard\r\n                  label=\"Probability of Any Default\"\r\n                  value={`${((horizon.pAnyDefault || horizon.panyDefault || 0) * 100).toFixed(2)}%`}\r\n                  description=\"Likelihood that at least one entity defaults\"\r\n                />\r\n                <MetricsCard\r\n                  label=\"Expected Loss\"\r\n                  value={`$${horizon.loss.mean.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })}`}\r\n                  description=\"Mean loss across all scenarios\"\r\n                />\r\n                <MetricsCard\r\n                  label=\"VaR 95%\"\r\n                  value={`$${horizon.loss.var95.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })}`}\r\n                  description=\"Loss not exceeded in 95% of scenarios\"\r\n                />\r\n                <MetricsCard\r\n                  label=\"VaR 99%\"\r\n                  value={`$${horizon.loss.var99.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })}`}\r\n                  description=\"Loss not exceeded in 99% of scenarios\"\r\n                />\r\n                <MetricsCard\r\n                  label=\"Expected Shortfall 97.5%\"\r\n                  value={`$${horizon.loss.es97_5.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })}`}\r\n                  description=\"Mean loss in worst 2.5% of scenarios\"\r\n                />\r\n                <MetricsCard\r\n                  label=\"Diversification Benefit\"\r\n                  value={`${horizon.diversification.benefitPct.toFixed(2)}%`}\r\n                  description=\"Risk reduction from portfolio diversification\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {/* Contributors Table */}\r\n          {simulation.contributors && simulation.contributors.length > 0 && (\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-fd-text mb-4\">\r\n                Top Contributors to Expected Loss\r\n              </h3>\r\n              <ContributorsTable contributors={simulation.contributors} />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {/* Loading State */}\r\n      {isRunning && (\r\n        <div className=\"bg-fd-darker rounded-lg border border-fd-border p-8 text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-fd-green mx-auto mb-4\"></div>\r\n          <p className=\"text-fd-text-muted\">\r\n            {simulation.status === 'QUEUED'\r\n              ? 'Simulation queued...'\r\n              : 'Running Monte Carlo simulation...'}\r\n          </p>\r\n          <p className=\"text-fd-text-muted text-sm mt-2\">\r\n            This may take a minute or two depending on the number of paths\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulationResults;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationStatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\CashflowScheduleTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\MarketDataPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DiscountCurveData' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DefaultCurveData' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  MarketDataSnapshot,\r\n  DiscountCurveData,\r\n  DefaultCurveData,\r\n} from '../../services/risk/riskTypes';\r\n\r\ninterface Props {\r\n  marketDataSnapshot?: MarketDataSnapshot | null;\r\n}\r\n\r\nconst MarketDataPanel: React.FC<Props> = ({ marketDataSnapshot }) => {\r\n  const [activeView, setActiveView] = useState<'structured' | 'raw'>('structured');\r\n  const [activeRawFile, setActiveRawFile] = useState<'market' | 'todaysmarket' | 'curveconfig'>(\r\n    'market'\r\n  );\r\n\r\n  console.log('🔍 MarketDataPanel rendered with:', {\r\n    marketDataSnapshot: !!marketDataSnapshot,\r\n    activeView,\r\n    activeRawFile,\r\n  });\r\n\r\n  const handleViewChange = (view: 'structured' | 'raw') => {\r\n    console.log('🔄 View change requested:', { from: activeView, to: view });\r\n    setActiveView(view);\r\n    console.log('✅ View state updated to:', view);\r\n  };\r\n\r\n  // For demonstration purposes, use mock data if no snapshot available\r\n  const mockSnapshot: MarketDataSnapshot = {\r\n    valuationDate: '2025-10-15',\r\n    baseCurrency: 'USD',\r\n    discountCurves: [\r\n      {\r\n        currency: 'USD',\r\n        curveId: 'USD6M',\r\n        quotes: [\r\n          { tenor: '0D/1D', quoteName: 'MM/USD/0D/1D', value: 0.05, type: 'DEPOSIT' },\r\n          { tenor: '1D/1W', quoteName: 'MM/USD/1D/1W', value: 0.0501, type: 'DEPOSIT' },\r\n          { tenor: '1W/1M', quoteName: 'MM/USD/1W/1M', value: 0.0502, type: 'DEPOSIT' },\r\n          { tenor: '1M/3M', quoteName: 'IR_SWAP/USD/1M/3M', value: 0.0505, type: 'SWAP' },\r\n          { tenor: '3M/6M', quoteName: 'IR_SWAP/USD/3M/6M', value: 0.051, type: 'SWAP' },\r\n        ],\r\n      },\r\n    ],\r\n    defaultCurves: [\r\n      {\r\n        referenceEntity: 'TECH_CORP',\r\n        currency: 'USD',\r\n        curveId: 'TECH_CORP_SR_USD',\r\n        recoveryRate: 0.4,\r\n        spreadQuotes: [\r\n          { tenor: '6M', quoteName: 'CDS/TECH_CORP/USD/6M', value: 0.015, type: 'CDS_SPREAD' },\r\n          { tenor: '1Y', quoteName: 'CDS/TECH_CORP/USD/1Y', value: 0.0155, type: 'CDS_SPREAD' },\r\n          { tenor: '2Y', quoteName: 'CDS/TECH_CORP/USD/2Y', value: 0.016, type: 'CDS_SPREAD' },\r\n          { tenor: '3Y', quoteName: 'CDS/TECH_CORP/USD/3Y', value: 0.0165, type: 'CDS_SPREAD' },\r\n          { tenor: '5Y', quoteName: 'CDS/TECH_CORP/USD/5Y', value: 0.017, type: 'CDS_SPREAD' },\r\n        ],\r\n      },\r\n    ],\r\n    fxRates: {\r\n      'FX/EUR/USD': 1.1,\r\n      'FX/GBP/USD': 1.25,\r\n    },\r\n    marketDataFileContent: `# Market Data File for CDS Calculation\r\n# Valuation Date: 2025-10-15\r\n\r\n# Yield Curves\r\nMM/USD/0D/1D 0.050000\r\nMM/USD/1D/1W 0.050100\r\nMM/USD/1W/1M 0.050200\r\nIR_SWAP/USD/1M/3M 0.050500\r\nIR_SWAP/USD/3M/6M 0.051000\r\n\r\n# FX Rates\r\nFX/EUR/USD 1.10\r\nFX/GBP/USD 1.25\r\n\r\n# CDS Curves\r\nCDS/TECH_CORP/USD/6M 0.0150\r\nCDS/TECH_CORP/USD/1Y 0.0155\r\nCDS/TECH_CORP/USD/2Y 0.0160\r\nCDS/TECH_CORP/USD/3Y 0.0165\r\nCDS/TECH_CORP/USD/5Y 0.0170\r\nRECOVERY_RATE/TECH_CORP/USD 0.40`,\r\n    todaysMarketFileContent: `<?xml version=\"1.0\"?>\r\n<TodaysMarket>\r\n  <Configuration id=\"default\">\r\n    <DiscountingCurvesId>default</DiscountingCurvesId>\r\n    <IndexForwardingCurvesId>default</IndexForwardingCurvesId>\r\n  </Configuration>\r\n  <DiscountingCurves id=\"default\">\r\n    <DiscountingCurve currency=\"USD\">Yield/USD/USD6M</DiscountingCurve>\r\n  </DiscountingCurves>\r\n  <DefaultCurves id=\"default\">\r\n    <DefaultCurve name=\"TECH_CORP\">Default/USD/TECH_CORP_SR_USD</DefaultCurve>\r\n  </DefaultCurves>\r\n</TodaysMarket>`,\r\n    curveConfigFileContent: `<?xml version=\"1.0\"?>\r\n<CurveConfiguration>\r\n  <YieldCurves>\r\n    <YieldCurve>\r\n      <CurveId>USD6M</CurveId>\r\n      <CurveDescription>USD 6M yield curve</CurveDescription>\r\n      <Currency>USD</Currency>\r\n    </YieldCurve>\r\n  </YieldCurves>\r\n  <DefaultCurves>\r\n    <DefaultCurve>\r\n      <CurveId>TECH_CORP_SR_USD</CurveId>\r\n      <CurveDescription>TECH_CORP SR CDS USD</CurveDescription>\r\n      <Currency>USD</Currency>\r\n      <Type>SpreadCDS</Type>\r\n    </DefaultCurve>\r\n  </DefaultCurves>\r\n</CurveConfiguration>`,\r\n  };\r\n\r\n  const snapshot = marketDataSnapshot || mockSnapshot;\r\n\r\n  console.log('📊 Using snapshot data:', {\r\n    isFromProps: !!marketDataSnapshot,\r\n    isMockData: !marketDataSnapshot,\r\n    hasDiscountCurves: !!snapshot?.discountCurves?.length,\r\n    hasDefaultCurves: !!snapshot?.defaultCurves?.length,\r\n    hasFxRates: !!snapshot?.fxRates && Object.keys(snapshot.fxRates).length > 0,\r\n    discountCurvesCount: snapshot?.discountCurves?.length || 0,\r\n    defaultCurvesCount: snapshot?.defaultCurves?.length || 0,\r\n    fxRatesCount: snapshot?.fxRates ? Object.keys(snapshot.fxRates).length : 0,\r\n  });\r\n\r\n  if (!snapshot) {\r\n    return (\r\n      <div className=\"bg-fd-darker p-6 rounded-md border border-dashed border-fd-border text-center\">\r\n        <svg\r\n          className=\"w-12 h-12 text-fd-text-muted mx-auto mb-3\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2\"\r\n            d=\"M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n          ></path>\r\n        </svg>\r\n        <p className=\"text-fd-text-muted\">\r\n          No market data snapshot available for this calculation.\r\n        </p>\r\n        <p className=\"text-fd-text-muted text-sm mt-2\">\r\n          Market data snapshots are captured with each risk calculation to provide full\r\n          transparency.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const formatDate = (dateString?: string) => {\r\n    if (!dateString) return 'N/A';\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    });\r\n  };\r\n\r\n  const formatBasisPoints = (value?: number) => {\r\n    if (value === undefined || value === null) return '-';\r\n    return (value * 10000).toFixed(2) + ' bps';\r\n  };\r\n\r\n  const formatPercent = (value?: number) => {\r\n    if (value === undefined || value === null) return '-';\r\n    return (value * 100).toFixed(2) + '%';\r\n  };\r\n\r\n  const formatRate = (value?: number) => {\r\n    if (value === undefined || value === null) return '-';\r\n    return value.toFixed(6);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with view toggle */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-fd-text flex items-center gap-2\">\r\n            <svg\r\n              className=\"w-5 h-5 text-fd-green\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\r\n              ></path>\r\n            </svg>\r\n            Market Data Used for Calculation\r\n          </h3>\r\n          <p className=\"text-sm text-fd-text-muted mt-1\">\r\n            Valuation Date: {formatDate(snapshot.valuationDate)} • Base Currency:{' '}\r\n            {snapshot.baseCurrency || 'USD'}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex gap-2\">\r\n          <button\r\n            onClick={() => {\r\n              console.log('🟢 Structured View button clicked');\r\n              handleViewChange('structured');\r\n            }}\r\n            className={`px-3 py-1.5 text-sm font-medium rounded transition-colors ${\r\n              activeView === 'structured'\r\n                ? 'bg-fd-green text-fd-dark'\r\n                : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n            }`}\r\n          >\r\n            Structured View\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              console.log('📄 Raw Files button clicked');\r\n              handleViewChange('raw');\r\n            }}\r\n            className={`px-3 py-1.5 text-sm font-medium rounded transition-colors ${\r\n              activeView === 'raw'\r\n                ? 'bg-fd-green text-fd-dark'\r\n                : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n            }`}\r\n          >\r\n            Raw Files\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {activeView === 'structured' ? (\r\n        <>\r\n          {console.log('🏗️ Rendering structured view...')}\r\n          {/* Discount Curves */}\r\n          {snapshot.discountCurves && snapshot.discountCurves.length > 0 && (\r\n            <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n              <h4 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\"\r\n                  ></path>\r\n                </svg>\r\n                Discount Curves ({snapshot.discountCurves.length})\r\n              </h4>\r\n\r\n              <div className=\"space-y-4\">\r\n                {snapshot.discountCurves.map((curve, idx) => (\r\n                  <div key={idx} className=\"bg-fd-dark rounded p-3\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <span className=\"font-medium text-fd-text\">\r\n                        {curve.currency} - {curve.curveId}\r\n                      </span>\r\n                      <span className=\"text-xs text-fd-text-muted\">\r\n                        {curve.quotes?.length || 0} quotes\r\n                      </span>\r\n                    </div>\r\n\r\n                    {curve.quotes && curve.quotes.length > 0 && (\r\n                      <div className=\"mt-2\">\r\n                        <div className=\"grid grid-cols-4 gap-2 text-xs font-medium text-fd-text-muted border-b border-fd-border pb-1 mb-1\">\r\n                          <span>Tenor</span>\r\n                          <span>Type</span>\r\n                          <span>Quote Name</span>\r\n                          <span className=\"text-right\">Rate</span>\r\n                        </div>\r\n                        {curve.quotes.map((quote, qIdx) => (\r\n                          <div\r\n                            key={qIdx}\r\n                            className=\"grid grid-cols-4 gap-2 text-xs py-1 hover:bg-fd-darker\"\r\n                          >\r\n                            <span className=\"font-mono text-fd-text\">{quote.tenor}</span>\r\n                            <span className=\"text-fd-text-muted\">{quote.type}</span>\r\n                            <span className=\"font-mono text-fd-text-muted text-xs\">\r\n                              {quote.quoteName}\r\n                            </span>\r\n                            <span className=\"font-mono text-fd-text text-right\">\r\n                              {formatRate(quote.value)}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Default/Credit Curves */}\r\n          {snapshot.defaultCurves && snapshot.defaultCurves.length > 0 && (\r\n            <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n              <h4 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-1.964-1.333-2.732 0L3.268 16c-.77 1.333.192 3 1.732 3z\"\r\n                  ></path>\r\n                </svg>\r\n                Credit/Default Curves ({snapshot.defaultCurves.length})\r\n              </h4>\r\n\r\n              <div className=\"space-y-4\">\r\n                {snapshot.defaultCurves.map((curve, idx) => (\r\n                  <div key={idx} className=\"bg-fd-dark rounded p-3\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <div>\r\n                        <span className=\"font-medium text-fd-text\">{curve.referenceEntity}</span>\r\n                        <span className=\"text-fd-text-muted ml-2 text-sm\">\r\n                          ({curve.currency} - {curve.curveId})\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-4\">\r\n                        {curve.recoveryRate !== undefined && curve.recoveryRate !== null && (\r\n                          <div className=\"text-right\">\r\n                            <div className=\"text-xs text-fd-text-muted\">Recovery Rate</div>\r\n                            <div className=\"font-mono text-fd-green font-semibold\">\r\n                              {formatPercent(curve.recoveryRate)}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                        <span className=\"text-xs text-fd-text-muted\">\r\n                          {curve.spreadQuotes?.length || 0} spreads\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {curve.spreadQuotes && curve.spreadQuotes.length > 0 && (\r\n                      <div className=\"mt-2\">\r\n                        <div className=\"grid grid-cols-3 gap-2 text-xs font-medium text-fd-text-muted border-b border-fd-border pb-1 mb-1\">\r\n                          <span>Tenor</span>\r\n                          <span>Quote Name</span>\r\n                          <span className=\"text-right\">Spread</span>\r\n                        </div>\r\n                        {curve.spreadQuotes.map((quote, qIdx) => (\r\n                          <div\r\n                            key={qIdx}\r\n                            className=\"grid grid-cols-3 gap-2 text-xs py-1 hover:bg-fd-darker\"\r\n                          >\r\n                            <span className=\"font-mono text-fd-text\">{quote.tenor}</span>\r\n                            <span className=\"font-mono text-fd-text-muted text-xs\">\r\n                              {quote.quoteName}\r\n                            </span>\r\n                            <span className=\"font-mono text-fd-text text-right\">\r\n                              {formatBasisPoints(quote.value)}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* FX Rates */}\r\n          {snapshot.fxRates && Object.keys(snapshot.fxRates).length > 0 && (\r\n            <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n              <h4 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                  ></path>\r\n                </svg>\r\n                FX Rates ({Object.keys(snapshot.fxRates).length})\r\n              </h4>\r\n\r\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\r\n                {Object.entries(snapshot.fxRates).map(([pair, rate]) => (\r\n                  <div key={pair} className=\"bg-fd-dark rounded p-2\">\r\n                    <div className=\"text-xs text-fd-text-muted\">{pair}</div>\r\n                    <div className=\"font-mono text-fd-text font-medium\">{rate.toFixed(6)}</div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          {console.log('📄 Rendering raw files view...')}\r\n          {/* Raw Files View */}\r\n          <div className=\"bg-fd-darker rounded-md border border-fd-border overflow-hidden\">\r\n            {/* File tabs */}\r\n            <div className=\"flex border-b border-fd-border bg-fd-dark\">\r\n              {[\r\n                { key: 'market', label: 'market.txt', icon: '📊' },\r\n                { key: 'todaysmarket', label: 'todaysmarket.xml', icon: '🗓️' },\r\n                { key: 'curveconfig', label: 'curveconfig.xml', icon: '📈' },\r\n              ].map((tab) => (\r\n                <button\r\n                  key={tab.key}\r\n                  onClick={() => setActiveRawFile(tab.key as any)}\r\n                  className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n                    activeRawFile === tab.key\r\n                      ? 'border-fd-green text-fd-text bg-fd-darker'\r\n                      : 'border-transparent text-fd-text-muted hover:text-fd-text hover:bg-fd-darker'\r\n                  }`}\r\n                >\r\n                  <span className=\"mr-2\">{tab.icon}</span>\r\n                  {tab.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n\r\n            {/* File content */}\r\n            <div className=\"p-4 bg-fd-darker\">\r\n              <pre className=\"text-xs font-mono text-fd-text bg-fd-dark p-4 rounded overflow-x-auto max-h-96 overflow-y-auto border border-fd-border\">\r\n                {activeRawFile === 'market' &&\r\n                  (snapshot.marketDataFileContent || 'No market data file content available')}\r\n                {activeRawFile === 'todaysmarket' &&\r\n                  (snapshot.todaysMarketFileContent || 'No todaysmarket.xml content available')}\r\n                {activeRawFile === 'curveconfig' &&\r\n                  (snapshot.curveConfigFileContent || 'No curveconfig.xml content available')}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"text-xs text-fd-text-muted bg-fd-dark rounded p-3 border border-fd-border\">\r\n            <p>\r\n              💡 <strong>Tip:</strong> These are the exact files that were sent to ORE for this\r\n              calculation. You can use these to reproduce the calculation or audit the pricing.\r\n            </p>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketDataPanel;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\RegressionStatusBadge.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":17,"column":88,"nodeType":"MemberExpression","endLine":17,"endColumn":104}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n\r\ninterface Props {\r\n  status: 'PASS' | 'FAIL' | 'UNKNOWN';\r\n  lastRun?: string;\r\n}\r\n\r\nconst colorMap: Record<string, string> = {\r\n  PASS: 'bg-green-600 text-white',\r\n  FAIL: 'bg-red-600 text-white',\r\n  UNKNOWN: 'bg-gray-600 text-white',\r\n};\r\n\r\nconst RegressionStatusBadge: React.FC<Props> = ({ status, lastRun }) => {\r\n  return (\r\n    <span\r\n      className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-semibold ${colorMap[status]}`}\r\n      title={\r\n        lastRun ? `Last regression: ${new Date(lastRun).toLocaleString()}` : 'No regression run yet'\r\n      }\r\n    >\r\n      Regression: {status}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default RegressionStatusBadge;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\RiskMeasuresPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CashflowScheduleTable' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refreshKey' is assigned a value but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRefreshKey' is assigned a value but never used.","line":24,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addedDays' is assigned a value but never used.","line":172,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkForPayoutEvent', 'loadCouponPeriods', and 'loadRiskMeasures'. Either include them or remove the dependency array.","line":223,"column":6,"nodeType":"ArrayExpression","endLine":223,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [checkForPayoutEvent, loadCouponPeriods, loadRiskMeasures, tradeId]","fix":{"range":[7910,7919],"text":"[checkForPayoutEvent, loadCouponPeriods, loadRiskMeasures, tradeId]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'unpaidCoupons' is assigned a value but never used.","line":494,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":494,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { fetchRiskMeasures } from '../../services/risk/riskService';\r\nimport { RiskMeasures } from '../../services/risk/riskTypes';\r\nimport CashflowScheduleTable from './CashflowScheduleTable';\r\nimport { lifecycleService } from '../../services/lifecycleService';\r\nimport { CouponPeriod } from '../../types/lifecycle';\r\nimport { CDSTradeResponse } from '../../services/cdsTradeService';\r\nimport { creditEventService } from '../../services/creditEventService';\r\n\r\ninterface Props {\r\n  tradeId: number;\r\n  trade?: CDSTradeResponse; // Optional trade object for richer display\r\n}\r\n\r\nconst RiskMeasuresPanel: React.FC<Props> = ({ tradeId, trade }) => {\r\n  const [data, setData] = useState<RiskMeasures | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [couponPeriods, setCouponPeriods] = useState<CouponPeriod[]>([]);\r\n  const [payingPeriodId, setPayingPeriodId] = useState<number | null>(null);\r\n  const [recalculating, setRecalculating] = useState(false);\r\n  const [generatingSchedule, setGeneratingSchedule] = useState(false);\r\n  const [valuationDate, setValuationDate] = useState<string | undefined>(undefined); // undefined means \"today\"\r\n  const [refreshKey, setRefreshKey] = useState(0); // Used to force refresh when clicking same button\r\n  const [hasPayoutEvent, setHasPayoutEvent] = useState(false);\r\n\r\n  // Check if trade is in a final state (settled or terminated) where no modifications are allowed\r\n  const isTradeFinalized = trade && (\r\n    trade.tradeStatus === 'SETTLED_CASH' || \r\n    trade.tradeStatus === 'SETTLED_PHYSICAL' ||\r\n    trade.tradeStatus === 'TERMINATED'\r\n  );\r\n\r\n  const checkForPayoutEvent = async () => {\r\n    try {\r\n      const events = await creditEventService.getCreditEventsForTrade(tradeId);\r\n      const payoutExists = events.some((event) => event.eventType === 'PAYOUT');\r\n      setHasPayoutEvent(payoutExists);\r\n    } catch (error) {\r\n      console.error('Failed to check for payout events:', error);\r\n      setHasPayoutEvent(false);\r\n    }\r\n  };\r\n\r\n  const loadRiskMeasures = async (customValuationDate?: string, forceRefresh: boolean = false) => {\r\n    if (!tradeId) return;\r\n    setLoading(true);\r\n    try {\r\n      // When forceRefresh is true, use customValuationDate directly (even if undefined)\r\n      // Otherwise fall back to state's valuationDate\r\n      const dateToUse = forceRefresh ? customValuationDate : customValuationDate || valuationDate;\r\n      console.log(`🔍 DEBUG loadRiskMeasures called with:`, {\r\n        customValuationDate,\r\n        valuationDate,\r\n        forceRefresh,\r\n        dateToUse,\r\n        tradeId,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      console.log(\r\n        `Loading risk measures for trade ${tradeId} with valuation date: ${dateToUse || 'today'}...`\r\n      );\r\n      const measures = await fetchRiskMeasures(tradeId, dateToUse);\r\n      console.log('Risk measures loaded:', {\r\n        npv: measures.npv,\r\n        currency: measures.currency,\r\n        timestamp: measures.valuationTimestamp,\r\n        loadedAt: new Date().toISOString(),\r\n      });\r\n      setData(measures);\r\n      setError(null);\r\n    } catch (e: any) {\r\n      console.error('Failed to load risk measures:', e);\r\n      setError(e.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadCouponPeriods = async () => {\r\n    if (!tradeId) return;\r\n    try {\r\n      console.log('Loading coupon periods for trade:', tradeId);\r\n      const periods = await lifecycleService.getCouponSchedule(tradeId);\r\n      console.log('Loaded coupon periods:', periods.length, periods);\r\n      setCouponPeriods(periods);\r\n    } catch (e: any) {\r\n      console.error('Failed to load coupon periods:', e);\r\n      setCouponPeriods([]); // Ensure it's set to empty array on error\r\n    }\r\n  };\r\n\r\n  const handlePayCoupon = async (periodId: number, payOnTime: boolean = false) => {\r\n    setPayingPeriodId(periodId);\r\n    try {\r\n      await lifecycleService.payCoupon(tradeId, periodId, payOnTime);\r\n      console.log('Coupon paid successfully, reloading data...');\r\n\r\n      // Reload coupon periods to reflect payment\r\n      await loadCouponPeriods();\r\n\r\n      // Trigger risk recalculation - CRITICAL: Clear old data first to force re-render\r\n      setRecalculating(true);\r\n      setData(null); // Force clear to ensure React detects the change\r\n\r\n      // Wait a bit to ensure backend has processed the payment\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n      await loadRiskMeasures();\r\n      console.log('Risk measures reloaded after coupon payment');\r\n      setRecalculating(false);\r\n    } catch (e: any) {\r\n      alert('Failed to pay coupon: ' + e.message);\r\n      setRecalculating(false);\r\n    } finally {\r\n      setPayingPeriodId(null);\r\n    }\r\n  };\r\n\r\n  const handleUnpayCoupon = async (periodId: number) => {\r\n    setPayingPeriodId(periodId);\r\n    try {\r\n      await lifecycleService.unpayCoupon(tradeId, periodId);\r\n      console.log('Coupon payment cancelled successfully, reloading data...');\r\n\r\n      // Reload coupon periods to reflect cancellation\r\n      await loadCouponPeriods();\r\n\r\n      // Trigger risk recalculation\r\n      setRecalculating(true);\r\n      setData(null);\r\n\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n      await loadRiskMeasures();\r\n      console.log('Risk measures reloaded after coupon cancellation');\r\n      setRecalculating(false);\r\n    } catch (e: any) {\r\n      alert('Failed to cancel coupon payment: ' + e.message);\r\n      setRecalculating(false);\r\n    } finally {\r\n      setPayingPeriodId(null);\r\n    }\r\n  };\r\n\r\n  const handleGenerateSchedule = async () => {\r\n    setGeneratingSchedule(true);\r\n    try {\r\n      await lifecycleService.generateCouponSchedule(tradeId);\r\n      // Reload the schedule\r\n      await loadCouponPeriods();\r\n    } catch (e: any) {\r\n      alert('Failed to generate coupon schedule: ' + e.message);\r\n    } finally {\r\n      setGeneratingSchedule(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to calculate business days offset (simplified - assumes no holidays)\r\n  const getBusinessDaysFromToday = (days: number): string => {\r\n    const today = new Date();\r\n    const target = new Date(today);\r\n\r\n    let addedDays = 0;\r\n    let daysToAdd = days;\r\n\r\n    while (daysToAdd > 0) {\r\n      target.setDate(target.getDate() + 1);\r\n      const dayOfWeek = target.getDay();\r\n      // Skip weekends (0 = Sunday, 6 = Saturday)\r\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\r\n        addedDays++;\r\n        daysToAdd--;\r\n      }\r\n    }\r\n\r\n    return target.toISOString().split('T')[0];\r\n  };\r\n\r\n  const handleQuickValuationDate = async (option: 'today' | 't+1' | 't+7' | 't+45') => {\r\n    let newDate: string | undefined = undefined;\r\n\r\n    switch (option) {\r\n      case 'today':\r\n        newDate = undefined; // undefined means use backend's \"today\"\r\n        break;\r\n      case 't+1':\r\n        newDate = getBusinessDaysFromToday(1);\r\n        break;\r\n      case 't+7':\r\n        newDate = getBusinessDaysFromToday(7);\r\n        break;\r\n      case 't+45':\r\n        newDate = getBusinessDaysFromToday(45);\r\n        break;\r\n    }\r\n\r\n    console.log(`🔍 DEBUG handleQuickValuationDate:`, {\r\n      option,\r\n      newDate,\r\n      currentValuationDate: valuationDate,\r\n    });\r\n\r\n    // Update state first\r\n    setValuationDate(newDate);\r\n\r\n    // Force a fresh fetch by clearing data first\r\n    setData(null);\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    // Small delay to ensure state updates propagate\r\n    await new Promise((resolve) => setTimeout(resolve, 10));\r\n\r\n    // Now fetch with the new date, passing forceRefresh=true to use newDate directly\r\n    await loadRiskMeasures(newDate, true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRiskMeasures();\r\n    loadCouponPeriods();\r\n    checkForPayoutEvent();\r\n  }, [tradeId]);\r\n\r\n  if (!tradeId) return <div className=\"text-fd-text\">No trade selected</div>;\r\n\r\n  // Show payout message if PAYOUT event exists\r\n  if (hasPayoutEvent) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"bg-fd-darker p-6 rounded-md border-2 border-fd-green\">\r\n          <div className=\"flex items-center gap-3 mb-4\">\r\n            <div className=\"w-12 h-12 bg-fd-green/20 rounded-full flex items-center justify-center\">\r\n              <svg\r\n                className=\"w-6 h-6 text-fd-green\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                ></path>\r\n              </svg>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-fd-green font-semibold text-lg\">CDS Protection Paid Out</h3>\r\n              <p className=\"text-fd-text-muted text-sm\">\r\n                A credit event has triggered payout - all risk measures are now zero\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\r\n            <div className=\"bg-fd-dark rounded p-4\">\r\n              <div className=\"text-xs text-fd-text-muted mb-1\">Net Present Value</div>\r\n              <div className=\"text-2xl font-bold text-fd-green font-mono\">$0.00</div>\r\n            </div>\r\n            <div className=\"bg-fd-dark rounded p-4\">\r\n              <div className=\"text-xs text-fd-text-muted mb-1\">Jump-to-Default (JTD)</div>\r\n              <div className=\"text-2xl font-bold text-fd-green font-mono\">$0.00</div>\r\n            </div>\r\n            <div className=\"bg-fd-dark rounded p-4\">\r\n              <div className=\"text-xs text-fd-text-muted mb-1\">Fair Spread</div>\r\n              <div className=\"text-2xl font-bold text-fd-green font-mono\">0 bps</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-6 bg-fd-dark rounded p-4\">\r\n            <div className=\"flex items-start gap-2\">\r\n              <svg\r\n                className=\"w-5 h-5 text-fd-green mt-0.5 flex-shrink-0\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                ></path>\r\n              </svg>\r\n              <div className=\"text-sm text-fd-text-muted\">\r\n                <p className=\"mb-2\">\r\n                  This trade has experienced a credit event (Bankruptcy or Restructuring) resulting\r\n                  in payout. The CDS contract has fulfilled its protection obligation.\r\n                </p>\r\n                <p>\r\n                  All risk exposures have been reduced to zero as the contract has settled and no\r\n                  further obligations remain.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Paid Coupons Information */}\r\n          <div className=\"mt-6 bg-fd-dark rounded p-4\">\r\n            <h4 className=\"text-fd-text font-semibold mb-3 flex items-center gap-2\">\r\n              <svg\r\n                className=\"w-5 h-5 text-fd-green\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\"\r\n                ></path>\r\n              </svg>\r\n              Coupon Payment History\r\n            </h4>\r\n            {couponPeriods.length === 0 ? (\r\n              <p className=\"text-fd-text-muted text-sm\">\r\n                No coupon schedule was generated for this trade.\r\n              </p>\r\n            ) : (\r\n              (() => {\r\n                const paidCoupons = couponPeriods.filter((p) => p.paid === true);\r\n                if (paidCoupons.length === 0) {\r\n                  return (\r\n                    <p className=\"text-fd-text-muted text-sm\">\r\n                      No coupons were paid before the credit event occurred.\r\n                    </p>\r\n                  );\r\n                }\r\n                return (\r\n                  <div className=\"space-y-2\">\r\n                    <p className=\"text-fd-text text-sm mb-3\">\r\n                      {paidCoupons.length} coupon{paidCoupons.length > 1 ? 's' : ''} paid before\r\n                      credit event:\r\n                    </p>\r\n                    <div className=\"space-y-2 max-h-48 overflow-y-auto\">\r\n                      {paidCoupons.map((period, index) => (\r\n                        <div\r\n                          key={period.id}\r\n                          className=\"bg-fd-darker rounded p-3 flex items-center justify-between border border-fd-border\"\r\n                        >\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <svg\r\n                                className=\"w-4 h-4 text-fd-green\"\r\n                                fill=\"currentColor\"\r\n                                viewBox=\"0 0 20 20\"\r\n                              >\r\n                                <path\r\n                                  fillRule=\"evenodd\"\r\n                                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\r\n                                  clipRule=\"evenodd\"\r\n                                ></path>\r\n                              </svg>\r\n                              <span className=\"text-fd-text text-sm font-medium\">\r\n                                Period #{index + 1}\r\n                              </span>\r\n                              <span className=\"text-fd-text-muted text-xs\">\r\n                                ({new Date(period.periodStartDate).toLocaleDateString()} -{' '}\r\n                                {new Date(period.periodEndDate).toLocaleDateString()})\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"text-xs text-fd-text-muted mt-1\">\r\n                              Payment Date: {new Date(period.paymentDate).toLocaleDateString()}\r\n                              {period.paidAt && (\r\n                                <span className=\"ml-2 text-fd-green\">\r\n                                  ✓ Paid: {new Date(period.paidAt).toLocaleDateString()}\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <div className=\"text-fd-green font-mono font-semibold\">\r\n                              {new Intl.NumberFormat('en-US', {\r\n                                style: 'currency',\r\n                                currency: data?.currency || 'USD',\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                              }).format(period.couponAmount || 0)}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })()\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"flex items-center gap-2 text-fd-text\">\r\n        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-fd-green\"></div>\r\n        <span>Calculating risk measures with ORE...</span>\r\n      </div>\r\n    );\r\n  if (error)\r\n    return (\r\n      <div className=\"text-red-400\" role=\"alert\">\r\n        Failed: {error}\r\n      </div>\r\n    );\r\n  if (!data) return null;\r\n\r\n  const formatValue = (value: number | null | undefined, decimals: number = 2): string => {\r\n    if (value === null || value === undefined) return '-';\r\n    return typeof value === 'number'\r\n      ? value.toLocaleString(undefined, {\r\n          minimumFractionDigits: decimals,\r\n          maximumFractionDigits: decimals,\r\n        })\r\n      : String(value);\r\n  };\r\n\r\n  const formatCurrency = (value: number | null | undefined, currency: string = 'USD'): string => {\r\n    if (value === null || value === undefined) return '-';\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: currency,\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    }).format(value);\r\n  };\r\n\r\n  const formatBasisPoints = (value: number | null | undefined): string => {\r\n    if (value === null || value === undefined) return '-';\r\n    return (value * 10000).toFixed(2) + ' bps';\r\n  };\r\n\r\n  // Calculate Risky PV01 if ORE doesn't provide it\r\n  // Formula: |Premium Leg NPV + Accrued Premium| / (Notional × Running Spread)\r\n  const calculateRiskyPV01 = (): number | null => {\r\n    // If ORE provided it, use that\r\n    if (data.riskyAnnuity !== null && data.riskyAnnuity !== undefined) {\r\n      return data.riskyAnnuity;\r\n    }\r\n\r\n    // Otherwise calculate it from available data\r\n    const premiumLegNPV = data.premiumLegNPVClean || 0;\r\n    const accruedPremium = data.accruedPremium || 0;\r\n    const notional = data.currentNotional || data.originalNotional;\r\n    const runningSpread = data.fairSpreadClean; // Fair spread in decimal form\r\n\r\n    if (!notional || !runningSpread || runningSpread === 0) {\r\n      return null;\r\n    }\r\n\r\n    const riskyPV01 = Math.abs(premiumLegNPV + accruedPremium) / (notional * runningSpread);\r\n    return riskyPV01;\r\n  };\r\n\r\n  const riskyPV01 = calculateRiskyPV01();\r\n\r\n  // Find the next unpaid coupon (earliest payment date among unpaid)\r\n  const getNextUnpaidCoupon = (): CouponPeriod | null => {\r\n    const unpaidCoupons = couponPeriods\r\n      .filter((p) => !p.paid)\r\n      .sort((a, b) => new Date(a.paymentDate).getTime() - new Date(b.paymentDate).getTime());\r\n    return unpaidCoupons.length > 0 ? unpaidCoupons[0] : null;\r\n  };\r\n\r\n  // Find the most recently paid coupon (latest payment date among paid coupons)\r\n  const getMostRecentlyPaidCoupon = (): CouponPeriod | null => {\r\n    const paidCoupons = couponPeriods\r\n      .filter((p) => p.paid)\r\n      .sort((a, b) => new Date(b.paymentDate).getTime() - new Date(a.paymentDate).getTime());\r\n    return paidCoupons.length > 0 ? paidCoupons[0] : null;\r\n  };\r\n\r\n  const nextUnpaidCoupon = getNextUnpaidCoupon();\r\n  const mostRecentlyPaidCoupon = getMostRecentlyPaidCoupon();\r\n\r\n  const canPayCoupon = (period: CouponPeriod): boolean => {\r\n    if (period.paid) return false;\r\n    if (!nextUnpaidCoupon) return false;\r\n    return period.id === nextUnpaidCoupon.id;\r\n  };\r\n\r\n  const canUnpayCoupon = (period: CouponPeriod): boolean => {\r\n    if (!period.paid) return false;\r\n    if (!mostRecentlyPaidCoupon) return false;\r\n    return period.id === mostRecentlyPaidCoupon.id;\r\n  };\r\n\r\n  // Calculate coupon statistics\r\n  const totalCoupons = couponPeriods.length;\r\n  const paidCoupons = couponPeriods.filter((p) => p.paid).length;\r\n  const unpaidCoupons = totalCoupons - paidCoupons;\r\n  const totalPaidAmount = couponPeriods\r\n    .filter((p) => p.paid && p.couponAmount)\r\n    .reduce((sum, p) => sum + (p.couponAmount || 0), 0);\r\n\r\n  // Derive frequency and maturity from coupon periods\r\n  const getScheduleDescription = () => {\r\n    if (couponPeriods.length === 0) return '';\r\n\r\n    // Get maturity from last period\r\n    const lastPeriod = couponPeriods[couponPeriods.length - 1];\r\n    const maturityDate = new Date(lastPeriod.periodEndDate);\r\n    const maturityYear = maturityDate.getFullYear();\r\n    const maturityMonth = maturityDate.toLocaleDateString('en-US', { month: 'short' });\r\n\r\n    // Use trade's premium frequency if available\r\n    let frequency = 'Periodic';\r\n    if (trade?.premiumFrequency) {\r\n      // Map the database values to display names\r\n      const frequencyMap: Record<string, string> = {\r\n        MONTHLY: 'Monthly',\r\n        QUARTERLY: 'Quarterly',\r\n        SEMI_ANNUAL: 'Semi-annual',\r\n        ANNUAL: 'Annual',\r\n      };\r\n      frequency = frequencyMap[trade.premiumFrequency] || trade.premiumFrequency;\r\n    } else if (couponPeriods.length > 1) {\r\n      // Fall back to calculating from payment date intervals if trade data not available\r\n      const firstPayment = new Date(couponPeriods[0].paymentDate);\r\n      const secondPayment = new Date(couponPeriods[1].paymentDate);\r\n      const daysDiff = Math.round(\r\n        (secondPayment.getTime() - firstPayment.getTime()) / (1000 * 60 * 60 * 24)\r\n      );\r\n\r\n      // More lenient ranges for CDS IMM schedules\r\n      // Quarterly: ~91 days (3 months)\r\n      // Semi-annual: ~182 days (6 months)\r\n      // Monthly: ~30 days\r\n      // Annual: ~365 days\r\n      if (daysDiff >= 25 && daysDiff <= 35) frequency = 'Monthly';\r\n      else if (daysDiff >= 80 && daysDiff <= 100) frequency = 'Quarterly';\r\n      else if (daysDiff >= 170 && daysDiff <= 195) frequency = 'Semi-annual';\r\n      else if (daysDiff >= 350 && daysDiff <= 375) frequency = 'Annual';\r\n    }\r\n\r\n    return `${frequency} until ${maturityMonth} ${maturityYear}`;\r\n  };\r\n\r\n  const hasCashflows = data.cashflows && data.cashflows.length > 0;\r\n  const hasCDSMetrics = data.fairSpreadClean !== null || data.protectionLegNPV !== null;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Core ORE Valuation */}\r\n      <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n        <div className=\"flex justify-between items-start mb-3\">\r\n          <h3 className=\"text-fd-green font-semibold flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z\"\r\n              ></path>\r\n            </svg>\r\n            ORE Valuation\r\n          </h3>\r\n\r\n          {/* Valuation Date Quick Selector */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-xs text-fd-text-muted\">Valuation Date:</span>\r\n            <div className=\"flex gap-1\">\r\n              <button\r\n                onClick={() => handleQuickValuationDate('today')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === undefined || valuationDate === ''\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                Today\r\n              </button>\r\n              <button\r\n                onClick={() => handleQuickValuationDate('t+1')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === getBusinessDaysFromToday(1)\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                T+1\r\n              </button>\r\n              <button\r\n                onClick={() => handleQuickValuationDate('t+7')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === getBusinessDaysFromToday(7)\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                T+7\r\n              </button>\r\n              <button\r\n                onClick={() => handleQuickValuationDate('t+45')}\r\n                disabled={loading || recalculating}\r\n                className={`px-2 py-1 text-xs font-medium rounded transition-colors ${\r\n                  valuationDate === getBusinessDaysFromToday(45)\r\n                    ? 'bg-fd-green text-fd-dark'\r\n                    : 'bg-fd-dark text-fd-text hover:bg-fd-border'\r\n                } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              >\r\n                T+45\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div className=\"bg-fd-dark rounded p-3\">\r\n            <div className=\"text-xs text-fd-text-muted mb-1\">Net Present Value</div>\r\n            <div className=\"text-2xl font-bold text-fd-green font-mono\">\r\n              {formatCurrency(data.npv, data.currency)}\r\n            </div>\r\n          </div>\r\n          <div className=\"bg-fd-dark rounded p-3\">\r\n            <div className=\"text-xs text-fd-text-muted mb-1\">Currency</div>\r\n            <div className=\"text-2xl font-bold text-fd-text font-mono\">\r\n              {data.currency || 'USD'}\r\n            </div>\r\n          </div>\r\n          <div className=\"bg-fd-dark rounded p-3\">\r\n            <div className=\"text-xs text-fd-text-muted mb-1\">Valuation Time</div>\r\n            <div className=\"text-sm text-fd-text\">\r\n              {new Date(data.valuationTimestamp).toLocaleString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* CDS-Specific Metrics (if available) */}\r\n      {hasCDSMetrics && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\"\r\n              ></path>\r\n            </svg>\r\n            CDS Valuation Breakdown\r\n          </h3>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 text-sm\">\r\n            {data.jtd !== null && data.jtd !== undefined && (\r\n              <div className=\"md:col-span-2 lg:col-span-4 bg-fd-dark rounded p-3 border-l-4 border-fd-green\">\r\n                <span className=\"text-fd-text-muted\">Jump-to-Default (JTD) Exposure:</span>\r\n                <div className=\"font-mono text-fd-green font-bold text-xl mt-1\">\r\n                  {formatCurrency(data.jtd, data.currency)}\r\n                </div>\r\n                <div className=\"text-xs text-fd-text-muted mt-1\">\r\n                  Potential loss if reference entity defaults immediately\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Fair Spread (Clean):</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatBasisPoints(data.fairSpreadClean)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Fair Spread (Dirty):</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatBasisPoints(data.fairSpreadDirty)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Protection Leg NPV:</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatCurrency(data.protectionLegNPV, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Premium Leg NPV:</span>\r\n              <div className=\"font-mono text-fd-text font-semibold\">\r\n                {formatCurrency(data.premiumLegNPVClean, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Accrued Premium:</span>\r\n              <div className=\"font-mono text-fd-text\">\r\n                {formatCurrency(data.accruedPremium, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Upfront Premium:</span>\r\n              <div className=\"font-mono text-fd-text\">\r\n                {formatCurrency(data.upfrontPremium, data.currency)}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Coupon Leg BPS:</span>\r\n              <div className=\"font-mono text-fd-text\">{formatValue(data.couponLegBPS, 2)}</div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-fd-text-muted\">Current Notional:</span>\r\n              <div className=\"font-mono text-fd-text\">\r\n                {formatCurrency(data.currentNotional, data.currency)}\r\n              </div>\r\n            </div>\r\n            {riskyPV01 !== null && (\r\n              <div>\r\n                <span className=\"text-fd-text-muted\">Risky PV01:</span>\r\n                <div className=\"font-mono text-fd-text font-semibold text-fd-green\">\r\n                  {formatValue(riskyPV01, 6)}\r\n                </div>\r\n                <div className=\"text-xs text-fd-text-muted mt-0.5\">\r\n                  {data.riskyAnnuity ? 'From ORE' : 'Calculated'}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {trade?.recoveryRate !== undefined && trade?.recoveryRate !== null && (\r\n              <div>\r\n                <span className=\"text-fd-text-muted\">Recovery Rate:</span>\r\n                <div className=\"font-mono text-fd-text font-semibold\">{trade.recoveryRate}%</div>\r\n              </div>\r\n            )}\r\n            {paidCoupons > 0 && (\r\n              <div>\r\n                <span className=\"text-fd-text-muted\">Total Paid Coupons:</span>\r\n                <div className=\"font-mono text-fd-green font-semibold\">\r\n                  {formatCurrency(totalPaidAmount, data.currency)}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Credit Risk Profile (if available) */}\r\n      {data.defaultProbabilities && data.defaultProbabilities.length > 0 && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-1.964-1.333-2.732 0L3.268 16c-.77 1.333.192 3 1.732 3z\"\r\n              ></path>\r\n            </svg>\r\n            Credit Risk Profile\r\n          </h3>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-fd-text mb-2\">\r\n                Default Probabilities by Period\r\n              </h4>\r\n              <div className=\"space-y-1 text-sm\">\r\n                {data.defaultProbabilities.slice(0, 6).map((prob, idx) => (\r\n                  <div key={idx} className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Period {idx + 1}:</span>\r\n                    <span className=\"font-mono text-fd-text\">{(prob * 100).toFixed(2)}%</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {data.expectedLosses && data.expectedLosses.length > 0 && (\r\n              <div>\r\n                <h4 className=\"text-sm font-medium text-fd-text mb-2\">Expected Losses by Period</h4>\r\n                <div className=\"space-y-1 text-sm\">\r\n                  {data.expectedLosses.slice(0, 6).map((loss, idx) => (\r\n                    <div key={idx} className=\"flex justify-between\">\r\n                      <span className=\"text-fd-text-muted\">Period {idx + 1}:</span>\r\n                      <span className=\"font-mono text-fd-text\">\r\n                        {formatCurrency(loss, data.currency)}\r\n                      </span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Coupon Payment Schedule */}\r\n      {couponPeriods.length > 0 && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z\"\r\n              ></path>\r\n            </svg>\r\n            Coupon Payment Schedule\r\n            <span className=\"ml-auto text-sm font-normal text-fd-text-muted\">\r\n              {paidCoupons} of {totalCoupons} paid\r\n            </span>\r\n            {recalculating && (\r\n              <span className=\"ml-2 text-sm font-normal text-fd-text-muted flex items-center gap-1\">\r\n                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-fd-green\"></div>\r\n                Recalculating risk...\r\n              </span>\r\n            )}\r\n          </h3>\r\n\r\n          {/* Schedule description */}\r\n          <div className=\"mb-3 text-sm text-fd-text-muted italic\">{getScheduleDescription()}</div>\r\n\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full text-sm text-fd-text\">\r\n              <thead>\r\n                <tr className=\"text-left border-b-2 border-fd-border bg-fd-dark\">\r\n                  <th className=\"py-2 px-3 font-medium\">Payment Date</th>\r\n                  <th className=\"py-2 px-3 font-medium\">Period</th>\r\n                  <th className=\"py-2 px-3 font-medium text-right\">Days</th>\r\n                  <th className=\"py-2 px-3 font-medium text-right\">Notional</th>\r\n                  <th className=\"py-2 px-3 font-medium text-right\">Coupon Amount</th>\r\n                  <th className=\"py-2 px-3 font-medium\">Status</th>\r\n                  <th className=\"py-2 px-3 font-medium text-center\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {couponPeriods.map((period) => (\r\n                  <tr\r\n                    key={period.id}\r\n                    className={`border-b border-fd-border hover:bg-fd-dark transition-colors ${period.paid ? 'opacity-60' : ''}`}\r\n                  >\r\n                    <td className=\"py-2 px-3 font-mono\">\r\n                      {new Date(period.paymentDate).toLocaleDateString()}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 text-fd-text-muted\">\r\n                      {new Date(period.periodStartDate).toLocaleDateString()} →{' '}\r\n                      {new Date(period.periodEndDate).toLocaleDateString()}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 font-mono text-right\">{period.accrualDays}</td>\r\n                    <td className=\"py-2 px-3 font-mono text-right\">\r\n                      {formatCurrency(period.notionalAmount, data?.currency)}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 font-mono text-right\">\r\n                      {period.couponAmount\r\n                        ? formatCurrency(period.couponAmount, data?.currency)\r\n                        : '-'}\r\n                    </td>\r\n                    <td className=\"py-2 px-3\">\r\n                      {period.paid ? (\r\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-500/20 text-green-400\">\r\n                          <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                            <path\r\n                              fillRule=\"evenodd\"\r\n                              d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\r\n                              clipRule=\"evenodd\"\r\n                            />\r\n                          </svg>\r\n                          Paid\r\n                        </span>\r\n                      ) : (\r\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-500/20 text-yellow-400\">\r\n                          <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                            <path\r\n                              fillRule=\"evenodd\"\r\n                              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\"\r\n                              clipRule=\"evenodd\"\r\n                            />\r\n                          </svg>\r\n                          Unpaid\r\n                        </span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"py-2 px-3 text-center\">\r\n                      {/* Show Cancel button for the most recently paid coupon */}\r\n                      {period.paid && canUnpayCoupon(period) && !isTradeFinalized && (\r\n                        <div className=\"flex flex-col gap-1 items-center\">\r\n                          <button\r\n                            onClick={() => handleUnpayCoupon(period.id)}\r\n                            disabled={payingPeriodId === period.id || recalculating}\r\n                            title=\"Cancel this payment (for demo)\"\r\n                            className=\"px-2 py-1 text-xs bg-red-600 text-white rounded font-medium hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors w-full\"\r\n                          >\r\n                            {payingPeriodId === period.id ? (\r\n                              <span className=\"flex items-center gap-1 justify-center\">\r\n                                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white\"></div>\r\n                              </span>\r\n                            ) : (\r\n                              '↩ Cancel Payment'\r\n                            )}\r\n                          </button>\r\n                          <span className=\"text-xs text-fd-text-muted\">\r\n                            {new Date(period.paidAt!).toLocaleString()}\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n\r\n                      {/* Show payment timestamp for other paid coupons */}\r\n                      {period.paid && !canUnpayCoupon(period) && period.paidAt && (\r\n                        <span className=\"text-xs text-fd-text-muted\">\r\n                          {new Date(period.paidAt).toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                      \r\n                      {/* Show payment timestamp for finalized trades (no cancel button) */}\r\n                      {period.paid && canUnpayCoupon(period) && isTradeFinalized && (\r\n                        <span className=\"text-xs text-fd-text-muted\">\r\n                          {new Date(period.paidAt!).toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                      \r\n                      {/* Show payment buttons for unpaid coupons */}\r\n                      {!period.paid && !isTradeFinalized && (\r\n                        <div className=\"flex gap-1 justify-center\">\r\n                          <button\r\n                            onClick={() => handlePayCoupon(period.id, true)}\r\n                            disabled={\r\n                              !canPayCoupon(period) || payingPeriodId === period.id || recalculating\r\n                            }\r\n                            title={\r\n                              !canPayCoupon(period)\r\n                                ? 'You must pay earlier coupons first'\r\n                                : 'Pay on the scheduled payment date'\r\n                            }\r\n                            className=\"px-2 py-1 text-xs bg-fd-green text-fd-dark rounded font-medium hover:bg-fd-green-hover disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                          >\r\n                            {payingPeriodId === period.id ? (\r\n                              <span className=\"flex items-center gap-1\">\r\n                                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-fd-dark\"></div>\r\n                              </span>\r\n                            ) : canPayCoupon(period) ? (\r\n                              'Pay On Time'\r\n                            ) : (\r\n                              '🔒 Locked'\r\n                            )}\r\n                          </button>\r\n                          <button\r\n                            onClick={() => handlePayCoupon(period.id, false)}\r\n                            disabled={\r\n                              !canPayCoupon(period) || payingPeriodId === period.id || recalculating\r\n                            }\r\n                            title={\r\n                              !canPayCoupon(period)\r\n                                ? 'You must pay earlier coupons first'\r\n                                : 'Pay now (backdated)'\r\n                            }\r\n                            className=\"px-2 py-1 text-xs bg-blue-600 text-white rounded font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                          >\r\n                            {canPayCoupon(period) ? 'Pay Now' : '🔒'}\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {/* Show locked message for finalized trades */}\r\n                      {!period.paid && isTradeFinalized && (\r\n                        <span className=\"text-xs text-red-400\">\r\n                          🔒 Trade {trade?.tradeStatus.replace(/_/g, ' ').toLowerCase()}\r\n                        </span>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className=\"mt-3 text-xs text-fd-text-muted\">\r\n            <p>\r\n              💡 <strong>Tip:</strong> Coupons must be paid sequentially by payment date. Only the\r\n              next unpaid coupon can be paid — earlier coupons must be settled before later ones.\r\n              <br />• <strong>Pay On Time:</strong> Marks the coupon as paid on its scheduled\r\n              payment date (no accrued premium).\r\n              <br />• <strong>Pay Now:</strong> Marks the coupon as paid today (shows accrued\r\n              premium if applicable).\r\n              <br />• <strong>Cancel:</strong> Reverts the most recently paid coupon (for demo\r\n              purposes only).\r\n              <br />\r\n              Paying or canceling a coupon will trigger a risk recalculation.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* No coupon schedule message */}\r\n      {couponPeriods.length === 0 && data && !loading && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-dashed border-fd-border text-center\">\r\n          <svg\r\n            className=\"w-12 h-12 text-fd-text-muted mx-auto mb-3\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n            ></path>\r\n          </svg>\r\n          <p className=\"text-fd-text-muted mb-4\">\r\n            No coupon schedule generated for this trade yet.\r\n          </p>\r\n          {isTradeFinalized ? (\r\n            <p className=\"text-red-400 text-sm\">\r\n              Cannot generate schedule - trade is {trade?.tradeStatus.replace(/_/g, ' ').toLowerCase()}\r\n            </p>\r\n          ) : (\r\n            <button\r\n              onClick={handleGenerateSchedule}\r\n              disabled={generatingSchedule}\r\n              className=\"px-4 py-2 bg-fd-green text-fd-dark rounded font-medium hover:bg-fd-green-hover disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n            >\r\n              {generatingSchedule ? (\r\n                <span className=\"flex items-center gap-2\">\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-fd-dark\"></div>\r\n                  Generating Schedule...\r\n                </span>\r\n              ) : (\r\n                'Generate Coupon Schedule'\r\n              )}\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Cashflow Schedule - Hidden: Merged with Coupon Payment Schedule above */}\r\n      {/* hasCashflows && (\r\n        <div className=\"bg-fd-darker p-4 rounded-md border border-fd-border\">\r\n          <h3 className=\"text-fd-green font-semibold mb-3 flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n            </svg>\r\n            Cashflow Schedule\r\n            <span className=\"ml-auto text-sm font-normal text-fd-text-muted\">\r\n              {data.cashflows!.length} payment{data.cashflows!.length !== 1 ? 's' : ''}\r\n            </span>\r\n          </h3>\r\n          \r\n          <CashflowScheduleTable cashflows={data.cashflows!} />\r\n        </div>\r\n      ) */}\r\n\r\n      {/* No data message */}\r\n      {!hasCashflows && !hasCDSMetrics && (\r\n        <div className=\"bg-fd-darker p-6 rounded-md border border-dashed border-fd-border text-center\">\r\n          <svg\r\n            className=\"w-12 h-12 text-fd-text-muted mx-auto mb-3\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n            ></path>\r\n          </svg>\r\n          <p className=\"text-fd-text-muted\">\r\n            Additional CDS metrics and cashflow schedule will appear here once available.\r\n          </p>\r\n          <p className=\"text-fd-text-muted text-sm mt-2\">\r\n            Currently showing NPV calculated by ORE.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RiskMeasuresPanel;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\ScenarioRunModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\__tests__\\RegressionStatusBadge.test.tsx","messages":[{"ruleId":"testing-library/prefer-screen-queries","severity":2,"message":"Avoid destructuring queries from `render` result, use `screen.getByText` instead","line":7,"column":10,"nodeType":"Identifier","messageId":"preferScreenQueries","endLine":7,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport RegressionStatusBadge from '../RegressionStatusBadge';\r\n\r\ntest('renders regression status badge', () => {\r\n  const { getByText } = render(<RegressionStatusBadge status=\"PASS\" />);\r\n  expect(getByText(/Regression: PASS/)).toBeInTheDocument();\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\services-status-modal\\ServicesStatusModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used.","line":152,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\n\r\n// Use the same API base URL pattern as other services\r\nimport { API_BASE_URL } from '../../config/api';\r\n\r\ninterface ServiceStatus {\r\n  name: string;\r\n  status: 'ONLINE' | 'OFFLINE' | 'UNKNOWN';\r\n  responseTime?: number;\r\n  lastChecked?: string;\r\n  error?: string;\r\n  url?: string;\r\n}\r\n\r\ninterface ServicesStatusModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ServicesStatusModal: React.FC<ServicesStatusModalProps> = ({ isOpen, onClose }) => {\r\n  const [services, setServices] = useState<ServiceStatus[]>([\r\n    { name: 'PostgreSQL Database', status: 'UNKNOWN' },\r\n    { name: 'API Gateway', status: 'UNKNOWN' },\r\n    { name: 'Backend Service', status: 'UNKNOWN' },\r\n    { name: 'CDS Risk Engine', status: 'UNKNOWN' },\r\n    { name: 'Open Source Risk Engine (ORE)', status: 'UNKNOWN' },\r\n    { name: 'React Frontend', status: 'UNKNOWN' },\r\n  ]);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n  const [autoRefresh, setAutoRefresh] = useState(true);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  const checkServicesHealth = async () => {\r\n    setIsRefreshing(true);\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/health/status`);\r\n      const data = await response.json();\r\n\r\n      // Generate dummy status for additional services\r\n      const generateDummyResponseTime = () => Math.floor(Math.random() * 15) + 5; // 5-20ms\r\n\r\n      const updatedServices: ServiceStatus[] = [\r\n        // PostgreSQL - inferred from backend status\r\n        {\r\n          name: 'PostgreSQL Database',\r\n          status: data.backendStatus?.status === 'UP' ? 'ONLINE' : 'OFFLINE',\r\n          responseTime: data.backendStatus?.responseTime,\r\n          lastChecked: new Date().toLocaleTimeString(),\r\n          error: data.backendStatus?.status !== 'UP' ? 'Database connection issues' : undefined,\r\n        },\r\n        // API Gateway\r\n        {\r\n          name: 'API Gateway',\r\n          status: data.status === 'UP' ? 'ONLINE' : 'OFFLINE',\r\n          responseTime: 15, // Gateway response is usually fast\r\n          lastChecked: new Date().toLocaleTimeString(),\r\n          url: API_BASE_URL.replace('/api', ''), // Remove /api suffix for display\r\n          error: data.status !== 'UP' ? 'Gateway unavailable' : undefined,\r\n        },\r\n        // Backend Service\r\n        {\r\n          name: 'Backend Service',\r\n          status: data.backendStatus?.status === 'UP' ? 'ONLINE' : 'OFFLINE',\r\n          responseTime: data.backendStatus?.responseTime,\r\n          lastChecked: new Date().toLocaleTimeString(),\r\n          url: data.backendStatus?.healthEndpoint\r\n            ? `${API_BASE_URL.replace('/api', '')}${data.backendStatus.healthEndpoint}`\r\n            : 'Backend Service',\r\n          error:\r\n            data.backendStatus?.error ||\r\n            (data.backendStatus?.status !== 'UP' ? 'Service unavailable' : undefined),\r\n        },\r\n        // CDS Risk Engine (dummy health)\r\n        {\r\n          name: 'CDS Risk Engine',\r\n          status: 'ONLINE',\r\n          responseTime: generateDummyResponseTime(),\r\n          lastChecked: new Date().toLocaleTimeString(),\r\n          url: 'http://localhost:8082',\r\n        },\r\n        // Open Source Risk Engine - ORE (dummy health)\r\n        {\r\n          name: 'Open Source Risk Engine (ORE)',\r\n          status: 'ONLINE',\r\n          responseTime: generateDummyResponseTime(),\r\n          lastChecked: new Date().toLocaleTimeString(),\r\n          url: 'ore-engine',\r\n        },\r\n        // React Frontend (dummy health)\r\n        {\r\n          name: 'React Frontend',\r\n          status: 'ONLINE',\r\n          responseTime: generateDummyResponseTime(),\r\n          lastChecked: new Date().toLocaleTimeString(),\r\n          url: 'http://localhost:3000',\r\n        },\r\n      ];\r\n\r\n      setServices(updatedServices);\r\n      setLastUpdated(new Date());\r\n    } catch (error) {\r\n      console.error('Failed to check services health:', error);\r\n      // Mark gateway as offline, others as unknown\r\n      setServices([\r\n        { name: 'PostgreSQL Database', status: 'UNKNOWN', error: 'Cannot reach gateway' },\r\n        {\r\n          name: 'API Gateway',\r\n          status: 'OFFLINE',\r\n          error: 'Connection failed',\r\n          url: 'http://localhost:8081',\r\n        },\r\n        { name: 'Backend Service', status: 'UNKNOWN', error: 'Cannot reach gateway' },\r\n        {\r\n          name: 'CDS Risk Engine',\r\n          status: 'UNKNOWN',\r\n          error: 'Cannot reach gateway',\r\n          url: 'http://localhost:8082',\r\n        },\r\n        {\r\n          name: 'Open Source Risk Engine (ORE)',\r\n          status: 'UNKNOWN',\r\n          error: 'Cannot reach gateway',\r\n          url: 'ore-engine',\r\n        },\r\n        {\r\n          name: 'React Frontend',\r\n          status: 'UNKNOWN',\r\n          error: 'Cannot reach gateway',\r\n          url: 'http://localhost:3000',\r\n        },\r\n      ]);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      checkServicesHealth();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  useEffect(() => {\r\n    if (autoRefresh && isOpen) {\r\n      const interval = setInterval(checkServicesHealth, 5000); // Refresh every 5 seconds\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [autoRefresh, isOpen]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const getStatusColor = (status: ServiceStatus['status']) => {\r\n    switch (status) {\r\n      case 'ONLINE':\r\n        return 'text-fd-green';\r\n      case 'OFFLINE':\r\n        return 'text-red-500';\r\n      case 'UNKNOWN':\r\n        return 'text-fd-text-muted';\r\n      default:\r\n        return 'text-fd-text-muted';\r\n    }\r\n  };\r\n\r\n  const getStatusBadgeColor = (status: ServiceStatus['status']) => {\r\n    switch (status) {\r\n      case 'ONLINE':\r\n        return 'bg-fd-green text-fd-dark';\r\n      case 'OFFLINE':\r\n        return 'bg-red-500 text-white';\r\n      case 'UNKNOWN':\r\n        return 'bg-fd-text-muted text-fd-dark';\r\n      default:\r\n        return 'bg-fd-text-muted text-fd-dark';\r\n    }\r\n  };\r\n\r\n  const onlineCount = services.filter((s) => s.status === 'ONLINE').length;\r\n  const totalCount = services.length;\r\n  const systemHealthPercentage = Math.round((onlineCount / totalCount) * 100);\r\n  const avgResponseTime =\r\n    services.filter((s) => s.responseTime).reduce((acc, s) => acc + (s.responseTime || 0), 0) /\r\n      services.filter((s) => s.responseTime).length || 0;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-fd-darker border border-fd-border rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center p-6 border-b border-fd-border\">\r\n          <h2 className=\"text-2xl font-bold text-fd-text\">Services Status</h2>\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <span className=\"text-fd-text-muted text-sm\">Auto Refresh (5 seconds)</span>\r\n              <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={autoRefresh}\r\n                  onChange={(e) => setAutoRefresh(e.target.checked)}\r\n                  className=\"sr-only peer\"\r\n                />\r\n                <div className=\"w-11 h-6 bg-fd-input peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-fd-green\"></div>\r\n              </label>\r\n            </div>\r\n            <button\r\n              onClick={checkServicesHealth}\r\n              disabled={isRefreshing}\r\n              className=\"px-3 py-1 bg-fd-green text-fd-dark rounded hover:bg-fd-green-hover disabled:opacity-50 transition-colors\"\r\n            >\r\n              {isRefreshing ? 'Refreshing...' : 'Refresh Now'}\r\n            </button>\r\n            <button onClick={onClose} className=\"text-fd-text-muted hover:text-fd-text\">\r\n              ✕\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Overview Stats */}\r\n        <div className=\"p-6 border-b border-fd-border\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Services Overview</h3>\r\n          <div className=\"flex justify-between\">\r\n            <div className=\"text-left\">\r\n              <div className=\"flex items-center space-x-2 mb-1\">\r\n                <div className=\"w-3 h-3 bg-fd-green rounded-full\"></div>\r\n                <span className=\"text-fd-text-muted\">System Health</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <span className=\"text-2xl font-bold text-fd-text\">{systemHealthPercentage}%</span>\r\n                <span\r\n                  className={`text-sm px-2 py-1 rounded ${systemHealthPercentage === 100 ? 'bg-fd-green text-fd-dark' : 'bg-red-500 text-white'}`}\r\n                >\r\n                  {systemHealthPercentage === 100 ? 'Good' : 'Issues'}\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <div className=\"flex items-center space-x-2 mb-1\">\r\n                <div className=\"w-3 h-3 bg-fd-green rounded-full\"></div>\r\n                <span className=\"text-fd-text-muted\">Services Online</span>\r\n              </div>\r\n              <span className=\"text-2xl font-bold text-fd-green\">\r\n                {onlineCount}/{totalCount}\r\n              </span>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <div className=\"flex items-center space-x-2 mb-1\">\r\n                <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\r\n                <span className=\"text-fd-text-muted\">Issues</span>\r\n              </div>\r\n              <span className=\"text-2xl font-bold text-red-500\">{totalCount - onlineCount}</span>\r\n            </div>\r\n\r\n            <div className=\"text-right\">\r\n              <div className=\"flex items-center space-x-2 mb-1\">\r\n                <div className=\"w-3 h-3 bg-fd-cyan rounded-full\"></div>\r\n                <span className=\"text-fd-text-muted\">Avg Response</span>\r\n              </div>\r\n              <span className=\"text-2xl font-bold text-fd-cyan\">\r\n                {avgResponseTime > 0 ? `${Math.round(avgResponseTime)}ms` : '--'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          {lastUpdated && (\r\n            <p className=\"text-fd-text-muted text-sm mt-4\">\r\n              Last updated: {lastUpdated.toLocaleTimeString()}\r\n              <span className=\"text-fd-green ml-2\">(Auto-refreshing every 5 seconds)</span>\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Service Details */}\r\n        <div className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Service Details</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {services.map((service, index) => (\r\n              <div key={index} className=\"bg-fd-dark border border-fd-border rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-start mb-3\">\r\n                  <h4 className=\"font-semibold text-fd-text\">{service.name}</h4>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <span\r\n                      className={`text-xs px-2 py-1 rounded font-medium ${getStatusBadgeColor(service.status)}`}\r\n                    >\r\n                      {service.status}\r\n                    </span>\r\n                    {service.status === 'ONLINE' && (\r\n                      <div className=\"w-2 h-2 bg-fd-green rounded-full animate-pulse\"></div>\r\n                    )}\r\n                    {service.status === 'OFFLINE' && (\r\n                      <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2 text-sm\">\r\n                  {service.url && (\r\n                    <div>\r\n                      <span className=\"text-fd-text-muted\">URL: </span>\r\n                      <span className=\"text-fd-text font-mono text-xs\">{service.url}</span>\r\n                    </div>\r\n                  )}\r\n\r\n                  {service.responseTime && (\r\n                    <div>\r\n                      <span className=\"text-fd-text-muted\">Response Time: </span>\r\n                      <span className=\"text-fd-cyan font-medium\">{service.responseTime}ms</span>\r\n                    </div>\r\n                  )}\r\n\r\n                  {service.lastChecked && (\r\n                    <div>\r\n                      <span className=\"text-fd-text-muted\">Last Checked: </span>\r\n                      <span className=\"text-fd-text\">{service.lastChecked}</span>\r\n                    </div>\r\n                  )}\r\n\r\n                  {service.error && (\r\n                    <div className=\"mt-2 p-2 bg-red-900/20 border border-red-500/30 rounded\">\r\n                      <span className=\"text-red-400 text-xs\">Error: {service.error}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ServicesStatusModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\settlement-view\\SettlementView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\top-bar\\TopBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\trade-detail-modal\\TradeDetailModal.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Merge conflict marker encountered.","line":76,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { CDSTradeResponse, cdsTradeService } from '../../services/cdsTradeService';\r\nimport { CreditEvent, creditEventService } from '../../services/creditEventService';\r\nimport RiskMeasuresPanel from '../risk/RiskMeasuresPanel';\r\nimport MarketDataPanel from '../risk/MarketDataPanel';\r\nimport ScenarioRunModal from '../risk/ScenarioRunModal';\r\nimport RegressionStatusBadge from '../risk/RegressionStatusBadge';\r\nimport { fetchRiskMeasures } from '../../services/risk/riskService';\r\nimport { RiskMeasures } from '../../services/risk/riskTypes';\r\nimport { bondService, Bond } from '../../services/bondService';\r\nimport CreditEventModal, { CreateCreditEventRequest } from '../credit-event-modal/CreditEventModal';\r\nimport LifecycleTimeline from '../lifecycle/LifecycleTimeline';\r\nimport CashflowPanel from '../lifecycle/CashflowPanel';\r\n\r\ninterface TradeDetailModalProps {\r\n  isOpen: boolean;\r\n  trade: CDSTradeResponse | null;\r\n  onClose: () => void;\r\n  onTradeUpdated?: (updatedTrade: CDSTradeResponse) => void;\r\n  onTradesUpdated?: (affectedTradeIds?: number[]) => void;\r\n}\r\n\r\nconst TradeDetailModal: React.FC<TradeDetailModalProps> = ({ isOpen, trade, onClose, onTradeUpdated, onTradesUpdated }) => {\r\n  const [currentTrade, setCurrentTrade] = useState<CDSTradeResponse | null>(trade);\r\n  const [creditEvents, setCreditEvents] = useState<CreditEvent[]>([]);\r\n  const [loadingEvents, setLoadingEvents] = useState(false);\r\n  const [activeTab, setActiveTab] = useState<'details' | 'lifecycle' | 'cashflow' | 'events' | 'risk' | 'marketdata'>('details');\r\n  const [showScenarioModal, setShowScenarioModal] = useState(false);\r\n  const [riskMeasures, setRiskMeasures] = useState<RiskMeasures | null>(null);\r\n  const [loadingRisk, setLoadingRisk] = useState(false);\r\n  const [showCreditEventModal, setShowCreditEventModal] = useState(false);\r\n  const [recordingEvent, setRecordingEvent] = useState(false);\r\n  const [showSuccessNotification, setShowSuccessNotification] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState<string>('Credit event recorded successfully');\r\n\r\n  // Update currentTrade when trade prop changes\r\n  useEffect(() => {\r\n    setCurrentTrade(trade);\r\n  }, [trade]);\r\n\r\n  const loadCreditEvents = useCallback(async () => {\r\n    if (!currentTrade) return;\r\n\r\n    setLoadingEvents(true);\r\n    try {\r\n      const events = await creditEventService.getCreditEventsForTrade(currentTrade.id);\r\n      setCreditEvents(events);\r\n    } catch (error) {\r\n      console.error('Failed to load credit events:', error);\r\n      setCreditEvents([]);\r\n    } finally {\r\n      setLoadingEvents(false);\r\n    }\r\n  }, [currentTrade]);\r\n\r\n  const loadRiskMeasures = useCallback(async () => {\r\n    if (!currentTrade) return;\r\n\r\n    setLoadingRisk(true);\r\n    try {\r\n      const measures = await fetchRiskMeasures(currentTrade.id);\r\n      setRiskMeasures(measures);\r\n    } catch (error) {\r\n      console.error('Failed to load risk measures:', error);\r\n      setRiskMeasures(null);\r\n    } finally {\r\n      setLoadingRisk(false);\r\n    }\r\n  }, [currentTrade]);\r\n\r\n  const handleRecordCreditEvent = async (request: CreateCreditEventRequest) => {\r\n    if (!currentTrade) return;\r\n\r\n    setRecordingEvent(true);\r\n    try {\r\n<<<<<<< HEAD\r\n      const response = await creditEventService.recordCreditEvent(currentTrade.id, request);\r\n      \r\n=======\r\n      await creditEventService.recordCreditEvent(currentTrade.id, request);\r\n\r\n>>>>>>> 689d737 (feat: add comprehensive security and quality analysis)\r\n      // Reload the trade to get updated status\r\n      const updatedTrade = await cdsTradeService.getTradeById(currentTrade.id);\r\n      setCurrentTrade(updatedTrade);\r\n\r\n      // Notify parent component if callback provided\r\n      if (onTradeUpdated) {\r\n        onTradeUpdated(updatedTrade);\r\n      }\r\n<<<<<<< HEAD\r\n      \r\n      // Notify parent about all affected trades (for UI refresh)\r\n      if (onTradesUpdated && response.affectedTradeIds && response.affectedTradeIds.length > 1) {\r\n        onTradesUpdated(response.affectedTradeIds);\r\n      }\r\n      \r\n      // Reload credit events after successful recording\r\n      await loadCreditEvents();\r\n      setShowCreditEventModal(false);\r\n      \r\n      // Show success notification with propagation info\r\n      const propagatedCount = response.affectedTradeIds.length - 1;\r\n      if (propagatedCount > 0) {\r\n        setSuccessMessage(\r\n          `This ${response.creditEvent.eventType} event has been propagated to ${propagatedCount} other active CDS contract(s) for the same reference entity. All affected trades have been settled.`\r\n        );\r\n      } else {\r\n        setSuccessMessage('Credit event recorded successfully');\r\n      }\r\n      \r\n=======\r\n\r\n      // Reload credit events after successful recording\r\n      await loadCreditEvents();\r\n      setShowCreditEventModal(false);\r\n\r\n      // Show success notification\r\n>>>>>>> 689d737 (feat: add comprehensive security and quality analysis)\r\n      setShowSuccessNotification(true);\r\n      setTimeout(() => setShowSuccessNotification(false), 5000);\r\n    } catch (error: any) {\r\n      console.error('Failed to record credit event:', error);\r\n      alert('Failed to record credit event: ' + (error.message || 'Unknown error'));\r\n    } finally {\r\n      setRecordingEvent(false);\r\n    }\r\n  };\r\n\r\n  const handleTradeUpdated = async () => {\r\n    if (!currentTrade) return;\r\n    \r\n    try {\r\n      // Reload the trade to get updated status\r\n      const updatedTrade = await cdsTradeService.getTradeById(currentTrade.id);\r\n      setCurrentTrade(updatedTrade);\r\n      \r\n      // Notify parent component if callback provided\r\n      if (onTradeUpdated) {\r\n        onTradeUpdated(updatedTrade);\r\n      }\r\n      \r\n      // Notify parent to refresh the blotter with this trade ID\r\n      if (onTradesUpdated) {\r\n        onTradesUpdated([currentTrade.id]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to reload trade:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOpen && currentTrade) {\r\n      loadCreditEvents();\r\n      // Load risk measures when opening modal or switching to risk/marketdata tabs\r\n      if (activeTab === 'risk' || activeTab === 'marketdata') {\r\n        loadRiskMeasures();\r\n      }\r\n    }\r\n  }, [isOpen, currentTrade, activeTab, loadCreditEvents, loadRiskMeasures]);\r\n\r\n  if (!isOpen || !currentTrade) return null;\r\n\r\n  const formatCurrency = (amount: number, currency: string) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: currency || 'USD',\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    });\r\n  };\r\n\r\n  const formatDateTime = (dateString: string) => {\r\n    return new Date(dateString).toLocaleString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6 max-w-5xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n        {/* Header with tabs */}\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"w-8 h-8 bg-fd-green rounded-full flex items-center justify-center\">\r\n              <svg\r\n                className=\"w-5 h-5 text-fd-dark\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                ></path>\r\n              </svg>\r\n            </div>\r\n            <h2 className=\"text-2xl font-bold text-fd-text\">CDS Trade Details</h2>\r\n          </div>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              ></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        {/* Tab selector */}\r\n        <div className=\"flex space-x-4 border-b border-fd-border mb-6\">\r\n          {[\r\n            { key: 'details', label: 'Details' },\r\n            { key: 'lifecycle', label: 'Lifecycle' },\r\n            { key: 'cashflow', label: 'Cashflow' },\r\n            { key: 'events', label: 'Credit Events' },\r\n            { key: 'risk', label: 'Risk' },\r\n            { key: 'marketdata', label: 'Market Data' },\r\n          ].map((t) => (\r\n            <button\r\n              key={t.key}\r\n              onClick={() => {\r\n                console.log('🔄 Tab switch:', { from: activeTab, to: t.key });\r\n                setActiveTab(t.key as any);\r\n              }}\r\n              className={`pb-2 px-1 text-sm font-medium border-b-2 -mb-px transition-colors ${\r\n                activeTab === t.key\r\n                  ? 'border-fd-green text-fd-text'\r\n                  : 'border-transparent text-fd-text-muted hover:text-fd-text'\r\n              }`}\r\n            >\r\n              {t.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        {activeTab === 'details' && (\r\n          <>\r\n            <div className=\"bg-fd-dark rounded-lg p-4 mb-6\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-fd-text-muted\">Trade ID:</span>\r\n                  <span className=\"text-fd-green font-mono font-semibold\">\r\n                    CDS-{currentTrade.id}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-fd-text-muted\">Created:</span>\r\n                  <span className=\"text-fd-text\">{formatDateTime(currentTrade.createdAt)}</span>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-fd-text-muted\">Last Updated:</span>\r\n                  <span className=\"text-fd-text\">\r\n                    {currentTrade.updatedAt ? formatDateTime(currentTrade.updatedAt) : 'Never'}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n              {/* Trade Information */}\r\n              <div className=\"space-y-6\">\r\n                <h3 className=\"text-lg font-semibold text-fd-text border-b border-fd-border pb-2\">\r\n                  Trade Information\r\n                </h3>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Reference Entity:</span>\r\n                    <span className=\"text-fd-text font-medium\">{currentTrade.referenceEntity}</span>\r\n                  </div>\r\n                  {currentTrade.obligation && (\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-fd-text-muted\">Obligation:</span>\r\n                      <span className=\"text-fd-text font-medium\">\r\n                        <span className=\"text-fd-green\">\r\n                          {currentTrade.obligation.isin ? `${currentTrade.obligation.isin} - ` : ''}\r\n                          {currentTrade.obligation.issuer} {currentTrade.obligation.seniority}(\r\n                          {(currentTrade.obligation.couponRate * 100).toFixed(2)}%)\r\n                        </span>\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Counterparty:</span>\r\n                    <span className=\"text-fd-text font-medium\">{currentTrade.counterparty}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Direction:</span>\r\n                    <span\r\n                      className={`font-medium ${currentTrade.buySellProtection === 'BUY' ? 'text-blue-400' : 'text-orange-400'}`}\r\n                    >\r\n                      {currentTrade.buySellProtection === 'BUY'\r\n                        ? 'Buy Protection'\r\n                        : 'Sell Protection'}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Settlement Type:</span>\r\n                    <span className={`font-medium ${currentTrade.settlementType === 'CASH' ? 'text-fd-cyan' : 'text-fd-teal'}`}>\r\n                      {currentTrade.settlementType === 'CASH' ? 'Cash Settlement' : 'Physical Settlement'}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Notional Amount:</span>\r\n                    <span className=\"text-fd-text font-semibold text-lg\">\r\n                      {formatCurrency(currentTrade.notionalAmount, currentTrade.currency)}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Spread:</span>\r\n                    <span className=\"text-fd-text font-medium\">{currentTrade.spread} bps</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Currency:</span>\r\n                    <span className=\"text-fd-text font-medium\">{currentTrade.currency}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Status:</span>\r\n                    <span className=\"text-fd-green font-medium\">\r\n                      {currentTrade.tradeStatus.replace(/_/g, ' ')}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Date Information */}\r\n              <div className=\"space-y-6\">\r\n                <h3 className=\"text-lg font-semibold text-fd-text border-b border-fd-border pb-2\">\r\n                  Date Information\r\n                </h3>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Trade Date:</span>\r\n                    <span className=\"text-fd-text\">{formatDate(currentTrade.tradeDate)}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Effective Date:</span>\r\n                    <span className=\"text-fd-text\">{formatDate(currentTrade.effectiveDate)}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Maturity Date:</span>\r\n                    <span className=\"text-fd-text\">{formatDate(currentTrade.maturityDate)}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Accrual Start Date:</span>\r\n                    <span className=\"text-fd-text\">\r\n                      {formatDate(currentTrade.accrualStartDate)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Contract Terms */}\r\n              <div className=\"space-y-6\">\r\n                <h3 className=\"text-lg font-semibold text-fd-text border-b border-fd-border pb-2\">\r\n                  Contract Terms\r\n                </h3>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Premium Frequency:</span>\r\n                    <span className=\"text-fd-text\">\r\n                      {currentTrade.premiumFrequency.replace('_', ' ')}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Day Count Convention:</span>\r\n                    <span className=\"text-fd-text\">\r\n                      {currentTrade.dayCountConvention.replace('_', '/')}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-fd-text-muted\">Payment Calendar:</span>\r\n                    <span className=\"text-fd-text\">{currentTrade.paymentCalendar}</span>\r\n                  </div>\r\n                  {currentTrade.restructuringClause && (\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-fd-text-muted\">Restructuring Clause:</span>\r\n                      <span className=\"text-fd-text\">\r\n                        {currentTrade.restructuringClause.replace(/_/g, ' ')}\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Additional Information */}\r\n              <div className=\"space-y-6\">\r\n                <h3 className=\"text-lg font-semibold text-fd-text border-b border-fd-border pb-2\">\r\n                  Additional Information\r\n                </h3>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"bg-fd-dark rounded-lg p-4\">\r\n                    <div className=\"text-sm text-fd-text-muted mb-2\">Trade Identifier</div>\r\n                    <div className=\"font-mono text-fd-green text-lg\">CDS-{currentTrade.id}</div>\r\n                  </div>\r\n\r\n                  <div className=\"bg-fd-dark rounded-lg p-4\">\r\n                    <div className=\"text-sm text-fd-text-muted mb-2\">Risk Metrics</div>\r\n                    <div className=\"space-y-1\">\r\n                      <div className=\"text-sm\">\r\n                        <span className=\"text-fd-text-muted\">Mark-to-Market:</span>\r\n                        <span className=\"text-fd-text ml-2\">TBD</span>\r\n                      </div>\r\n                      <div className=\"text-sm\">\r\n                        <span className=\"text-fd-text-muted\">Credit Duration:</span>\r\n                        <span className=\"text-fd-text ml-2\">TBD</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n        {activeTab === 'lifecycle' && currentTrade && (\r\n          <LifecycleTimeline trade={currentTrade} onTradeUpdated={handleTradeUpdated} />\r\n        )}\r\n        {activeTab === 'cashflow' && currentTrade && (\r\n          <CashflowPanel trade={currentTrade} />\r\n        )}\r\n        {activeTab === 'events' && (\r\n          <div className=\"mt-4\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <h3 className=\"text-lg font-semibold text-fd-text border-b border-fd-border pb-2\">\r\n                Credit Events\r\n              </h3>\r\n              {currentTrade?.tradeStatus === 'ACTIVE' && (\r\n                <button\r\n                  onClick={() => setShowCreditEventModal(true)}\r\n                  className=\"px-4 py-2 bg-fd-green text-fd-dark font-medium rounded hover:bg-fd-green-hover transition-colors flex items-center gap-2\"\r\n                >\r\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\r\n                    ></path>\r\n                  </svg>\r\n                  Record Credit Event\r\n                </button>\r\n              )}\r\n            </div>\r\n            {loadingEvents ? (\r\n              <div className=\"flex items-center justify-center py-8\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-fd-green\"></div>\r\n                <span className=\"ml-3 text-fd-text-muted\">Loading credit events...</span>\r\n              </div>\r\n            ) : creditEvents.length === 0 ? (\r\n              <div className=\"bg-fd-dark rounded-lg p-6 text-center\">\r\n                <div className=\"w-12 h-12 bg-fd-border rounded-full flex items-center justify-center mx-auto mb-3\">\r\n                  <svg\r\n                    className=\"w-6 h-6 text-fd-text-muted\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                    ></path>\r\n                  </svg>\r\n                </div>\r\n                <p className=\"text-fd-text-muted\">No credit events recorded for this trade</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-4\">\r\n                {creditEvents.map((event) => (\r\n                  <div\r\n                    key={event.id}\r\n                    className={`bg-fd-dark rounded-lg p-4 border ${\r\n                      event.eventType === 'PAYOUT' ? 'border-fd-green' : 'border-fd-border'\r\n                    }`}\r\n                  >\r\n                    <div className=\"flex items-start justify-between mb-3\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div\r\n                          className={`w-10 h-10 rounded-full flex items-center justify-center ${\r\n                            event.eventType === 'PAYOUT' ? 'bg-fd-green/20' : 'bg-red-500/20'\r\n                          }`}\r\n                        >\r\n                          {event.eventType === 'PAYOUT' ? (\r\n                            <svg\r\n                              className=\"w-5 h-5 text-fd-green\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                              ></path>\r\n                            </svg>\r\n                          ) : (\r\n                            <svg\r\n                              className=\"w-5 h-5 text-red-400\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\r\n                              ></path>\r\n                            </svg>\r\n                          )}\r\n                        </div>\r\n                        <div>\r\n                          <h4\r\n                            className={`font-medium ${\r\n                              event.eventType === 'PAYOUT' ? 'text-fd-green' : 'text-fd-text'\r\n                            }`}\r\n                          >\r\n                            {event.eventType.replace(/_/g, ' ')}\r\n                          </h4>\r\n                          <p className=\"text-fd-text-muted text-sm\">Event ID: {event.id}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <div className=\"text-fd-text text-sm\">{formatDate(event.eventDate)}</div>\r\n                        <div className=\"text-fd-text-muted text-xs\">\r\n                          {formatDateTime(event.createdAt)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-3\">\r\n                      <div>\r\n                        <span className=\"text-fd-text-muted text-sm\">Notice Date:</span>\r\n                        <div className=\"text-fd-text\">{formatDate(event.noticeDate)}</div>\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-fd-text-muted text-sm\">Settlement Method:</span>\r\n                        <div className=\"text-fd-text font-medium\">\r\n                          <span\r\n                            className={`inline-flex px-2 py-1 rounded text-xs font-medium ${\r\n                              event.settlementMethod === 'CASH'\r\n                                ? 'bg-green-500/20 text-green-400'\r\n                                : 'bg-blue-500/20 text-blue-400'\r\n                            }`}\r\n                          >\r\n                            {event.settlementMethod}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {event.comments && (\r\n                      <div className=\"bg-fd-darker rounded p-3\">\r\n                        <span className=\"text-fd-text-muted text-sm\">Comments:</span>\r\n                        <p className=\"text-fd-text text-sm mt-1\">{event.comments}</p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        {activeTab === 'risk' && currentTrade && (\r\n          <div className=\"mt-4 space-y-6\" aria-labelledby=\"risk-panel-heading\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <h3 id=\"risk-panel-heading\" className=\"text-lg font-semibold text-fd-text\">\r\n                Risk Analytics\r\n              </h3>\r\n              <div className=\"flex items-center gap-3\">\r\n                <RegressionStatusBadge status=\"UNKNOWN\" />\r\n                <button\r\n                  onClick={() => setShowScenarioModal(true)}\r\n                  className=\"px-3 py-1.5 bg-fd-green text-fd-dark rounded text-sm font-medium hover:bg-fd-green-hover\"\r\n                >\r\n                  Run Scenarios\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <RiskMeasuresPanel tradeId={currentTrade.id} trade={currentTrade} />\r\n          </div>\r\n        )}\r\n        {activeTab === 'marketdata' &&\r\n          currentTrade &&\r\n          (() => {\r\n            console.log('📊 Market Data tab active:', {\r\n              tradeId: currentTrade.id,\r\n              loadingRisk,\r\n              hasRiskMeasures: !!riskMeasures,\r\n              hasMarketSnapshot: !!riskMeasures?.marketDataSnapshot,\r\n            });\r\n            return (\r\n              <div className=\"mt-4 space-y-6\">\r\n                {loadingRisk ? (\r\n                  <div className=\"flex items-center justify-center py-8\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-fd-green\"></div>\r\n                    <span className=\"ml-3 text-fd-text-muted\">Loading market data snapshot...</span>\r\n                  </div>\r\n                ) : (\r\n                  <MarketDataPanel marketDataSnapshot={riskMeasures?.marketDataSnapshot} />\r\n                )}\r\n              </div>\r\n            );\r\n          })()}\r\n        <div className=\"flex justify-end space-x-4 mt-8 pt-4 border-t border-fd-border\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-6 py-2 bg-fd-green text-fd-dark font-medium rounded hover:bg-fd-green-hover transition-colors\"\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {currentTrade && (\r\n        <ScenarioRunModal\r\n          tradeId={currentTrade.id}\r\n          isOpen={showScenarioModal}\r\n          onClose={() => setShowScenarioModal(false)}\r\n        />\r\n      )}\r\n      {currentTrade && (\r\n        <CreditEventModal\r\n          isOpen={showCreditEventModal}\r\n          onClose={() => setShowCreditEventModal(false)}\r\n          onSubmit={handleRecordCreditEvent}\r\n          tradeId={currentTrade.id}\r\n          referenceEntity={currentTrade.referenceEntity}\r\n          isLoading={recordingEvent}\r\n        />\r\n      )}\r\n\r\n      {/* Success Notification */}\r\n      {showSuccessNotification && (\r\n        <div className=\"fixed top-4 right-4 z-[60] animate-fade-in\">\r\n<<<<<<< HEAD\r\n          <div className=\"bg-fd-dark border-2 border-fd-green rounded-lg shadow-lg p-4 flex items-start gap-3 min-w-[320px] max-w-[480px]\">\r\n            <div className=\"flex-shrink-0 mt-0.5\">\r\n              <svg className=\"w-6 h-6 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n=======\r\n          <div className=\"bg-fd-dark border-2 border-fd-green rounded-lg shadow-lg p-4 flex items-center gap-3 min-w-[320px]\">\r\n            <div className=\"flex-shrink-0\">\r\n              <svg\r\n                className=\"w-6 h-6 text-fd-green\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                ></path>\r\n>>>>>>> 689d737 (feat: add comprehensive security and quality analysis)\r\n              </svg>\r\n            </div>\r\n            <div className=\"flex-1\">\r\n              <h4 className=\"text-fd-text font-semibold mb-1\">Success!</h4>\r\n              <p className=\"text-fd-text-muted text-sm leading-relaxed\">{successMessage}</p>\r\n            </div>\r\n            <button\r\n              onClick={() => setShowSuccessNotification(false)}\r\n              className=\"flex-shrink-0 text-fd-text-muted hover:text-fd-text transition-colors\"\r\n            >\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M6 18L18 6M6 6l12 12\"\r\n                ></path>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeDetailModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\config\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\data\\referenceData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\data\\simulationGlossary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\hooks\\useSimulationPolling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\basketService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\bondService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\cdsTradeService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\creditEventService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\lifecycleService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\portfolioService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\risk\\riskService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\risk\\riskTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\simulationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\types\\basket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\types\\lifecycle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]