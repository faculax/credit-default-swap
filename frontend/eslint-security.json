[{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\SaCcrDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\SimmDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketCreationModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":154,"column":9,"nodeType":"MemberExpression","endLine":154,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":158,"column":16,"nodeType":"MemberExpression","endLine":158,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":168,"column":5,"nodeType":"MemberExpression","endLine":168,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":168,"column":27,"nodeType":"MemberExpression","endLine":168,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":173,"column":9,"nodeType":"MemberExpression","endLine":173,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":177,"column":16,"nodeType":"MemberExpression","endLine":177,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":208,"column":19,"nodeType":"MemberExpression","endLine":208,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":486,"column":42,"nodeType":"MemberExpression","endLine":486,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketDetailView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\basket\\BasketPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondCreationModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":112,"column":9,"nodeType":"MemberExpression","endLine":112,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Bond, bondService } from '../../services/bondService';\nimport { REFERENCE_ENTITIES, SECTORS } from '../../data/referenceData';\n\ninterface BondCreationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: (bond: Bond) => void;\n}\n\ninterface FormErrors {\n  [key: string]: string;\n}\n\nconst SENIORITY_OPTIONS = [\n  { value: 'SR_UNSEC', label: 'Senior Unsecured' },\n  { value: 'SR_SEC', label: 'Senior Secured' },\n  { value: 'SUBORD', label: 'Subordinated' },\n];\n\nconst COUPON_FREQUENCY_OPTIONS = [\n  { value: 'ANNUAL', label: 'Annual' },\n  { value: 'SEMI_ANNUAL', label: 'Semi-Annual' },\n  { value: 'QUARTERLY', label: 'Quarterly' },\n];\n\nconst DAY_COUNT_OPTIONS = [\n  { value: 'ACT_ACT', label: 'ACT/ACT' },\n  { value: 'THIRTY_360', label: '30/360' },\n];\n\nconst CURRENCY_OPTIONS = ['USD', 'EUR', 'GBP', 'JPY'];\n\nconst BondCreationModal: React.FC<BondCreationModalProps> = ({ isOpen, onClose, onSuccess }) => {\n  const [formData, setFormData] = useState<Partial<Bond>>({\n    currency: 'USD',\n    couponFrequency: 'SEMI_ANNUAL',\n    dayCount: 'ACT_ACT',\n    seniority: 'SR_UNSEC',\n    settlementDays: 2,\n    faceValue: 100,\n    priceConvention: 'CLEAN',\n  });\n\n  const [errors, setErrors] = useState<FormErrors>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [userModifiedSector, setUserModifiedSector] = useState(false);\n\n  // Auto-populate sector when issuer changes\n  useEffect(() => {\n    if (!userModifiedSector && formData.issuer) {\n      const entity = REFERENCE_ENTITIES.find((e) => e.code === formData.issuer);\n      if (entity?.sector) {\n        setFormData((prev) => ({\n          ...prev,\n          sector: entity.sector,\n        }));\n      }\n    }\n  }, [formData.issuer, userModifiedSector]);\n\n  const validateForm = (): boolean => {\n    const newErrors: FormErrors = {};\n\n    if (!formData.issuer?.trim()) {\n      newErrors.issuer = 'Issuer is required';\n    }\n\n    if (!formData.notional || formData.notional <= 0) {\n      newErrors.notional = 'Notional must be positive';\n    }\n\n    if (!formData.couponRate || formData.couponRate < 0) {\n      newErrors.couponRate = 'Coupon rate must be >= 0';\n    }\n\n    if (formData.couponRate && formData.couponRate > 1) {\n      newErrors.couponRate = 'Coupon rate exceeds 100% - please verify';\n    }\n\n    if (!formData.issueDate) {\n      newErrors.issueDate = 'Issue date is required';\n    }\n\n    if (!formData.maturityDate) {\n      newErrors.maturityDate = 'Maturity date is required';\n    }\n\n    if (\n      formData.issueDate &&\n      formData.maturityDate &&\n      new Date(formData.issueDate) >= new Date(formData.maturityDate)\n    ) {\n      newErrors.maturityDate = 'Maturity date must be after issue date';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleInputChange = (field: keyof Bond, value: any) => {\n    // Track if user manually edits the sector\n    if (field === 'sector') {\n      setUserModifiedSector(true);\n    }\n\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    if (errors[field]) {\n      setErrors((prev) => ({\n        ...prev,\n        [field]: '',\n      }));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const bond = await bondService.createBond(formData as Bond);\n      onSuccess(bond);\n      resetForm();\n      onClose();\n    } catch (error: any) {\n      setErrors({ submit: error.message || 'Failed to create bond' });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      currency: 'USD',\n      couponFrequency: 'SEMI_ANNUAL',\n      dayCount: 'ACT_ACT',\n      seniority: 'SR_UNSEC',\n      settlementDays: 2,\n      faceValue: 100,\n      priceConvention: 'CLEAN',\n    });\n    setErrors({});\n    setUserModifiedSector(false);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\"\n      onClick={onClose}\n    >\n      <div\n        className=\"bg-fd-darker rounded-lg shadow-xl border border-fd-border max-w-4xl w-full max-h-[90vh] overflow-y-auto m-4\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"sticky top-0 bg-fd-darker border-b border-fd-border px-6 py-4 flex justify-between items-center z-10\">\n          <h2 className=\"text-xl font-semibold text-fd-text\">Create New Bond</h2>\n          <button\n            onClick={onClose}\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\n            aria-label=\"Close modal\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Issuer & Credit Info Section */}\n            <div className=\"md:col-span-2\">\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\n                Issuer & Credit Information\n              </h3>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Issuer <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.issuer || ''}\n                onChange={(e) => handleInputChange('issuer', e.target.value)}\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.issuer ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\n              >\n                <option value=\"\">Select Issuer</option>\n                {REFERENCE_ENTITIES.map((entity) => (\n                  <option key={entity.code} value={entity.code}>\n                    {entity.code} - {entity.name}\n                  </option>\n                ))}\n              </select>\n              {errors.issuer && <p className=\"mt-1 text-sm text-red-400\">{errors.issuer}</p>}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Seniority <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.seniority}\n                onChange={(e) => handleInputChange('seniority', e.target.value)}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\n              >\n                {SENIORITY_OPTIONS.map((opt) => (\n                  <option key={opt.value} value={opt.value}>\n                    {opt.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Sector</label>\n              <select\n                value={formData.sector || ''}\n                onChange={(e) => handleInputChange('sector', e.target.value)}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\n              >\n                <option value=\"\">Auto-suggested from issuer</option>\n                {SECTORS.map((sector) => (\n                  <option key={sector.code} value={sector.code}>\n                    {sector.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">ISIN</label>\n              <input\n                type=\"text\"\n                value={formData.isin || ''}\n                onChange={(e) => handleInputChange('isin', e.target.value)}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\n                placeholder=\"Optional\"\n                maxLength={12}\n              />\n            </div>\n\n            {/* Economics Section */}\n            <div className=\"md:col-span-2 mt-4\">\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\n                Bond Economics\n              </h3>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Currency <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.currency}\n                onChange={(e) => handleInputChange('currency', e.target.value)}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\n              >\n                {CURRENCY_OPTIONS.map((curr) => (\n                  <option key={curr} value={curr}>\n                    {curr}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Notional <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.notional || ''}\n                onChange={(e) => handleInputChange('notional', parseFloat(e.target.value))}\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.notional ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted`}\n              />\n              {errors.notional && <p className=\"mt-1 text-sm text-red-400\">{errors.notional}</p>}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Coupon Rate (decimal) <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.000001\"\n                value={formData.couponRate || ''}\n                onChange={(e) => handleInputChange('couponRate', parseFloat(e.target.value))}\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.couponRate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted`}\n                placeholder=\"e.g., 0.045 for 4.5%\"\n              />\n              {errors.couponRate && (\n                <p className=\"mt-1 text-sm text-red-400\">{errors.couponRate}</p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Coupon Frequency\n              </label>\n              <select\n                value={formData.couponFrequency}\n                onChange={(e) => handleInputChange('couponFrequency', e.target.value)}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\n              >\n                {COUPON_FREQUENCY_OPTIONS.map((opt) => (\n                  <option key={opt.value} value={opt.value}>\n                    {opt.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Day Count Convention\n              </label>\n              <select\n                value={formData.dayCount}\n                onChange={(e) => handleInputChange('dayCount', e.target.value)}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent\"\n              >\n                {DAY_COUNT_OPTIONS.map((opt) => (\n                  <option key={opt.value} value={opt.value}>\n                    {opt.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Dates Section */}\n            <div className=\"md:col-span-2 mt-4\">\n              <h3 className=\"text-sm font-semibold text-fd-text-muted uppercase tracking-wide mb-4\">\n                Dates\n              </h3>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Issue Date <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"date\"\n                value={formData.issueDate || ''}\n                onChange={(e) => handleInputChange('issueDate', e.target.value)}\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.issueDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\n              />\n              {errors.issueDate && <p className=\"mt-1 text-sm text-red-400\">{errors.issueDate}</p>}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">\n                Maturity Date <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"date\"\n                value={formData.maturityDate || ''}\n                onChange={(e) => handleInputChange('maturityDate', e.target.value)}\n                className={`w-full px-3 py-2 bg-fd-dark border ${errors.maturityDate ? 'border-red-500' : 'border-fd-border'} text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent`}\n              />\n              {errors.maturityDate && (\n                <p className=\"mt-1 text-sm text-red-400\">{errors.maturityDate}</p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Settlement Days</label>\n              <input\n                type=\"number\"\n                value={formData.settlementDays || ''}\n                onChange={(e) => handleInputChange('settlementDays', parseInt(e.target.value))}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-fd-text mb-1\">Face Value</label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.faceValue || ''}\n                onChange={(e) => handleInputChange('faceValue', parseFloat(e.target.value))}\n                className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border text-fd-text rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-transparent placeholder-fd-text-muted\"\n              />\n            </div>\n          </div>\n\n          {/* Error Message */}\n          {errors.submit && (\n            <div className=\"mt-4 p-3 bg-red-900/20 border border-red-500/30 rounded-md\">\n              <p className=\"text-sm text-red-400\">{errors.submit}</p>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"mt-6 flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-darker focus:outline-none focus:ring-2 focus:ring-fd-green\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:bg-fd-green/50 disabled:cursor-not-allowed\"\n            >\n              {isSubmitting ? 'Creating...' : 'Create Bond'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default BondCreationModal;\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondDetailView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBondDetails'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [bondId, loadBondDetails]","fix":{"range":[959,967],"text":"[bondId, loadBondDetails]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\bond\\BondPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\cds-blotter\\CDSBlotter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\cds-trade-form\\CDSTradeForm.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":132,"column":9,"nodeType":"MemberExpression","endLine":132,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":147,"column":9,"nodeType":"MemberExpression","endLine":147,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":210,"column":28,"nodeType":"MemberExpression","endLine":210,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":218,"column":28,"nodeType":"MemberExpression","endLine":218,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  REFERENCE_ENTITIES,\n  COUNTERPARTIES,\n  CURRENCIES,\n  PREMIUM_FREQUENCIES,\n  DAY_COUNT_CONVENTIONS,\n  RESTRUCTURING_CLAUSES,\n  PAYMENT_CALENDARS,\n  TRADE_STATUSES,\n  SETTLEMENT_METHODS,\n  CDSTrade\n} from '../../data/referenceData';\nimport { bondService, Bond } from '../../services/bondService';\n\ninterface FormErrors {\n  [key: string]: string;\n}\n\ninterface CDSTradeFormProps {\n  onSubmit: (trade: CDSTrade) => void;\n}\n\nconst CDSTradeForm: React.FC<CDSTradeFormProps> = ({ onSubmit }) => {\n  const [formData, setFormData] = useState<Partial<CDSTrade>>({\n    tradeDate: new Date().toISOString().split('T')[0],\n    currency: 'USD',\n    premiumFrequency: 'QUARTERLY',\n    dayCountConvention: 'ACT_360',\n    buySellProtection: 'BUY',\n    paymentCalendar: 'NYC',\n    tradeStatus: 'PENDING',\n    recoveryRate: 40,\n    settlementType: 'CASH'\n  });\n\n  const [errors, setErrors] = useState<FormErrors>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [availableBonds, setAvailableBonds] = useState<Bond[]>([]);\n  const [loadingBonds, setLoadingBonds] = useState(false);\n\n  // Fetch bonds when reference entity changes\n  useEffect(() => {\n    const fetchBonds = async () => {\n      if (!formData.referenceEntity) {\n        setAvailableBonds([]);\n        return;\n      }\n\n      setLoadingBonds(true);\n      try {\n        const bonds = await bondService.getBondsByIssuer(formData.referenceEntity);\n        setAvailableBonds(bonds);\n      } catch (error) {\n        console.error('Error fetching bonds:', error);\n        setAvailableBonds([]);\n      } finally {\n        setLoadingBonds(false);\n      }\n    };\n\n    fetchBonds();\n  }, [formData.referenceEntity]);\n\n  const validateForm = (): boolean => {\n    const newErrors: FormErrors = {};\n\n    // Required field validations\n    if (!formData.referenceEntity) {\n      newErrors.referenceEntity = 'Reference Entity is required';\n    }\n    \n    if (formData.referenceEntity && !formData.obligation?.id) {\n      newErrors.obligation = 'Obligation is required';\n    }\n\n    if (!formData.notionalAmount || formData.notionalAmount <= 0) {\n      newErrors.notionalAmount = 'Notional Amount must be greater than 0';\n    }\n\n    if (!formData.spread || formData.spread < 0) {\n      newErrors.spread = 'Spread must be 0 or greater';\n    }\n\n    if (!formData.recoveryRate || formData.recoveryRate < 0 || formData.recoveryRate > 100) {\n      newErrors.recoveryRate = 'Recovery Rate must be between 0 and 100';\n    }\n\n    if (!formData.maturityDate) {\n      newErrors.maturityDate = 'Maturity Date is required';\n    }\n\n    if (!formData.effectiveDate) {\n      newErrors.effectiveDate = 'Effective Date is required';\n    }\n\n    if (!formData.counterparty) {\n      newErrors.counterparty = 'Counterparty is required';\n    }\n\n    if (!formData.tradeDate) {\n      newErrors.tradeDate = 'Trade Date is required';\n    }\n\n    if (!formData.accrualStartDate) {\n      newErrors.accrualStartDate = 'Accrual Start Date is required';\n    }\n\n    // Date validations\n    if (formData.effectiveDate && formData.maturityDate && \n        new Date(formData.effectiveDate) >= new Date(formData.maturityDate)) {\n      newErrors.maturityDate = 'Maturity Date must be after Effective Date';\n    }\n\n    if (formData.tradeDate && formData.effectiveDate && \n        new Date(formData.tradeDate) > new Date(formData.effectiveDate)) {\n      newErrors.effectiveDate = 'Effective Date must be on or after Trade Date';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleInputChange = (field: keyof CDSTrade, value: any) => {\n    setFormData(prev => {\n      const updates: Partial<CDSTrade> = {};\n      \n      // Handle obligation specially - convert to nested object\n      if (field === 'obligation') {\n        updates.obligation = value ? { id: value } : undefined;\n      } else {\n        updates[field] = value as any;\n      }\n      \n      // Clear obligation when reference entity changes\n      if (field === 'referenceEntity' && prev.referenceEntity !== value) {\n        updates.obligation = undefined;\n      }\n      \n      return {\n        ...prev,\n        ...updates\n      };\n    });\n\n    // Clear error for this field when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n\n  // Format number with commas for display\n  const formatNumberWithCommas = (num: number | undefined): string => {\n    if (!num && num !== 0) return '';\n    return num.toLocaleString('en-US');\n  };\n\n  // Handle notional amount input with formatting\n  const handleNotionalChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const rawValue = e.target.value.replace(/,/g, ''); // Remove commas\n    const numValue = parseFloat(rawValue);\n    \n    if (!isNaN(numValue) || rawValue === '') {\n      handleInputChange('notionalAmount', rawValue === '' ? undefined : numValue);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    // Defensive normalization\n    if (formData.tradeStatus === 'SETTLED' || formData.tradeStatus === 'CONFIRMED') {\n      formData.tradeStatus = 'ACTIVE';\n    }\n\n    // Simulate API call delay\n    setTimeout(() => {\n      onSubmit(formData as CDSTrade);\n      setIsSubmitting(false);\n      \n      // Reset form\n      setFormData({\n        tradeDate: new Date().toISOString().split('T')[0],\n        currency: 'USD',\n        premiumFrequency: 'QUARTERLY',\n        dayCountConvention: 'ACT_360',\n        buySellProtection: 'BUY',\n        paymentCalendar: 'NYC',\n        tradeStatus: 'PENDING',\n        recoveryRate: 40,\n        settlementType: 'CASH'\n      });\n    }, 1000);\n  };\n\n  const inputClassName = (fieldName: string) => {\n    const baseClass = \"w-full px-3 py-2 bg-fd-input border rounded-md text-fd-text placeholder-fd-text-muted focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-fd-green\";\n    const errorClass = \"border-red-500\";\n    const normalClass = \"border-fd-border\";\n    \n    return `${baseClass} ${errors[fieldName] ? errorClass : normalClass}`;\n  };\n\n  const selectClassName = (fieldName: string) => {\n    const baseClass = \"w-full px-3 py-2 bg-fd-input border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-fd-green focus:border-fd-green\";\n    const errorClass = \"border-red-500\";\n    const normalClass = \"border-fd-border\";\n    \n    return `${baseClass} ${errors[fieldName] ? errorClass : normalClass}`;\n  };\n\n  const generateRandomData = () => {\n    // Helper function to get random item from array\n    const getRandomItem = (array: any[]) => array[Math.floor(Math.random() * array.length)];\n    \n    // Helper function to get random date within a range (days offset from today)\n    const getRandomDate = (startDays: number, endDays: number) => {\n      const start = new Date();\n      start.setDate(start.getDate() + startDays);\n      const end = new Date();\n      end.setDate(end.getDate() + endDays);\n      \n      const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());\n      return new Date(randomTime).toISOString().split('T')[0];\n    };\n    \n    // Generate trades that started in the PAST for demo purposes\n    // This allows demonstrating coupon payments immediately\n    \n    // Trade date: 24-48 months ago (2-4 years in the past) for more coupons\n    const tradeDate = getRandomDate(-365 * 4, -365 * 2);\n    \n    // Effective date: 1-7 days after trade date (still in the past)\n    const tradeDateObj = new Date(tradeDate);\n    const effectiveDaysOffset = Math.floor(Math.random() * 7) + 1;\n    const effectiveDateObj = new Date(tradeDateObj);\n    effectiveDateObj.setDate(effectiveDateObj.getDate() + effectiveDaysOffset);\n    const effectiveDate = effectiveDateObj.toISOString().split('T')[0];\n    \n    // Maturity date: 2-5 years from TODAY (in the future)\n    const maturityDate = getRandomDate(365 * 2, 365 * 5);\n    \n    // Accrual start date: same as effective date\n    const accrualStartDate = effectiveDate;\n    \n    // Generate round notional amounts (5M, 10M, 20M, 50M, 100M, 200M, 500M)\n    const roundNotionals = [5000000, 10000000, 20000000, 50000000, 100000000, 200000000, 500000000];\n    const notionalAmount = getRandomItem(roundNotionals);\n    \n    const randomData: Partial<CDSTrade> = {\n      referenceEntity: getRandomItem(REFERENCE_ENTITIES).code,\n      counterparty: getRandomItem(COUNTERPARTIES).code,\n      currency: getRandomItem(CURRENCIES).code,\n      notionalAmount,\n      spread: Math.floor(Math.random() * 500) + 50, // 50 to 550 bps\n      buySellProtection: Math.random() > 0.5 ? 'BUY' : 'SELL',\n      tradeDate,\n      effectiveDate,\n      maturityDate,\n      accrualStartDate,\n      premiumFrequency: getRandomItem(PREMIUM_FREQUENCIES).value,\n      dayCountConvention: getRandomItem(DAY_COUNT_CONVENTIONS).value,\n      restructuringClause: Math.random() > 0.3 ? getRandomItem(RESTRUCTURING_CLAUSES).value : '', // 70% chance of having a clause\n      paymentCalendar: getRandomItem(PAYMENT_CALENDARS).value,\n      tradeStatus: 'ACTIVE', // Always generate ACTIVE trades for demo purposes\n      recoveryRate: 40,  // Default recovery rate\n      settlementType: getRandomItem(SETTLEMENT_METHODS).value\n    };\n    setFormData(randomData);\n    setErrors({}); // Clear any existing errors\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-fd-text\">New CDS Trade Entry</h2>\n      </div>\n      \n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Row 1: Reference Entity, Counterparty, Currency */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Reference Entity <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.referenceEntity || ''}\n              onChange={(e) => handleInputChange('referenceEntity', e.target.value)}\n              className={selectClassName('referenceEntity')}\n            >\n              <option value=\"\">Select Reference Entity</option>\n              {REFERENCE_ENTITIES.map((entity) => (\n                <option key={entity.code} value={entity.code}>\n                  {entity.code} - {entity.name}\n                </option>\n              ))}\n            </select>\n            {errors.referenceEntity && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.referenceEntity}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Counterparty <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.counterparty || ''}\n              onChange={(e) => handleInputChange('counterparty', e.target.value)}\n              className={selectClassName('counterparty')}\n            >\n              <option value=\"\">Select Counterparty</option>\n              {COUNTERPARTIES.map((cp) => (\n                <option key={cp.code} value={cp.code}>\n                  {cp.name}\n                </option>\n              ))}\n            </select>\n            {errors.counterparty && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.counterparty}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Currency <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.currency || 'USD'}\n              onChange={(e) => handleInputChange('currency', e.target.value)}\n              className={selectClassName('currency')}\n            >\n              {CURRENCIES.map((curr) => (\n                <option key={curr.code} value={curr.code}>\n                  {curr.code} - {curr.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Row 1.5: Obligation (conditional on reference entity) */}\n        {formData.referenceEntity && (\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <label className=\"block text-fd-text font-medium mb-2\">\n                Obligation (Bond) <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.obligation?.id || ''}\n                onChange={(e) => handleInputChange('obligation', e.target.value ? Number(e.target.value) : undefined)}\n                className={selectClassName('obligation')}\n                disabled={loadingBonds}\n              >\n                <option value=\"\">Select Obligation</option>\n                {loadingBonds && <option value=\"\">Loading bonds...</option>}\n                {!loadingBonds && availableBonds.length === 0 && (\n                  <option value=\"\">No bonds available for {formData.referenceEntity}</option>\n                )}\n                {!loadingBonds && availableBonds.map((bond) => (\n                  <option key={bond.id} value={bond.id}>\n                    {bond.isin ? `${bond.isin} - ` : ''}\n                    {bond.issuer} {bond.seniority} - \n                    Coupon: {bond.couponRate}% - \n                    Maturity: {new Date(bond.maturityDate).toLocaleDateString()}\n                  </option>\n                ))}\n              </select>\n              <p className=\"text-xs text-fd-text-muted mt-1\">\n                Select a specific bond from {formData.referenceEntity}\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Row 2: Notional Amount, Spread, Buy/Sell Protection */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Notional Amount <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              value={formatNumberWithCommas(formData.notionalAmount)}\n              onChange={handleNotionalChange}\n              className={inputClassName('notionalAmount')}\n              placeholder=\"e.g., 10,000,000\"\n            />\n            {errors.notionalAmount && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.notionalAmount}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Spread (bps) <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              value={formData.spread || ''}\n              onChange={(e) => handleInputChange('spread', parseFloat(e.target.value))}\n              className={inputClassName('spread')}\n              placeholder=\"e.g., 100\"\n            />\n            {errors.spread && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.spread}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Recovery Rate (%) <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"number\"\n              step=\"1\"\n              min=\"0\"\n              max=\"100\"\n              value={formData.recoveryRate || 40}\n              onChange={(e) => handleInputChange('recoveryRate', parseFloat(e.target.value))}\n              className={inputClassName('recoveryRate')}\n              placeholder=\"e.g., 40\"\n            />\n            {errors.recoveryRate && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.recoveryRate}</p>\n            )}\n          </div>\n        </div>\n\n        {/* Row 3: Buy/Sell Protection, Settlement Type */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Buy/Sell Protection <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.buySellProtection || 'BUY'}\n              onChange={(e) => handleInputChange('buySellProtection', e.target.value)}\n              className={selectClassName('buySellProtection')}\n            >\n              <option value=\"BUY\">Buy Protection</option>\n              <option value=\"SELL\">Sell Protection</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Settlement Type <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.settlementType || 'CASH'}\n              onChange={(e) => handleInputChange('settlementType', e.target.value)}\n              className={selectClassName('settlementType')}\n            >\n              {SETTLEMENT_METHODS.map((method) => (\n                <option key={method.value} value={method.value}>\n                  {method.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Row 4: Trade Date, Effective Date, Maturity Date */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Trade Date <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"date\"\n              value={formData.tradeDate || ''}\n              onChange={(e) => handleInputChange('tradeDate', e.target.value)}\n              className={inputClassName('tradeDate')}\n            />\n            {errors.tradeDate && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.tradeDate}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Effective Date <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"date\"\n              value={formData.effectiveDate || ''}\n              onChange={(e) => handleInputChange('effectiveDate', e.target.value)}\n              className={inputClassName('effectiveDate')}\n            />\n            {errors.effectiveDate && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.effectiveDate}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Maturity Date <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"date\"\n              value={formData.maturityDate || ''}\n              onChange={(e) => handleInputChange('maturityDate', e.target.value)}\n              className={inputClassName('maturityDate')}\n            />\n            {errors.maturityDate && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.maturityDate}</p>\n            )}\n          </div>\n        </div>\n\n        {/* Row 4: Premium Frequency, Day Count Convention, Accrual Start Date */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Premium Frequency <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.premiumFrequency || 'QUARTERLY'}\n              onChange={(e) => handleInputChange('premiumFrequency', e.target.value)}\n              className={selectClassName('premiumFrequency')}\n            >\n              {PREMIUM_FREQUENCIES.map((freq) => (\n                <option key={freq.value} value={freq.value}>\n                  {freq.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Day Count Convention <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.dayCountConvention || 'ACT_360'}\n              onChange={(e) => handleInputChange('dayCountConvention', e.target.value)}\n              className={selectClassName('dayCountConvention')}\n            >\n              {DAY_COUNT_CONVENTIONS.map((dcc) => (\n                <option key={dcc.value} value={dcc.value}>\n                  {dcc.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Accrual Start Date <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"date\"\n              value={formData.accrualStartDate || ''}\n              onChange={(e) => handleInputChange('accrualStartDate', e.target.value)}\n              className={inputClassName('accrualStartDate')}\n            />\n            {errors.accrualStartDate && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.accrualStartDate}</p>\n            )}\n          </div>\n        </div>\n\n        {/* Row 5: Payment Calendar, Restructuring Clause, Trade Status */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Payment Calendar <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.paymentCalendar || 'NYC'}\n              onChange={(e) => handleInputChange('paymentCalendar', e.target.value)}\n              className={selectClassName('paymentCalendar')}\n            >\n              {PAYMENT_CALENDARS.map((cal) => (\n                <option key={cal.value} value={cal.value}>\n                  {cal.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Restructuring Clause\n            </label>\n            <select\n              value={formData.restructuringClause || ''}\n              onChange={(e) => handleInputChange('restructuringClause', e.target.value)}\n              className={selectClassName('restructuringClause')}\n            >\n              <option value=\"\">None</option>\n              {RESTRUCTURING_CLAUSES.map((clause) => (\n                <option key={clause.value} value={clause.value}>\n                  {clause.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-fd-text font-medium mb-2\">\n              Trade Status <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={formData.tradeStatus || 'PENDING'}\n              onChange={(e) => handleInputChange('tradeStatus', e.target.value)}\n              className={selectClassName('tradeStatus')}\n            >\n              {TRADE_STATUSES.map((status) => (\n                <option key={status.value} value={status.value}>\n                  {status.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end space-x-4 pt-6 border-t border-fd-border\">\n          <button\n            type=\"button\"\n            onClick={generateRandomData}\n            className=\"px-6 py-2 bg-transparent border border-fd-border text-fd-text rounded hover:bg-fd-dark transition-colors\"\n          >\n            Fill Random Data\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setFormData({\n                tradeDate: new Date().toISOString().split('T')[0],\n                currency: 'USD',\n                premiumFrequency: 'QUARTERLY',\n                dayCountConvention: 'ACT_360',\n                buySellProtection: 'BUY',\n                paymentCalendar: 'NYC',\n                tradeStatus: 'PENDING',\n                recoveryRate: 40\n              });\n              setErrors({});\n            }}\n            className=\"px-6 py-2 bg-transparent border border-fd-border text-fd-text rounded hover:bg-fd-dark transition-colors\"\n          >\n            Clear Form\n          </button>\n          <button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"px-6 py-2 bg-fd-green text-fd-dark font-medium rounded hover:bg-fd-green-hover disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {isSubmitting ? 'Booking Trade...' : 'Book Trade'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CDSTradeForm;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\confirmation-modal\\ConfirmationModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":35,"column":12,"nodeType":"MemberExpression","endLine":35,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CDSTradeResponse } from '../../services/cdsTradeService';\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  trade: CDSTradeResponse | null;\n  onClose: () => void;\n}\n\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({ isOpen, trade, onClose }) => {\n  if (!isOpen || !trade) return null;\n\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency || 'USD',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const formatRestructuringClause = (clause: string) => {\n    const labels: { [key: string]: string } = {\n      'NO_RESTRUCTURING': 'No R',\n      'MODIFIED_RESTRUCTURING': 'Mod R',\n      'MODIFIED_MODIFIED_RESTRUCTURING': 'Mod Mod R',\n      'FULL_RESTRUCTURING': 'Full R'\n    };\n    return labels[clause] || clause.replace(/_/g, ' ');\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-fd-green rounded-full flex items-center justify-center\">\n              <svg\n                className=\"w-5 h-5 text-fd-dark\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M5 13l4 4L19 7\"\n                ></path>\n              </svg>\n            </div>\n            <h2 className=\"text-2xl font-bold text-fd-text\">Trade Booked Successfully</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M6 18L18 6M6 6l12 12\"\n              ></path>\n            </svg>\n          </button>\n        </div>\n\n        <div className=\"bg-fd-dark rounded-lg p-4 mb-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-fd-text-muted\">Trade ID:</span>\n            <span className=\"text-fd-green font-mono\">CDS-{trade.id}</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-fd-text-muted\">Booking Time:</span>\n            <span className=\"text-fd-text\">{new Date(trade.createdAt).toLocaleString()}</span>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-fd-text border-b border-fd-border pb-2\">\n            Trade Details\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Reference Entity:</span>\n                <span className=\"text-fd-text\">{trade.referenceEntity}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Counterparty:</span>\n                <span className=\"text-fd-text\">{trade.counterparty}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Direction:</span>\n                <span\n                  className={`${trade.buySellProtection === 'BUY' ? 'text-blue-400' : 'text-orange-400'}`}\n                >\n                  {trade.buySellProtection === 'BUY' ? 'Buy Protection' : 'Sell Protection'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Settlement Type:</span>\n                <span className={`${trade.settlementType === 'CASH' ? 'text-fd-cyan' : 'text-fd-teal'}`}>\n                  {trade.settlementType === 'CASH' ? 'Cash Settlement' : 'Physical Settlement'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Notional:</span>\n                <span className=\"text-fd-text font-medium\">\n                  {formatCurrency(trade.notionalAmount, trade.currency)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Spread:</span>\n                <span className=\"text-fd-text\">{trade.spread} bps</span>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Trade Date:</span>\n                <span className=\"text-fd-text\">{formatDate(trade.tradeDate)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Effective Date:</span>\n                <span className=\"text-fd-text\">{formatDate(trade.effectiveDate)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Maturity Date:</span>\n                <span className=\"text-fd-text\">{formatDate(trade.maturityDate)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Premium Frequency:</span>\n                <span className=\"text-fd-text\">{trade.premiumFrequency.replace('_', ' ')}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Status:</span>\n                <span className=\"text-fd-green\">{trade.tradeStatus}</span>\n              </div>\n            </div>\n          </div>\n\n          {trade.restructuringClause && (\n            <div className=\"pt-2 border-t border-fd-border\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-fd-text-muted\">Restructuring Clause:</span>\n                <span className=\"text-fd-text\">{formatRestructuringClause(trade.restructuringClause)}</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end space-x-4 mt-8 pt-4 border-t border-fd-border\">\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 bg-fd-green text-fd-dark font-medium rounded hover:bg-fd-green-hover transition-colors\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationModal;\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\credit-event-modal\\CreditEventModal.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":128,"column":9,"nodeType":"MemberExpression","endLine":128,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { REFERENCE_ENTITIES } from '../../data/referenceData';\n\nexport type CreditEventType =\n  | 'BANKRUPTCY'\n  | 'FAILURE_TO_PAY'\n  | 'RESTRUCTURING'\n  | 'OBLIGATION_DEFAULT'\n  | 'REPUDIATION_MORATORIUM'\n  | 'PAYOUT';\nexport type SettlementMethod = 'CASH' | 'PHYSICAL';\n\nexport interface CreateCreditEventRequest {\n  eventType: CreditEventType;\n  eventDate: string;\n  noticeDate: string;\n  settlementMethod: SettlementMethod;\n  comments?: string;\n}\n\ninterface CreditEventModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (request: CreateCreditEventRequest) => Promise<void>;\n  tradeId: number;\n  referenceEntity?: string;\n  isLoading?: boolean;\n}\n\nconst CreditEventModal: React.FC<CreditEventModalProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  tradeId,\n  referenceEntity,\n  isLoading = false\n}) => {\n  // Get today's date in YYYY-MM-DD format\n  const getTodayDate = () => {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  };\n\n  // Helper function to get full name of reference entity\n  const getReferenceEntityFullName = (code: string): string => {\n    const entity = REFERENCE_ENTITIES.find(e => e.code === code);\n    return entity ? entity.name : code;\n  };\n\n  const [formData, setFormData] = useState<CreateCreditEventRequest>({\n    eventType: 'RESTRUCTURING',\n    eventDate: getTodayDate(),\n    noticeDate: getTodayDate(),\n    settlementMethod: 'PHYSICAL',\n    comments: '',\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const eventTypeOptions: { value: CreditEventType; label: string }[] = [\n    { value: 'RESTRUCTURING', label: 'Restructuring' },\n    { value: 'BANKRUPTCY', label: 'Bankruptcy' },\n  ];\n\n  const settlementMethodOptions: { value: SettlementMethod; label: string }[] = [\n    { value: 'PHYSICAL', label: 'Physical Settlement' },\n    { value: 'CASH', label: 'Cash Settlement' },\n  ];\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.eventType) {\n      newErrors.eventType = 'Event type is required';\n    }\n\n    if (!formData.eventDate) {\n      newErrors.eventDate = 'Event date is required';\n    } else if (new Date(formData.eventDate) > new Date()) {\n      newErrors.eventDate = 'Event date cannot be in the future';\n    }\n\n    if (!formData.noticeDate) {\n      newErrors.noticeDate = 'Notice date is required';\n    } else if (formData.eventDate && new Date(formData.noticeDate) < new Date(formData.eventDate)) {\n      newErrors.noticeDate = 'Notice date must be on or after event date';\n    }\n\n    if (!formData.settlementMethod) {\n      newErrors.settlementMethod = 'Settlement method is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await onSubmit(formData);\n      // Reset form on successful submission\n      setFormData({\n        eventType: 'RESTRUCTURING',\n        eventDate: getTodayDate(),\n        noticeDate: getTodayDate(),\n        settlementMethod: 'PHYSICAL',\n        comments: '',\n      });\n      setErrors({});\n      onClose();\n    } catch (error) {\n      console.error('Error submitting credit event:', error);\n    }\n  };\n\n  const handleInputChange = (field: keyof CreateCreditEventRequest, value: string) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors((prev) => ({\n        ...prev,\n        [field]: '',\n      }));\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-fd-darker rounded-lg shadow-fd border border-fd-border p-6 w-full max-w-md max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold text-fd-text\">Record Credit Event</h2>\n          <button\n            onClick={onClose}\n            className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\n            disabled={isLoading}\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Reference Entity Information */}\n        {referenceEntity && (\n          <div className=\"mb-4 p-3 bg-fd-dark rounded-lg border border-fd-border\">\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-5 h-5 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n              </svg>\n              <div className=\"flex-1\">\n                <p className=\"text-xs text-fd-text-muted uppercase tracking-wide\">Reference Entity</p>\n                <p className=\"text-fd-green font-semibold\">{getReferenceEntityFullName(referenceEntity)}</p>\n                <p className=\"text-fd-text-muted text-xs mt-0.5\">{referenceEntity}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"eventType\" className=\"block text-sm font-medium text-fd-text mb-1\">\n              Event Type *\n            </label>\n            <select\n              id=\"eventType\"\n              value={formData.eventType}\n              onChange={(e) => handleInputChange('eventType', e.target.value)}\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\n                errors.eventType ? 'border-red-500' : 'border-fd-border'\n              }`}\n              disabled={isLoading}\n            >\n              {eventTypeOptions.map((option) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            {errors.eventType && <p className=\"mt-1 text-sm text-red-400\">{errors.eventType}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"eventDate\" className=\"block text-sm font-medium text-fd-text mb-1\">\n              Event Date *\n            </label>\n            <input\n              type=\"date\"\n              id=\"eventDate\"\n              value={formData.eventDate}\n              onChange={(e) => handleInputChange('eventDate', e.target.value)}\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\n                errors.eventDate ? 'border-red-500' : 'border-fd-border'\n              }`}\n              disabled={isLoading}\n            />\n            {errors.eventDate && <p className=\"mt-1 text-sm text-red-400\">{errors.eventDate}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"noticeDate\" className=\"block text-sm font-medium text-fd-text mb-1\">\n              Notice Date *\n            </label>\n            <input\n              type=\"date\"\n              id=\"noticeDate\"\n              value={formData.noticeDate}\n              onChange={(e) => handleInputChange('noticeDate', e.target.value)}\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\n                errors.noticeDate ? 'border-red-500' : 'border-fd-border'\n              }`}\n              disabled={isLoading}\n            />\n            {errors.noticeDate && <p className=\"mt-1 text-sm text-red-400\">{errors.noticeDate}</p>}\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"settlementMethod\"\n              className=\"block text-sm font-medium text-fd-text mb-1\"\n            >\n              Settlement Method *\n            </label>\n            <select\n              id=\"settlementMethod\"\n              value={formData.settlementMethod}\n              onChange={(e) => handleInputChange('settlementMethod', e.target.value)}\n              className={`w-full px-3 py-2 bg-fd-dark border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text ${\n                errors.settlementMethod ? 'border-red-500' : 'border-fd-border'\n              }`}\n              disabled={isLoading}\n            >\n              {settlementMethodOptions.map((option) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            {errors.settlementMethod && (\n              <p className=\"mt-1 text-sm text-red-400\">{errors.settlementMethod}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=\"comments\" className=\"block text-sm font-medium text-fd-text mb-1\">\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              value={formData.comments}\n              onChange={(e) => handleInputChange('comments', e.target.value)}\n              rows={3}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md focus:outline-none focus:ring-2 focus:ring-fd-green text-fd-text placeholder-fd-text-muted\"\n              placeholder=\"Optional comments about the credit event...\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-fd-text bg-fd-dark border border-fd-border rounded-md hover:bg-fd-border focus:outline-none focus:ring-2 focus:ring-fd-green transition-colors\"\n              disabled={isLoading}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 text-sm font-medium text-fd-dark bg-fd-green border border-transparent rounded-md hover:bg-fd-green-hover focus:outline-none focus:ring-2 focus:ring-fd-green disabled:opacity-50 transition-colors\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Recording...' : 'Record Credit Event'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default CreditEventModal;\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\dashboard\\MarginDashboard.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":100,"column":68,"nodeType":"MemberExpression","endLine":100,"endColumn":76}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadStatements'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [asOfDate, loadStatements]","fix":{"range":[1507,1517],"text":"[asOfDate, loadStatements]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { formatCurrency, formatDateTime } from '../../utils/formatters';\n\ninterface MarginStatement {\n  id: number;\n  statementId: string;\n  ccpName: string;\n  memberFirm: string;\n  accountNumber: string;\n  statementDate: string;\n  currency: string;\n  format: string;\n  fileName: string;\n  fileSize: number;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n  processedAt: string | null;\n  errorMessage: string;\n  retryCount: number;\n  variationMargin?: number;\n  initialMargin?: number;\n  totalPositions?: number;\n}\n\ninterface MarginPosition {\n  id: number;\n  positionId: string;\n  ccpAccount: string;\n  product: string;\n  variationMargin: number;\n  initialMargin: number;\n  currency: string;\n}\n\ninterface MarginDashboardProps {\n  asOfDate: string;\n  onRefresh: () => void;\n}\n\nconst MarginDashboard: React.FC<MarginDashboardProps> = ({\n  asOfDate,\n  onRefresh\n}) => {\n  const [statements, setStatements] = useState<MarginStatement[]>([]);\n  const [selectedStatement, setSelectedStatement] = useState<MarginStatement | null>(null);\n  const [positions, setPositions] = useState<MarginPosition[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingPositions, setLoadingPositions] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [filter, setFilter] = useState<string>('ALL');\n\n  const statusFilters = ['ALL', 'PROCESSED', 'PENDING', 'FAILED'];\n\n  useEffect(() => {\n    loadStatements();\n  }, [asOfDate]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const loadStatements = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/margin-statements?asOfDate=${asOfDate}`);\n      if (!response.ok) {\n        throw new Error('Failed to load statements');\n      }\n      \n      const data = await response.json();\n      setStatements(data);\n    } catch (err: any) {\n      setError(err.message || 'Failed to load statements');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadPositions = async (statementId: number) => {\n    try {\n      setLoadingPositions(true);\n      const response = await fetch(`/api/margin-statements/${statementId}/positions`);\n      if (!response.ok) {\n        throw new Error('Failed to load positions');\n      }\n      const data = await response.json();\n      setPositions(data);\n    } catch (err: any) {\n      console.error('Failed to load positions:', err);\n      setPositions([]);\n    } finally {\n      setLoadingPositions(false);\n    }\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'text-yellow-400';\n      case 'PROCESSING':\n        return 'text-blue-400';\n      case 'PROCESSED':\n        return 'text-green-400';\n      case 'FAILED':\n        return 'text-red-400';\n      case 'DISPUTED':\n        return 'text-orange-400';\n      default:\n        return 'text-fd-text-muted';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return (\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n          </svg>\n        );\n      case 'PROCESSING':\n        return (\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\"></div>\n        );\n      case 'PROCESSED':\n        return (\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n          </svg>\n        );\n      case 'FAILED':\n        return (\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n          </svg>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const filteredStatements = statements.filter(statement => \n    filter === 'ALL' || statement.status === filter\n  );\n\n  const handleStatementClick = (statement: MarginStatement) => {\n    setSelectedStatement(statement);\n    if (statement.status === 'PROCESSED') {\n      loadPositions(statement.id);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-500/20 border border-red-500/50 rounded-lg p-4\">\n        <div className=\"flex items-center\">\n          <svg className=\"w-5 h-5 text-red-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n          </svg>\n          <div>\n            <h3 className=\"text-sm font-medium text-red-400\">Error Loading Statements</h3>\n            <p className=\"text-sm text-red-300 mt-1\">{error}</p>\n          </div>\n        </div>\n        <button\n          onClick={loadStatements}\n          className=\"mt-3 px-3 py-1 bg-red-500/30 text-red-400 rounded text-sm hover:bg-red-500/40 transition-colors\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-fd-darker rounded-lg border border-fd-border\">\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-fd-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <svg className=\"w-8 h-8 text-blue-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\n            </svg>\n            <div>\n              <h3 className=\"text-xl font-semibold text-fd-text\">Margin Statements</h3>\n              <p className=\"text-sm text-fd-text-muted\">Daily VM/IM positions from CCPs</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <span className=\"text-sm text-fd-text-muted\">As of {asOfDate}</span>\n            <button\n              onClick={() => { loadStatements(); onRefresh(); }}\n              className=\"p-2 text-fd-text-muted hover:text-fd-text hover:bg-fd-border/50 rounded-md transition-colors\"\n              title=\"Refresh statements\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"flex space-x-1 bg-fd-dark rounded-lg p-1 mt-4\">\n          {statusFilters.map(status => (\n            <button\n              key={status}\n              onClick={() => setFilter(status)}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                filter === status\n                  ? 'bg-blue-500 text-white'\n                  : 'text-fd-text-muted hover:text-fd-text hover:bg-fd-border/50'\n              }`}\n            >\n              {status}\n              <span className=\"ml-1 text-xs\">\n                ({status === 'ALL' ? statements.length : statements.filter(s => s.status === status).length})\n              </span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Statements Grid */}\n      <div className=\"p-6\">\n        {filteredStatements.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <svg className=\"mx-auto h-12 w-12 text-fd-text-muted\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\n            </svg>\n            <h3 className=\"mt-2 text-sm font-medium text-fd-text\">No margin statements found</h3>\n            <p className=\"mt-1 text-sm text-fd-text-muted\">\n              {filter === 'ALL' ? `No statements available for ${asOfDate}` : `No statements with status: ${filter}`}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredStatements.map((statement) => (\n              <div\n                key={statement.id}\n                className=\"bg-fd-dark rounded-lg p-4 border border-fd-border hover:border-blue-500/50 cursor-pointer transition-all duration-200 hover:shadow-lg\"\n                onClick={() => handleStatementClick(statement)}\n              >\n                {/* Statement Header */}\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`flex items-center space-x-1 ${getStatusColor(statement.status)}`}>\n                      {getStatusIcon(statement.status)}\n                      <span className=\"text-xs font-medium uppercase\">{statement.status}</span>\n                    </div>\n                  </div>\n                  <span className=\"text-xs text-fd-text-muted\">\n                    {new Date(statement.statementDate).toLocaleDateString()}\n                  </span>\n                </div>\n\n                {/* Statement Details */}\n                <div className=\"space-y-2\">\n                  <div>\n                    <h4 className=\"font-medium text-fd-text truncate\">{statement.statementId}</h4>\n                    <p className=\"text-sm text-fd-text-muted\">{statement.ccpName}</p>\n                  </div>\n\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-fd-text-muted\">Account:</span>\n                    <span className=\"text-fd-text font-mono\">{statement.accountNumber}</span>\n                  </div>\n\n                  {statement.status === 'PROCESSED' && (\n                    <>\n                      {statement.variationMargin !== undefined && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-fd-text-muted\">VM:</span>\n                          <span className={`font-medium ${statement.variationMargin >= 0 ? 'text-green-400' : 'text-red-400'}`}>\n                            {formatCurrency(statement.variationMargin)}\n                          </span>\n                        </div>\n                      )}\n                      {statement.initialMargin !== undefined && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-fd-text-muted\">IM:</span>\n                          <span className=\"text-fd-text font-medium\">\n                            {formatCurrency(statement.initialMargin)}\n                          </span>\n                        </div>\n                      )}\n                      {statement.totalPositions !== undefined && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-fd-text-muted\">Positions:</span>\n                          <span className=\"text-fd-text\">{statement.totalPositions}</span>\n                        </div>\n                      )}\n                    </>\n                  )}\n\n                  <div className=\"flex justify-between text-xs text-fd-text-muted\">\n                    <span>{formatFileSize(statement.fileSize)} {statement.format}</span>\n                    <span>{formatDateTime(statement.createdAt)}</span>\n                  </div>\n                </div>\n\n                {statement.errorMessage && (\n                  <div className=\"mt-2 p-2 bg-red-500/20 border border-red-500/50 rounded text-xs text-red-400\">\n                    {statement.errorMessage.substring(0, 100)}...\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Statement Detail Modal */}\n      {selectedStatement && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-fd-darker rounded-lg shadow-lg border border-fd-border p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-fd-text\">{selectedStatement.statementId}</h3>\n              <button \n                onClick={() => setSelectedStatement(null)}\n                className=\"text-fd-text-muted hover:text-fd-text transition-colors\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n                </svg>\n              </button>\n            </div>\n\n            {/* Statement Info */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6 text-sm\">\n              <div>\n                <span className=\"text-fd-text-muted\">CCP:</span>\n                <div className=\"text-fd-text font-medium\">{selectedStatement.ccpName}</div>\n              </div>\n              <div>\n                <span className=\"text-fd-text-muted\">Account:</span>\n                <div className=\"text-fd-text font-mono\">{selectedStatement.accountNumber}</div>\n              </div>\n              <div>\n                <span className=\"text-fd-text-muted\">Date:</span>\n                <div className=\"text-fd-text\">{new Date(selectedStatement.statementDate).toLocaleDateString()}</div>\n              </div>\n              <div>\n                <span className=\"text-fd-text-muted\">Status:</span>\n                <div className={`flex items-center space-x-1 ${getStatusColor(selectedStatement.status)}`}>\n                  {getStatusIcon(selectedStatement.status)}\n                  <span className=\"font-medium\">{selectedStatement.status}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Positions Table */}\n            {selectedStatement.status === 'PROCESSED' && (\n              <div className=\"border border-fd-border rounded-lg\">\n                <div className=\"px-4 py-3 border-b border-fd-border bg-fd-dark\">\n                  <h4 className=\"font-medium text-fd-text\">Margin Positions</h4>\n                </div>\n                \n                {loadingPositions ? (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400\"></div>\n                  </div>\n                ) : positions.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-fd-dark text-xs\">\n                        <tr>\n                          <th className=\"px-4 py-2 text-left text-fd-text-muted\">Position</th>\n                          <th className=\"px-4 py-2 text-left text-fd-text-muted\">Account</th>\n                          <th className=\"px-4 py-2 text-left text-fd-text-muted\">Product</th>\n                          <th className=\"px-4 py-2 text-right text-fd-text-muted\">VM</th>\n                          <th className=\"px-4 py-2 text-right text-fd-text-muted\">IM</th>\n                          <th className=\"px-4 py-2 text-right text-fd-text-muted\">Currency</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"text-sm\">\n                        {positions.map((position) => (\n                          <tr key={position.id} className=\"border-t border-fd-border hover:bg-fd-dark/50\">\n                            <td className=\"px-4 py-2 text-fd-text font-mono text-xs\">{position.positionId}</td>\n                            <td className=\"px-4 py-2 text-fd-text\">{position.ccpAccount}</td>\n                            <td className=\"px-4 py-2 text-fd-text\">{position.product}</td>\n                            <td className={`px-4 py-2 text-right font-medium ${position.variationMargin >= 0 ? 'text-green-400' : 'text-red-400'}`}>\n                              {formatCurrency(position.variationMargin)}\n                            </td>\n                            <td className=\"px-4 py-2 text-right text-fd-text font-medium\">\n                              {formatCurrency(position.initialMargin)}\n                            </td>\n                            <td className=\"px-4 py-2 text-right text-fd-text-muted\">{position.currency}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-fd-text-muted\">\n                    No positions found\n                  </div>\n                )}\n              </div>\n            )}\n\n            {selectedStatement.errorMessage && (\n              <div className=\"mt-4 bg-red-500/20 border border-red-500/50 rounded-lg p-3\">\n                <div className=\"text-red-400 text-sm font-medium mb-1\">Error Message:</div>\n                <div className=\"text-red-300 text-sm\">{selectedStatement.errorMessage}</div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MarginDashboard;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\dashboard\\ReconciliationDashboard.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.","line":108,"column":6,"nodeType":"ArrayExpression","endLine":108,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDashboardData, selectedDate]","fix":{"range":[3221,3235],"text":"[fetchDashboardData, selectedDate]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.","line":125,"column":6,"nodeType":"ArrayExpression","endLine":125,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [autoRefresh, fetchDashboardData, selectedDate]","fix":{"range":[3594,3621],"text":"[autoRefresh, fetchDashboardData, selectedDate]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\dashboard\\SaCcrDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\dashboard\\SimmDashboard.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":57,"column":12,"nodeType":"MemberExpression","endLine":57,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":58,"column":9,"nodeType":"MemberExpression","endLine":58,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":60,"column":7,"nodeType":"MemberExpression","endLine":60,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":70,"column":12,"nodeType":"MemberExpression","endLine":70,"endColumn":30},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":71,"column":9,"nodeType":"MemberExpression","endLine":71,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":77,"column":7,"nodeType":"MemberExpression","endLine":77,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":78,"column":7,"nodeType":"MemberExpression","endLine":78,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":79,"column":7,"nodeType":"MemberExpression","endLine":79,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { formatCurrency, formatNumber } from '../../utils/formatters';\n\ninterface SimmBucketData {\n  bucketNumber: string;\n  assetClass: string;\n  initialMargin: number;\n  sensitivities: number;\n  delta: number;\n  vega: number;\n  curvature: number;\n}\n\ninterface SimmCalculation {\n  id: string;\n  portfolioId: string;\n  calculationDate: string;\n  totalInitialMargin: number;\n  currency: string;\n  buckets: SimmBucketData[];\n  parametersVersion: string;\n  calculationStatus: 'COMPLETED' | 'FAILED' | 'PENDING';\n}\n\ninterface SimmDashboardProps {\n  simmCalculations: SimmCalculation[];\n  asOfDate: string;\n  onRefresh: () => void;\n}\n\nconst SimmDashboard: React.FC<SimmDashboardProps> = ({\n  simmCalculations,\n  asOfDate,\n  onRefresh\n}) => {\n  const [selectedCalculation, setSelectedCalculation] = useState<SimmCalculation | null>(\n    simmCalculations.length > 0 ? simmCalculations[0] : null\n  );\n  const [expandedBuckets, setExpandedBuckets] = useState<Set<string>>(new Set());\n  const [groupBy, setGroupBy] = useState<'assetClass' | 'bucket'>('assetClass');\n\n  const toggleBucketExpansion = (bucketId: string) => {\n    const newExpanded = new Set(expandedBuckets);\n    if (newExpanded.has(bucketId)) {\n      newExpanded.delete(bucketId);\n    } else {\n      newExpanded.add(bucketId);\n    }\n    setExpandedBuckets(newExpanded);\n  };\n\n  const getGroupedBuckets = () => {\n    if (!selectedCalculation) return {};\n    \n    return selectedCalculation.buckets.reduce((groups, bucket) => {\n      const key = groupBy === 'assetClass' ? bucket.assetClass : bucket.bucketNumber;\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(bucket);\n      return groups;\n    }, {} as Record<string, SimmBucketData[]>);\n  };\n\n  const getAssetClassTotals = () => {\n    if (!selectedCalculation) return {};\n    \n    return selectedCalculation.buckets.reduce((totals, bucket) => {\n      const assetClass = bucket.assetClass;\n      if (!totals[assetClass]) {\n        totals[assetClass] = {\n          initialMargin: 0,\n          sensitivities: 0,\n          bucketCount: 0\n        };\n      }\n      totals[assetClass].initialMargin += bucket.initialMargin;\n      totals[assetClass].sensitivities += bucket.sensitivities;\n      totals[assetClass].bucketCount += 1;\n      return totals;\n    }, {} as Record<string, { initialMargin: number; sensitivities: number; bucketCount: number }>);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'COMPLETED': return 'text-green-400';\n      case 'FAILED': return 'text-red-400';\n      case 'PENDING': return 'text-yellow-400';\n      default: return 'text-fd-text-muted';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'COMPLETED':\n        return (\n          <svg className=\"w-4 h-4 text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\n          </svg>\n        );\n      case 'FAILED':\n        return (\n          <svg className=\"w-4 h-4 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n          </svg>\n        );\n      case 'PENDING':\n        return (\n          <svg className=\"w-4 h-4 text-yellow-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n          </svg>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"bg-fd-darker rounded-lg border border-fd-border p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <svg className=\"w-8 h-8 text-purple-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z\"></path>\n          </svg>\n          <div>\n            <h3 className=\"text-xl font-semibold text-fd-text\">SIMM Calculations</h3>\n            <p className=\"text-sm text-fd-text-muted\">Initial Margin Model</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <span className=\"text-sm text-fd-text-muted\">As of {asOfDate}</span>\n          <button\n            onClick={onRefresh}\n            className=\"p-2 text-fd-text-muted hover:text-fd-text hover:bg-fd-border/50 rounded-md transition-colors\"\n            title=\"Refresh SIMM data\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      {simmCalculations.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <svg className=\"w-12 h-12 text-fd-text-muted mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\n          </svg>\n          <p className=\"text-fd-text-muted\">No SIMM calculations available</p>\n          <p className=\"text-sm text-fd-text-muted mt-1\">Upload CRIF files to generate calculations</p>\n        </div>\n      ) : (\n        <>\n          {/* Calculation Selector */}\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <label className=\"text-sm font-medium text-fd-text\">Calculation:</label>\n            <select\n              value={selectedCalculation?.id || ''}\n              onChange={(e) => {\n                const calc = simmCalculations.find(c => c.id === e.target.value);\n                setSelectedCalculation(calc || null);\n              }}\n              className=\"bg-fd-dark border border-fd-border rounded-md px-3 py-2 text-fd-text focus:outline-none focus:ring-2 focus:ring-purple-500\"\n            >\n              {simmCalculations.map((calc) => (\n                <option key={calc.id} value={calc.id}>\n                  {calc.portfolioId} - {calc.calculationDate} ({calc.parametersVersion})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {selectedCalculation && (\n            <>\n              {/* Summary Card */}\n              <div className=\"bg-fd-dark rounded-lg p-6 border border-fd-border mb-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                  <div>\n                    <p className=\"text-sm font-medium text-fd-text-muted\">Total Initial Margin</p>\n                    <p className=\"text-2xl font-bold text-fd-text mt-1\">\n                      {formatCurrency(selectedCalculation.totalInitialMargin)}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-fd-text-muted\">Portfolio</p>\n                    <p className=\"text-lg font-semibold text-fd-text mt-1\">\n                      {selectedCalculation.portfolioId}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-fd-text-muted\">Parameters Version</p>\n                    <p className=\"text-lg font-semibold text-fd-text mt-1\">\n                      {selectedCalculation.parametersVersion}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-fd-text-muted\">Status</p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      {getStatusIcon(selectedCalculation.calculationStatus)}\n                      <span className={`text-lg font-semibold ${getStatusColor(selectedCalculation.calculationStatus)}`}>\n                        {selectedCalculation.calculationStatus}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Asset Class Summary */}\n              <div className=\"bg-fd-dark rounded-lg p-6 border border-fd-border mb-6\">\n                <h4 className=\"text-lg font-medium text-fd-text mb-4\">Asset Class Breakdown</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n                  {Object.entries(getAssetClassTotals()).map(([assetClass, totals]) => (\n                    <div key={assetClass} className=\"bg-fd-darker rounded-lg p-4\">\n                      <p className=\"text-sm font-medium text-fd-text-muted\">{assetClass}</p>\n                      <p className=\"text-lg font-bold text-fd-text mt-1\">\n                        {formatCurrency(totals.initialMargin)}\n                      </p>\n                      <p className=\"text-xs text-fd-text-muted mt-1\">\n                        {totals.bucketCount} bucket{totals.bucketCount !== 1 ? 's' : ''}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Bucket Details */}\n              <div className=\"bg-fd-dark rounded-lg border border-fd-border\">\n                <div className=\"px-6 py-4 border-b border-fd-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"text-lg font-medium text-fd-text\">\n                      Bucket Details ({selectedCalculation.buckets.length})\n                    </h4>\n                    <div className=\"flex items-center space-x-2\">\n                      <label className=\"text-sm text-fd-text-muted\">Group by:</label>\n                      <select\n                        value={groupBy}\n                        onChange={(e) => setGroupBy(e.target.value as 'assetClass' | 'bucket')}\n                        className=\"bg-fd-darker border border-fd-border rounded-md px-3 py-1 text-sm text-fd-text focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      >\n                        <option value=\"assetClass\">Asset Class</option>\n                        <option value=\"bucket\">Bucket</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"overflow-hidden\">\n                  {Object.entries(getGroupedBuckets()).map(([groupKey, buckets]) => (\n                    <div key={groupKey} className=\"border-b border-fd-border last:border-b-0\">\n                      {/* Group Header */}\n                      <div className=\"px-6 py-3 bg-fd-darker/50\">\n                        <h5 className=\"font-medium text-fd-text\">\n                          {groupBy === 'assetClass' ? `${groupKey} Asset Class` : `Bucket ${groupKey}`}\n                        </h5>\n                      </div>\n\n                      {/* Bucket Rows */}\n                      {buckets.map((bucket) => (\n                        <div key={`${bucket.assetClass}-${bucket.bucketNumber}`}>\n                          <div\n                            className=\"px-6 py-4 hover:bg-fd-darker/30 cursor-pointer transition-colors\"\n                            onClick={() => toggleBucketExpansion(`${bucket.assetClass}-${bucket.bucketNumber}`)}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-4\">\n                                <svg \n                                  className={`w-4 h-4 text-fd-text-muted transition-transform ${\n                                    expandedBuckets.has(`${bucket.assetClass}-${bucket.bucketNumber}`) ? 'rotate-90' : ''\n                                  }`} \n                                  fill=\"none\" \n                                  stroke=\"currentColor\" \n                                  viewBox=\"0 0 24 24\"\n                                >\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5l7 7-7 7\"></path>\n                                </svg>\n                                <div>\n                                  <p className=\"font-medium text-fd-text\">\n                                    {groupBy === 'assetClass' ? `Bucket ${bucket.bucketNumber}` : bucket.assetClass}\n                                  </p>\n                                  <p className=\"text-sm text-fd-text-muted\">\n                                    {formatNumber(bucket.sensitivities)} sensitivities\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-medium text-fd-text\">\n                                  {formatCurrency(bucket.initialMargin)}\n                                </p>\n                                <p className=\"text-sm text-fd-text-muted\">\n                                  {formatNumber((bucket.initialMargin / selectedCalculation.totalInitialMargin) * 100, 1)}%\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Expanded Risk Details */}\n                          {expandedBuckets.has(`${bucket.assetClass}-${bucket.bucketNumber}`) && (\n                            <div className=\"px-6 pb-4 bg-fd-darker/20\">\n                              <div className=\"grid grid-cols-3 gap-4 pt-4\">\n                                <div className=\"bg-fd-dark rounded-md p-3\">\n                                  <p className=\"text-xs text-fd-text-muted uppercase tracking-wide\">Delta</p>\n                                  <p className=\"text-lg font-semibold text-fd-text mt-1\">\n                                    {formatCurrency(bucket.delta)}\n                                  </p>\n                                </div>\n                                <div className=\"bg-fd-dark rounded-md p-3\">\n                                  <p className=\"text-xs text-fd-text-muted uppercase tracking-wide\">Vega</p>\n                                  <p className=\"text-lg font-semibold text-fd-text mt-1\">\n                                    {formatCurrency(bucket.vega)}\n                                  </p>\n                                </div>\n                                <div className=\"bg-fd-dark rounded-md p-3\">\n                                  <p className=\"text-xs text-fd-text-muted uppercase tracking-wide\">Curvature</p>\n                                  <p className=\"text-lg font-semibold text-fd-text mt-1\">\n                                    {formatCurrency(bucket.curvature)}\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SimmDashboard;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\AccrualHistoryPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\AmendTradeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\CashflowPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCashflowData'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadCashflowData, trade.id]","fix":{"range":[1451,1461],"text":"[loadCashflowData, trade.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\CouponSchedulePanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'autoGenerate', 'generateSchedule', 'loadSchedule', and 'periods.length'. Either include them or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [autoGenerate, generateSchedule, loadSchedule, periods.length, tradeId]","fix":{"range":[1410,1419],"text":"[autoGenerate, generateSchedule, loadSchedule, periods.length, tradeId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\LifecycleTimeline.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLifecycleData'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadLifecycleData, trade.id]","fix":{"range":[1641,1651],"text":"[loadLifecycleData, trade.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\lifecycle\\NotionalAdjustmentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\margin\\AutomatedStatementGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\margin\\MarginPositionsModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPositions'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [loadPositions, statementId]","fix":{"range":[1353,1366],"text":"[loadPositions, statementId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\margin\\MarginStatementsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\margin\\StatementList.tsx","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":97,"column":68,"nodeType":"MemberExpression","endLine":97,"endColumn":76,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\margin\\StatementUpload.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":203,"column":68,"nodeType":"MemberExpression","endLine":203,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\n\ninterface StatementUploadProps {\n  onUploadSuccess?: (statementId: number) => void;\n  onUploadError?: (error: string) => void;\n}\n\ninterface UploadFormData {\n  statementId: string;\n  ccpName: string;\n  memberFirm: string;\n  accountNumber: string;\n  statementDate: string;\n  currency: string;\n  format: string;\n}\n\nconst StatementUpload: React.FC<StatementUploadProps> = ({ onUploadSuccess, onUploadError }) => {\n  const [formData, setFormData] = useState<UploadFormData>({\n    statementId: '',\n    ccpName: 'LCH',\n    memberFirm: '',\n    accountNumber: '',\n    statementDate: '',\n    currency: 'USD',\n    format: 'CSV'\n  });\n\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const ccpOptions = ['LCH', 'CME', 'EUREX', 'ICE'];\n  const currencyOptions = ['USD', 'EUR', 'GBP', 'JPY', 'CHF'];\n  const formatOptions = ['CSV', 'XML', 'JSON', 'PROPRIETARY'];\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    setError(null);\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFileSelect(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleFileSelect = (file: File) => {\n    setSelectedFile(file);\n    setError(null);\n    setSuccess(null);\n\n    // Auto-detect format based on file extension\n    const extension = file.name.toLowerCase().split('.').pop();\n    if (extension === 'csv') {\n      setFormData(prev => ({ ...prev, format: 'CSV' }));\n    } else if (extension === 'xml') {\n      setFormData(prev => ({ ...prev, format: 'XML' }));\n    } else if (extension === 'json') {\n      setFormData(prev => ({ ...prev, format: 'JSON' }));\n    }\n\n    // Generate statement ID if not provided\n    if (!formData.statementId) {\n      const timestamp = new Date().toISOString().split('T')[0].replace(/-/g, '');\n      const randomSuffix = Math.random().toString(36).substring(2, 8).toUpperCase();\n      setFormData(prev => ({ \n        ...prev, \n        statementId: `${formData.ccpName}_${timestamp}_${randomSuffix}` \n      }));\n    }\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      handleFileSelect(e.target.files[0]);\n    }\n  };\n\n  const validateForm = (): string | null => {\n    if (!selectedFile) return 'Please select a file to upload';\n    if (!formData.statementId.trim()) return 'Statement ID is required';\n    if (!formData.memberFirm.trim()) return 'Member firm is required';\n    if (!formData.accountNumber.trim()) return 'Account number is required';\n    if (!formData.statementDate) return 'Statement date is required';\n    \n    // Validate file size (50MB limit)\n    if (selectedFile.size > 50 * 1024 * 1024) {\n      return 'File size must be less than 50MB';\n    }\n\n    // Validate date is not in future\n    const statementDate = new Date(formData.statementDate);\n    if (statementDate > new Date()) {\n      return 'Statement date cannot be in the future';\n    }\n\n    return null;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const validationError = validateForm();\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    setUploading(true);\n    setError(null);\n    setSuccess(null);\n    setUploadProgress(0);\n\n    try {\n      const formDataToSend = new FormData();\n      formDataToSend.append('file', selectedFile!);\n      formDataToSend.append('statementId', formData.statementId);\n      formDataToSend.append('ccpName', formData.ccpName);\n      formDataToSend.append('memberFirm', formData.memberFirm);\n      formDataToSend.append('accountNumber', formData.accountNumber);\n      formDataToSend.append('statementDate', formData.statementDate);\n      formDataToSend.append('currency', formData.currency);\n      formDataToSend.append('format', formData.format);\n\n      // Simulate upload progress\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => Math.min(prev + 10, 90));\n      }, 200);\n\n      const response = await fetch('/api/margin-statements/upload', {\n        method: 'POST',\n        body: formDataToSend\n      });\n\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.error || 'Upload failed');\n      }\n\n      setSuccess(`Statement uploaded successfully! ID: ${result.statementId}`);\n      \n      // Reset form\n      setSelectedFile(null);\n      setFormData({\n        statementId: '',\n        ccpName: 'LCH',\n        memberFirm: '',\n        accountNumber: '',\n        statementDate: '',\n        currency: 'USD',\n        format: 'CSV'\n      });\n      \n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n\n      if (onUploadSuccess) {\n        onUploadSuccess(result.statementId);\n      }\n\n    } catch (err: any) {\n      setError(err.message || 'Upload failed');\n      if (onUploadError) {\n        onUploadError(err.message);\n      }\n    } finally {\n      setUploading(false);\n      setTimeout(() => setUploadProgress(0), 2000);\n    }\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"bg-fd-darker rounded-lg border border-fd-border p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n          <svg className=\"w-5 h-5 text-blue-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"></path>\n          </svg>\n        </div>\n        <h2 className=\"text-2xl font-bold text-fd-text\">Upload Margin Statement</h2>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* File Upload Area */}\n        <div className=\"space-y-4\">\n          <label className=\"block text-sm font-medium text-fd-text\">Statement File</label>\n          <div\n            className={`relative border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n              dragActive\n                ? 'border-blue-400 bg-blue-400/10'\n                : 'border-fd-border hover:border-fd-green'\n            }`}\n            onDragEnter={handleDrag}\n            onDragLeave={handleDrag}\n            onDragOver={handleDrag}\n            onDrop={handleDrop}\n          >\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              onChange={handleFileInputChange}\n              accept=\".csv,.xml,.json,.txt\"\n              className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n            />\n            \n            {selectedFile ? (\n              <div className=\"space-y-2\">\n                <div className=\"w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto\">\n                  <svg className=\"w-6 h-6 text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                  </svg>\n                </div>\n                <div className=\"text-fd-text font-medium\">{selectedFile.name}</div>\n                <div className=\"text-fd-text-muted text-sm\">{formatFileSize(selectedFile.size)}</div>\n                {uploadProgress > 0 && uploadProgress < 100 && (\n                  <div className=\"w-full bg-fd-border rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${uploadProgress}%` }}\n                    ></div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <div className=\"w-12 h-12 bg-fd-border rounded-full flex items-center justify-center mx-auto\">\n                  <svg className=\"w-6 h-6 text-fd-text-muted\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"></path>\n                  </svg>\n                </div>\n                <div className=\"text-fd-text\">\n                  <span className=\"font-medium\">Click to upload</span> or drag and drop\n                </div>\n                <div className=\"text-fd-text-muted text-sm\">\n                  CSV, XML, JSON files up to 50MB\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Form Fields */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-fd-text mb-2\">Statement ID</label>\n            <input\n              type=\"text\"\n              name=\"statementId\"\n              value={formData.statementId}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"AUTO_GENERATED_001\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-fd-text mb-2\">CCP Name</label>\n            <select\n              name=\"ccpName\"\n              value={formData.ccpName}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {ccpOptions.map(ccp => (\n                <option key={ccp} value={ccp}>{ccp}</option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-fd-text mb-2\">Member Firm</label>\n            <input\n              type=\"text\"\n              name=\"memberFirm\"\n              value={formData.memberFirm}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Goldman Sachs\"\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-fd-text mb-2\">Account Number</label>\n            <input\n              type=\"text\"\n              name=\"accountNumber\"\n              value={formData.accountNumber}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"HOUSE-001\"\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-fd-text mb-2\">Statement Date</label>\n            <input\n              type=\"date\"\n              name=\"statementDate\"\n              value={formData.statementDate}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-fd-text mb-2\">Currency</label>\n            <select\n              name=\"currency\"\n              value={formData.currency}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {currencyOptions.map(currency => (\n                <option key={currency} value={currency}>{currency}</option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-fd-text mb-2\">Format</label>\n            <select\n              name=\"format\"\n              value={formData.format}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 bg-fd-dark border border-fd-border rounded-md text-fd-text focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {formatOptions.map(format => (\n                <option key={format} value={format}>{format}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Error/Success Messages */}\n        {error && (\n          <div className=\"bg-red-500/20 border border-red-500/50 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2\">\n              <svg className=\"w-5 h-5 text-red-400 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\n              </svg>\n              <span className=\"text-red-400 text-sm\">{error}</span>\n            </div>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-500/20 border border-green-500/50 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2\">\n              <svg className=\"w-5 h-5 text-green-400 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n              </svg>\n              <span className=\"text-green-400 text-sm\">{success}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end space-x-4 pt-4 border-t border-fd-border\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              setSelectedFile(null);\n              setFormData({\n                statementId: '',\n                ccpName: 'LCH',\n                memberFirm: '',\n                accountNumber: '',\n                statementDate: '',\n                currency: 'USD',\n                format: 'CSV'\n              });\n              setError(null);\n              setSuccess(null);\n              if (fileInputRef.current) {\n                fileInputRef.current.value = '';\n              }\n            }}\n            className=\"px-6 py-2 bg-fd-border text-fd-text rounded hover:bg-fd-border/80 transition-colors\"\n          >\n            Clear\n          </button>\n          <button\n            type=\"submit\"\n            disabled={uploading || !selectedFile}\n            className=\"px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n          >\n            {uploading && (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n            )}\n            <span>{uploading ? 'Uploading...' : 'Upload Statement'}</span>\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default StatementUpload;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\novation\\NovationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\AttachInstrumentsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\AttachTradesModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\CreatePortfolioModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\EnhancedOverview.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":200,"column":12,"nodeType":"MemberExpression","endLine":200,"endColumn":29}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateExposures'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [cdsConstituents, bondConstituents, basketConstituents, calculateExposures]","fix":{"range":[1277,1332],"text":"[cdsConstituents, bondConstituents, basketConstituents, calculateExposures]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  BondPortfolioConstituent,\n  BasketPortfolioConstituent,\n  CdsPortfolioConstituent,\n} from '../../services/portfolioService';\n\ninterface EnhancedOverviewProps {\n  portfolioId: number;\n  cdsConstituents: CdsPortfolioConstituent[];\n  bondConstituents: BondPortfolioConstituent[];\n  basketConstituents: BasketPortfolioConstituent[];\n  pricingData: any;\n}\n\ninterface IssuerExposure {\n  issuer: string;\n  sector: string;\n  bondNotional: number;\n  cdsProtectionBought: number;\n  cdsProtectionSold: number;\n  netCreditExposure: number;\n  hedgeRatio: number;\n  hedgeStatus: 'OVER_HEDGED' | 'UNDER_HEDGED' | 'BALANCED' | 'UNHEDGED';\n  recommendation: string;\n}\n\ninterface SectorExposure {\n  sector: string;\n  notional: number;\n  percentage: number;\n  instrumentCount: number;\n}\n\nconst EnhancedOverview: React.FC<EnhancedOverviewProps> = ({\n  portfolioId,\n  cdsConstituents,\n  bondConstituents,\n  basketConstituents,\n  pricingData,\n}) => {\n  const [issuerExposures, setIssuerExposures] = useState<IssuerExposure[]>([]);\n  const [sectorExposures, setSectorExposures] = useState<SectorExposure[]>([]);\n\n  useEffect(() => {\n    calculateExposures();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cdsConstituents, bondConstituents, basketConstituents]);\n\n  const calculateExposures = useCallback(() => {\n    // Map to aggregate by issuer\n    const issuerMap = new Map<string, IssuerExposure>();\n\n    // Process bonds\n    bondConstituents.forEach((bc) => {\n      const issuer = bc.bond.issuer;\n      if (!issuerMap.has(issuer)) {\n        issuerMap.set(issuer, {\n          issuer,\n          sector: getSectorFromIssuer(issuer),\n          bondNotional: 0,\n          cdsProtectionBought: 0,\n          cdsProtectionSold: 0,\n          netCreditExposure: 0,\n          hedgeRatio: 0,\n          hedgeStatus: 'UNHEDGED',\n          recommendation: '',\n        });\n      }\n      const exposure = issuerMap.get(issuer)!;\n      exposure.bondNotional += bc.bond.notional;\n    });\n\n    // Process CDS\n    cdsConstituents.forEach((cc) => {\n      const issuer = cc.trade.referenceEntity;\n      if (!issuerMap.has(issuer)) {\n        issuerMap.set(issuer, {\n          issuer,\n          sector: getSectorFromIssuer(issuer),\n          bondNotional: 0,\n          cdsProtectionBought: 0,\n          cdsProtectionSold: 0,\n          netCreditExposure: 0,\n          hedgeRatio: 0,\n          hedgeStatus: 'UNHEDGED',\n          recommendation: '',\n        });\n      }\n      const exposure = issuerMap.get(issuer)!;\n\n      // Assuming BUY = buying protection (short credit), SELL = selling protection (long credit)\n      // This is a simplification - you may need to check actual buySell field\n      exposure.cdsProtectionBought += cc.trade.notionalAmount;\n    });\n\n    // Calculate net exposures and recommendations\n    const exposures: IssuerExposure[] = [];\n    issuerMap.forEach((exp) => {\n      exp.netCreditExposure = exp.bondNotional - exp.cdsProtectionBought + exp.cdsProtectionSold;\n\n      if (exp.bondNotional > 0) {\n        exp.hedgeRatio = (exp.cdsProtectionBought / exp.bondNotional) * 100;\n\n        if (exp.hedgeRatio > 110) {\n          exp.hedgeStatus = 'OVER_HEDGED';\n          exp.recommendation = `Consider reducing CDS protection by $${((exp.cdsProtectionBought - exp.bondNotional) / 1000000).toFixed(1)}M`;\n        } else if (exp.hedgeRatio >= 90 && exp.hedgeRatio <= 110) {\n          exp.hedgeStatus = 'BALANCED';\n          exp.recommendation = 'Well hedged';\n        } else if (exp.hedgeRatio > 0) {\n          exp.hedgeStatus = 'UNDER_HEDGED';\n          exp.recommendation = `Consider buying $${((exp.bondNotional - exp.cdsProtectionBought) / 1000000).toFixed(1)}M CDS protection`;\n        } else {\n          exp.hedgeStatus = 'UNHEDGED';\n          exp.recommendation = `⚠️ Buy $${(exp.bondNotional / 1000000).toFixed(1)}M CDS protection to hedge bond exposure`;\n        }\n      } else if (exp.cdsProtectionBought > 0) {\n        exp.hedgeStatus = 'UNHEDGED';\n        exp.recommendation = `Consider buying $${(exp.cdsProtectionBought / 1000000).toFixed(1)}M in bonds to capture basis`;\n      }\n\n      exposures.push(exp);\n    });\n\n    setIssuerExposures(\n      exposures.sort((a, b) => Math.abs(b.netCreditExposure) - Math.abs(a.netCreditExposure))\n    );\n\n    // Calculate sector exposures\n    const sectorMap = new Map<string, { notional: number; count: number }>();\n\n    bondConstituents.forEach((bc) => {\n      const sector = getSectorFromIssuer(bc.bond.issuer);\n      if (!sectorMap.has(sector)) {\n        sectorMap.set(sector, { notional: 0, count: 0 });\n      }\n      const sectorData = sectorMap.get(sector)!;\n      sectorData.notional += bc.bond.notional;\n      sectorData.count++;\n    });\n\n    cdsConstituents.forEach((cc) => {\n      const sector = getSectorFromIssuer(cc.trade.referenceEntity);\n      if (!sectorMap.has(sector)) {\n        sectorMap.set(sector, { notional: 0, count: 0 });\n      }\n      const sectorData = sectorMap.get(sector)!;\n      sectorData.notional += cc.trade.notionalAmount;\n      sectorData.count++;\n    });\n\n    // Add baskets as \"BASKET\" sector for now\n    // TODO: In future, unwind basket constituents to their actual sectors\n    basketConstituents.forEach((bc) => {\n      const sector = 'BASKET';\n      if (!sectorMap.has(sector)) {\n        sectorMap.set(sector, { notional: 0, count: 0 });\n      }\n      const sectorData = sectorMap.get(sector)!;\n      // Use basket.notional (backend field name)\n      const notional = bc.basket?.notional || bc.weightValue || 0;\n      sectorData.notional += notional;\n      sectorData.count++;\n    });\n\n    const totalNotional = Array.from(sectorMap.values()).reduce((sum, s) => sum + s.notional, 0);\n    const sectors: SectorExposure[] = [];\n\n    sectorMap.forEach((data, sector) => {\n      sectors.push({\n        sector,\n        notional: data.notional,\n        percentage: totalNotional > 0 ? (data.notional / totalNotional) * 100 : 0,\n        instrumentCount: data.count,\n      });\n    });\n\n    setSectorExposures(sectors.sort((a, b) => b.notional - a.notional));\n  }, [basketConstituents, bondConstituents, cdsConstituents]); // useCallback dependency array\n\n  const getSectorFromIssuer = (issuer: string): string => {\n    const sectorMap: Record<string, string> = {\n      AAPL: 'TECH',\n      MSFT: 'TECH',\n      AMZN: 'TECH',\n      GOOGL: 'TECH',\n      TSLA: 'TECH',\n      NFLX: 'TECH',\n      META: 'TECH',\n      NVDA: 'TECH',\n      AMD: 'TECH',\n      JPM: 'FINANCIALS',\n      BAC: 'FINANCIALS',\n      WFC: 'FINANCIALS',\n      GS: 'FINANCIALS',\n      MS: 'FINANCIALS',\n      C: 'FINANCIALS',\n    };\n    return sectorMap[issuer] || 'OTHER';\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getHedgeStatusColor = (status: string) => {\n    switch (status) {\n      case 'BALANCED':\n        return 'text-fd-green';\n      case 'UNDER_HEDGED':\n        return 'text-yellow-400';\n      case 'OVER_HEDGED':\n        return 'text-blue-400';\n      case 'UNHEDGED':\n        return 'text-red-400';\n      default:\n        return 'text-fd-text-muted';\n    }\n  };\n\n  const getHedgeStatusBadge = (status: string) => {\n    switch (status) {\n      case 'BALANCED':\n        return 'bg-green-900/30 text-green-400 border-green-500';\n      case 'UNDER_HEDGED':\n        return 'bg-yellow-900/30 text-yellow-400 border-yellow-500';\n      case 'OVER_HEDGED':\n        return 'bg-blue-900/30 text-blue-400 border-blue-500';\n      case 'UNHEDGED':\n        return 'bg-red-900/30 text-red-400 border-red-500';\n      default:\n        return 'bg-fd-dark text-fd-text-muted border-fd-border';\n    }\n  };\n\n  const getSectorColor = (index: number) => {\n    const colors = [\n      'bg-fd-green',\n      'bg-blue-500',\n      'bg-yellow-500',\n      'bg-purple-500',\n      'bg-pink-500',\n      'bg-indigo-500',\n      'bg-teal-500',\n      'bg-orange-500',\n    ];\n    return colors[index % colors.length];\n  };\n\n  const totalCdsNotional = cdsConstituents.reduce((sum, c) => sum + c.trade.notionalAmount, 0);\n  const totalBondNotional = bondConstituents.reduce((sum, c) => sum + c.bond.notional, 0);\n  const totalBasketNotional = basketConstituents.reduce((sum, c) => {\n    // Use basket.notional (backend field name)\n    const notional = c.basket?.notional || c.weightValue || 0;\n    return sum + notional;\n  }, 0);\n  const totalNotional = totalCdsNotional + totalBondNotional + totalBasketNotional;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Instrument Distribution */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Instrument Type Breakdown */}\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Instrument Distribution</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-4 h-4 bg-fd-green rounded\"></div>\n                <span className=\"text-fd-text\">🛡️ CDS Trades</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-fd-text font-medium\">{formatCurrency(totalCdsNotional)}</div>\n                <div className=\"text-sm text-fd-text-muted\">\n                  {totalNotional > 0 ? ((totalCdsNotional / totalNotional) * 100).toFixed(1) : 0}% •{' '}\n                  {cdsConstituents.length} positions\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\n              <div\n                className=\"bg-fd-green h-2 rounded-full transition-all\"\n                style={{\n                  width: `${totalNotional > 0 ? (totalCdsNotional / totalNotional) * 100 : 0}%`,\n                }}\n              ></div>\n            </div>\n\n            <div className=\"flex items-center justify-between mt-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                <span className=\"text-fd-text\">📜 Corporate Bonds</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-fd-text font-medium\">{formatCurrency(totalBondNotional)}</div>\n                <div className=\"text-sm text-fd-text-muted\">\n                  {totalNotional > 0 ? ((totalBondNotional / totalNotional) * 100).toFixed(1) : 0}%\n                  • {bondConstituents.length} positions\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\n              <div\n                className=\"bg-blue-500 h-2 rounded-full transition-all\"\n                style={{\n                  width: `${totalNotional > 0 ? (totalBondNotional / totalNotional) * 100 : 0}%`,\n                }}\n              ></div>\n            </div>\n\n            <div className=\"flex items-center justify-between mt-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                <span className=\"text-fd-text\">🗂️ Credit Baskets</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-fd-text font-medium\">\n                  {formatCurrency(totalBasketNotional)}\n                </div>\n                <div className=\"text-sm text-fd-text-muted\">\n                  {totalNotional > 0 ? ((totalBasketNotional / totalNotional) * 100).toFixed(1) : 0}\n                  % • {basketConstituents.length} positions\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full bg-fd-dark rounded-full h-2\">\n              <div\n                className=\"bg-purple-500 h-2 rounded-full transition-all\"\n                style={{\n                  width: `${totalNotional > 0 ? (totalBasketNotional / totalNotional) * 100 : 0}%`,\n                }}\n              ></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Sector Exposure */}\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-fd-text mb-4\">Sector Allocation</h3>\n          <div className=\"space-y-3\">\n            {sectorExposures.slice(0, 5).map((sector, idx) => (\n              <div key={sector.sector} className=\"space-y-1\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded ${getSectorColor(idx)}`}></div>\n                    <span className=\"text-fd-text\">{sector.sector}</span>\n                  </div>\n                  <div className=\"text-fd-text-muted\">\n                    {sector.percentage.toFixed(1)}% • {sector.instrumentCount} instruments\n                  </div>\n                </div>\n                <div className=\"w-full bg-fd-dark rounded-full h-1.5\">\n                  <div\n                    className={`${getSectorColor(idx)} h-1.5 rounded-full transition-all`}\n                    style={{ width: `${sector.percentage}%` }}\n                  ></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Net Exposure by Issuer */}\n      <div className=\"bg-fd-darker border border-fd-border rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-fd-text\">Net Credit Exposure by Issuer</h3>\n          <div className=\"text-sm text-fd-text-muted\">Showing bond positions vs CDS hedges</div>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-fd-border\">\n            <thead>\n              <tr className=\"text-left text-xs font-medium text-fd-text-muted uppercase tracking-wider\">\n                <th className=\"px-4 py-3\">Issuer</th>\n                <th className=\"px-4 py-3\">Sector</th>\n                <th className=\"px-4 py-3 text-right\">Bond Exposure</th>\n                <th className=\"px-4 py-3 text-right\">CDS Protection</th>\n                <th className=\"px-4 py-3 text-right\">Net Exposure</th>\n                <th className=\"px-4 py-3 text-center\">Hedge Ratio</th>\n                <th className=\"px-4 py-3 text-center\">Status</th>\n                <th className=\"px-4 py-3\">Recommendation</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-fd-border\">\n              {issuerExposures.map((exp) => (\n                <tr key={exp.issuer} className=\"hover:bg-fd-dark transition-colors\">\n                  <td className=\"px-4 py-3 text-sm font-medium text-fd-text\">{exp.issuer}</td>\n                  <td className=\"px-4 py-3 text-sm text-fd-text-muted\">{exp.sector}</td>\n                  <td className=\"px-4 py-3 text-sm text-right text-fd-text\">\n                    {exp.bondNotional > 0 ? formatCurrency(exp.bondNotional) : '-'}\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-right text-fd-text\">\n                    {exp.cdsProtectionBought > 0 ? formatCurrency(exp.cdsProtectionBought) : '-'}\n                  </td>\n                  <td\n                    className={`px-4 py-3 text-sm text-right font-medium ${\n                      exp.netCreditExposure > 0\n                        ? 'text-red-400'\n                        : exp.netCreditExposure < 0\n                          ? 'text-fd-green'\n                          : 'text-fd-text'\n                    }`}\n                  >\n                    {formatCurrency(Math.abs(exp.netCreditExposure))}\n                    {exp.netCreditExposure > 0\n                      ? ' Long'\n                      : exp.netCreditExposure < 0\n                        ? ' Short'\n                        : ''}\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center text-fd-text\">\n                    {exp.bondNotional > 0 ? `${exp.hedgeRatio.toFixed(0)}%` : 'N/A'}\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">\n                    <span\n                      className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium border ${getHedgeStatusBadge(exp.hedgeStatus)}`}\n                    >\n                      {exp.hedgeStatus.replace('_', ' ')}\n                    </span>\n                  </td>\n                  <td className={`px-4 py-3 text-sm ${getHedgeStatusColor(exp.hedgeStatus)}`}>\n                    {exp.recommendation}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {issuerExposures.length === 0 && (\n          <div className=\"text-center py-8 text-fd-text-muted\">\n            No exposures to analyze. Add some CDS trades and bonds to see hedge recommendations.\n          </div>\n        )}\n      </div>\n\n      {/* Key Metrics Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\n          <div className=\"text-sm text-fd-text-muted mb-1\">Total Instruments</div>\n          <div className=\"text-2xl font-semibold text-fd-text\">\n            {cdsConstituents.length + bondConstituents.length + basketConstituents.length}\n          </div>\n          <div className=\"text-xs text-fd-text-muted mt-1\">\n            {cdsConstituents.length} CDS • {bondConstituents.length} Bonds •{' '}\n            {basketConstituents.length} Baskets\n          </div>\n        </div>\n\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\n          <div className=\"text-sm text-fd-text-muted mb-1\">Unique Issuers</div>\n          <div className=\"text-2xl font-semibold text-fd-text\">{issuerExposures.length}</div>\n          <div className=\"text-xs text-fd-text-muted mt-1\">{sectorExposures.length} sectors</div>\n        </div>\n\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\n          <div className=\"text-sm text-fd-text-muted mb-1\">Hedge Coverage</div>\n          <div className=\"text-2xl font-semibold text-fd-text\">\n            {totalBondNotional > 0 ? ((totalCdsNotional / totalBondNotional) * 100).toFixed(0) : 0}%\n          </div>\n          <div className=\"text-xs text-fd-text-muted mt-1\">CDS / Bond ratio</div>\n        </div>\n\n        <div className=\"bg-fd-darker border border-fd-border rounded-lg p-4\">\n          <div className=\"text-sm text-fd-text-muted mb-1\">Unhedged Exposure</div>\n          <div className=\"text-2xl font-semibold text-red-400\">\n            {\n              issuerExposures.filter(\n                (e) => e.hedgeStatus === 'UNHEDGED' || e.hedgeStatus === 'UNDER_HEDGED'\n              ).length\n            }\n          </div>\n          <div className=\"text-xs text-fd-text-muted mt-1\">issuers need attention</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedOverview;\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioDetail.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPortfolioData'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [loadPortfolioData, portfolioId]","fix":{"range":[1571,1584],"text":"[loadPortfolioData, portfolioId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\PortfolioPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\ContributorsTable.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":25,"column":16,"nodeType":"MemberExpression","endLine":25,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":26,"column":16,"nodeType":"MemberExpression","endLine":26,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Contributor } from '../../../services/simulationService';\n\ninterface ContributorsTableProps {\n  contributors: Contributor[];\n}\n\ntype SortField = 'entity' | 'marginalElPct' | 'beta';\ntype SortDirection = 'asc' | 'desc';\n\nconst ContributorsTable: React.FC<ContributorsTableProps> = ({ contributors }) => {\n  const [sortField, setSortField] = useState<SortField>('marginalElPct');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection(field === 'entity' ? 'asc' : 'desc');\n    }\n  };\n\n  const sortedContributors = [...contributors].sort((a, b) => {\n    let aVal = a[sortField];\n    let bVal = b[sortField];\n\n    if (typeof aVal === 'string') {\n      aVal = aVal.toLowerCase();\n      bVal = (bVal as string).toLowerCase();\n    }\n\n    if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;\n    if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;\n    return 0;\n  });\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) {\n      return (\n        <svg\n          className=\"w-4 h-4 text-fd-text-muted\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\n          />\n        </svg>\n      );\n    }\n\n    return sortDirection === 'asc' ? (\n      <svg className=\"w-4 h-4 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n      </svg>\n    ) : (\n      <svg className=\"w-4 h-4 text-fd-green\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n      </svg>\n    );\n  };\n\n  return (\n    <div className=\"bg-fd-darker rounded-lg border border-fd-border overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-fd-dark border-b border-fd-border\">\n            <tr>\n              <th\n                className=\"px-4 py-3 text-left text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\n                onClick={() => handleSort('entity')}\n              >\n                <div className=\"flex items-center gap-2\">\n                  Entity Name\n                  <SortIcon field=\"entity\" />\n                </div>\n              </th>\n              <th\n                className=\"px-4 py-3 text-right text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\n                onClick={() => handleSort('marginalElPct')}\n              >\n                <div className=\"flex items-center justify-end gap-2\">\n                  Marginal EL %\n                  <SortIcon field=\"marginalElPct\" />\n                </div>\n              </th>\n              <th\n                className=\"px-4 py-3 text-right text-sm font-medium text-fd-text cursor-pointer hover:bg-fd-border transition-colors\"\n                onClick={() => handleSort('beta')}\n              >\n                <div className=\"flex items-center justify-end gap-2\">\n                  Beta (β)\n                  <SortIcon field=\"beta\" />\n                </div>\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-fd-border\">\n            {sortedContributors.map((contributor, index) => (\n              <tr key={index} className=\"hover:bg-fd-dark/50 transition-colors\">\n                <td className=\"px-4 py-3 text-sm text-fd-text\">{contributor.entity}</td>\n                <td className=\"px-4 py-3 text-sm text-fd-text text-right font-medium\">\n                  {contributor.marginalElPct.toFixed(2)}%\n                </td>\n                <td className=\"px-4 py-3 text-sm text-fd-text-muted text-right\">\n                  {contributor.beta.toFixed(3)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {sortedContributors.length === 0 && (\n        <div className=\"p-8 text-center text-fd-text-muted\">No contributors data available</div>\n      )}\n    </div>\n  );\n};\n\nexport default ContributorsTable;\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\MetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\MetricsGlossaryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationConfigForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\portfolio\\simulation\\SimulationStatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\CashflowScheduleTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\MarketDataPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\RegressionStatusBadge.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":17,"column":88,"nodeType":"MemberExpression","endLine":17,"endColumn":104}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface Props {\n  status: 'PASS' | 'FAIL' | 'UNKNOWN';\n  lastRun?: string;\n}\n\nconst colorMap: Record<string, string> = {\n  PASS: 'bg-green-600 text-white',\n  FAIL: 'bg-red-600 text-white',\n  UNKNOWN: 'bg-gray-600 text-white',\n};\n\nconst RegressionStatusBadge: React.FC<Props> = ({ status, lastRun }) => {\n  return (\n    <span\n      className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-semibold ${colorMap[status]}`}\n      title={\n        lastRun ? `Last regression: ${new Date(lastRun).toLocaleString()}` : 'No regression run yet'\n      }\n    >\n      Regression: {status}\n    </span>\n  );\n};\n\nexport default RegressionStatusBadge;\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\RiskMeasuresPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkForPayoutEvent', 'loadCouponPeriods', and 'loadRiskMeasures'. Either include them or remove the dependency array.","line":219,"column":6,"nodeType":"ArrayExpression","endLine":219,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [checkForPayoutEvent, loadCouponPeriods, loadRiskMeasures, tradeId]","fix":{"range":[7540,7549],"text":"[checkForPayoutEvent, loadCouponPeriods, loadRiskMeasures, tradeId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\ScenarioRunModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\risk\\__tests__\\RegressionStatusBadge.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\services-status-modal\\ServicesStatusModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\settlement-view\\SettlementView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\top-bar\\TopBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\components\\trade-detail-modal\\TradeDetailModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":182,"column":12,"nodeType":"MemberExpression","endLine":182,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\config\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\data\\referenceData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\data\\simulationGlossary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\hooks\\useSimulationPolling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\basketService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\bondService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\cdsTradeService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\creditEventService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\lifecycleService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\novationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\portfolioService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\risk\\riskService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\risk\\riskTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\services\\simulationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\types\\basket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\types\\lifecycle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"C:\\Users\\AyodeleOladeji\\Documents\\dev\\credit-default-swap\\frontend\\src\\utils\\formatters.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":183,"column":64,"nodeType":"MemberExpression","endLine":183,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility functions for formatting numbers, currencies, and other data types\n */\n\n/**\n * Format a number as currency (USD by default)\n */\nexport const formatCurrency = (\n  value: number | string | null | undefined,\n  currency: string = 'USD',\n  locale: string = 'en-US'\n): string => {\n  if (value === null || value === undefined || value === '') {\n    return '$0.00';\n  }\n\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  \n  if (isNaN(numValue)) {\n    return '$0.00';\n  }\n\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(numValue);\n};\n\n/**\n * Format a number with specified decimal places\n */\nexport const formatNumber = (\n  value: number | string | null | undefined,\n  decimals: number = 2,\n  locale: string = 'en-US'\n): string => {\n  if (value === null || value === undefined || value === '') {\n    return '0';\n  }\n\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  \n  if (isNaN(numValue)) {\n    return '0';\n  }\n\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(numValue);\n};\n\n/**\n * Format a number as percentage\n */\nexport const formatPercentage = (\n  value: number | string | null | undefined,\n  decimals: number = 2\n): string => {\n  if (value === null || value === undefined || value === '') {\n    return '0.00%';\n  }\n\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  \n  if (isNaN(numValue)) {\n    return '0.00%';\n  }\n\n  return `${formatNumber(numValue, decimals)}%`;\n};\n\n/**\n * Format large numbers with K, M, B suffixes\n */\nexport const formatCompactNumber = (\n  value: number | string | null | undefined,\n  decimals: number = 1\n): string => {\n  if (value === null || value === undefined || value === '') {\n    return '0';\n  }\n\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  \n  if (isNaN(numValue)) {\n    return '0';\n  }\n\n  const abs = Math.abs(numValue);\n  const sign = numValue < 0 ? '-' : '';\n  \n  if (abs >= 1e9) {\n    return `${sign}${formatNumber(abs / 1e9, decimals)}B`;\n  } else if (abs >= 1e6) {\n    return `${sign}${formatNumber(abs / 1e6, decimals)}M`;\n  } else if (abs >= 1e3) {\n    return `${sign}${formatNumber(abs / 1e3, decimals)}K`;\n  } else {\n    return `${sign}${formatNumber(abs, decimals)}`;\n  }\n};\n\n/**\n * Format a date to a readable string\n */\nexport const formatDate = (\n  date: Date | string | null | undefined,\n  format: 'short' | 'medium' | 'long' = 'medium'\n): string => {\n  if (!date) {\n    return '-';\n  }\n\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  if (isNaN(dateObj.getTime())) {\n    return '-';\n  }\n\n  const options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: format === 'short' ? 'numeric' : format === 'medium' ? 'short' : 'long',\n    day: 'numeric'\n  };\n\n  if (format === 'long') {\n    options.weekday = 'long';\n  }\n\n  return dateObj.toLocaleDateString('en-US', options);\n};\n\n/**\n * Format a date and time to a readable string\n */\nexport const formatDateTime = (\n  date: Date | string | null | undefined,\n  includeSeconds: boolean = false\n): string => {\n  if (!date) {\n    return '-';\n  }\n\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  if (isNaN(dateObj.getTime())) {\n    return '-';\n  }\n\n  const dateOptions: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  };\n\n  const timeOptions: Intl.DateTimeFormatOptions = {\n    hour: '2-digit',\n    minute: '2-digit',\n    ...(includeSeconds && { second: '2-digit' })\n  };\n\n  const datePart = dateObj.toLocaleDateString('en-US', dateOptions);\n  const timePart = dateObj.toLocaleTimeString('en-US', timeOptions);\n\n  return `${datePart} ${timePart}`;\n};\n\n/**\n * Format file size in bytes to human readable format\n */\nexport const formatFileSize = (bytes: number | null | undefined): string => {\n  if (!bytes || bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Format basis points to percentage\n */\nexport const formatBasisPoints = (\n  bps: number | string | null | undefined,\n  decimals: number = 2\n): string => {\n  if (bps === null || bps === undefined || bps === '') {\n    return '0.00%';\n  }\n\n  const numValue = typeof bps === 'string' ? parseFloat(bps) : bps;\n  \n  if (isNaN(numValue)) {\n    return '0.00%';\n  }\n\n  const percentage = numValue / 10000; // Convert basis points to percentage\n  return formatPercentage(percentage * 100, decimals);\n};\n\n/**\n * Truncate text with ellipsis\n */\nexport const truncateText = (\n  text: string | null | undefined,\n  maxLength: number\n): string => {\n  if (!text) {\n    return '';\n  }\n\n  if (text.length <= maxLength) {\n    return text;\n  }\n\n  return `${text.substring(0, maxLength)}...`;\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]